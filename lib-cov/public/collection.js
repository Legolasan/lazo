/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['public/collection.js']) {
  _$jscoverage['public/collection.js'] = [];
  _$jscoverage['public/collection.js'][1] = 0;
  _$jscoverage['public/collection.js'][2] = 0;
  _$jscoverage['public/collection.js'][18] = 0;
  _$jscoverage['public/collection.js'][21] = 0;
  _$jscoverage['public/collection.js'][22] = 0;
  _$jscoverage['public/collection.js'][23] = 0;
  _$jscoverage['public/collection.js'][24] = 0;
  _$jscoverage['public/collection.js'][26] = 0;
  _$jscoverage['public/collection.js'][30] = 0;
  _$jscoverage['public/collection.js'][33] = 0;
  _$jscoverage['public/collection.js'][34] = 0;
  _$jscoverage['public/collection.js'][36] = 0;
  _$jscoverage['public/collection.js'][37] = 0;
  _$jscoverage['public/collection.js'][41] = 0;
  _$jscoverage['public/collection.js'][45] = 0;
  _$jscoverage['public/collection.js'][49] = 0;
  _$jscoverage['public/collection.js'][53] = 0;
  _$jscoverage['public/collection.js'][58] = 0;
  _$jscoverage['public/collection.js'][59] = 0;
  _$jscoverage['public/collection.js'][60] = 0;
  _$jscoverage['public/collection.js'][62] = 0;
  _$jscoverage['public/collection.js'][63] = 0;
  _$jscoverage['public/collection.js'][66] = 0;
  _$jscoverage['public/collection.js'][67] = 0;
  _$jscoverage['public/collection.js'][68] = 0;
  _$jscoverage['public/collection.js'][71] = 0;
  _$jscoverage['public/collection.js'][74] = 0;
  _$jscoverage['public/collection.js'][77] = 0;
  _$jscoverage['public/collection.js'][78] = 0;
  _$jscoverage['public/collection.js'][79] = 0;
  _$jscoverage['public/collection.js'][80] = 0;
  _$jscoverage['public/collection.js'][82] = 0;
  _$jscoverage['public/collection.js'][87] = 0;
}
_$jscoverage['public/collection.js'].source = ["define(['underscore', 'backbone', 'proxy', 'lazoModel'], function (_, Backbone, Proxy, LazoModel) {","    'use strict';","","    /**","     * A base class for collections","     *","     * @class LazoCollection","     * @constructor","     * @param {Array Models} models An array of models","     * @param {Object} options","     *      @param {String} options.name The name of the collection in the repo","     *      @param {Object} options.params A hash of name-value pairs used in url substitution","     *      @param {Context} options.ctx The current context for the request","     *      @param {String} [options.modelName] Specify the LazoModel class that the collection contains.  This","     *      should be the name of the model in the repo.  This *MUST* be used with the Backbone.Collection model property.","     * @extends Backbone.Collection","     */","    var Collection = Backbone.Collection.extend({","","        constructor: function(attributes, options) {","            this._initialize(attributes, options);","            this.cid = _.uniqueId('c');","            if (options.modelName) {","                this.modelName = options.modelName;","            }","            Backbone.Collection.apply(this, arguments);","        },","","        sync: function(method, model, options) {","            var self = this,","                success = options.success;","","            options.success = function (resp) {","                self._resp = resp;","","                if (success) {","                    success(resp);","                }","            };","","            Proxy.prototype.sync.call(this, method, options);","        },","","        call: function(fname, args, options) {","            Proxy.prototype.callSyncher.call(this, fname, args, options);","        },","","        _initialize: function(attributes, options) {","            LazoModel.prototype._initialize.apply(this, arguments);","        },","","        _getGlobalId: function() {","            return LazoModel.prototype._getGlobalId.apply(this);","        },","","        // taken directly from Backbone.Collection._prepareModel, except where noted by comments","        _prepareModel: function(attrs, options) {","            if (attrs instanceof Backbone.Model) {","                if (!attrs.collection) attrs.collection = this;","                return attrs;","            }","            options || (options = {});","            options.collection = this;","","            // begin lazo specific overrides","            if (this.modelName) {","                if (_.isFunction(this.modelName)) {","                    options.name = this.modelName(attrs, options);","                }","                else {","                    options.name = this.modelName;","                }","            }","            options.ctx = this.ctx;","            // end lazo specific overrides","","            var model = new this.model(attrs, options);","            if (!model._validate(attrs, options)) {","                this.trigger('invalid', this, attrs, options);","                return false;","            }","            return model;","        }","","    });","","    return Collection;","});"];
_$jscoverage['public/collection.js'][1]++;
define(["underscore", "backbone", "proxy", "lazoModel"], (function (_, Backbone, Proxy, LazoModel) {
  _$jscoverage['public/collection.js'][2]++;
  "use strict";
  _$jscoverage['public/collection.js'][18]++;
  var Collection = Backbone.Collection.extend({constructor: (function (attributes, options) {
  _$jscoverage['public/collection.js'][21]++;
  this._initialize(attributes, options);
  _$jscoverage['public/collection.js'][22]++;
  this.cid = _.uniqueId("c");
  _$jscoverage['public/collection.js'][23]++;
  if (options.modelName) {
    _$jscoverage['public/collection.js'][24]++;
    this.modelName = options.modelName;
  }
  _$jscoverage['public/collection.js'][26]++;
  Backbone.Collection.apply(this, arguments);
}), sync: (function (method, model, options) {
  _$jscoverage['public/collection.js'][30]++;
  var self = this, success = options.success;
  _$jscoverage['public/collection.js'][33]++;
  options.success = (function (resp) {
  _$jscoverage['public/collection.js'][34]++;
  self._resp = resp;
  _$jscoverage['public/collection.js'][36]++;
  if (success) {
    _$jscoverage['public/collection.js'][37]++;
    success(resp);
  }
});
  _$jscoverage['public/collection.js'][41]++;
  Proxy.prototype.sync.call(this, method, options);
}), call: (function (fname, args, options) {
  _$jscoverage['public/collection.js'][45]++;
  Proxy.prototype.callSyncher.call(this, fname, args, options);
}), _initialize: (function (attributes, options) {
  _$jscoverage['public/collection.js'][49]++;
  LazoModel.prototype._initialize.apply(this, arguments);
}), _getGlobalId: (function () {
  _$jscoverage['public/collection.js'][53]++;
  return LazoModel.prototype._getGlobalId.apply(this);
}), _prepareModel: (function (attrs, options) {
  _$jscoverage['public/collection.js'][58]++;
  if ((attrs instanceof Backbone.Model)) {
    _$jscoverage['public/collection.js'][59]++;
    if ((! attrs.collection)) {
      _$jscoverage['public/collection.js'][59]++;
      attrs.collection = this;
    }
    _$jscoverage['public/collection.js'][60]++;
    return attrs;
  }
  _$jscoverage['public/collection.js'][62]++;
  (options || (options = {}));
  _$jscoverage['public/collection.js'][63]++;
  options.collection = this;
  _$jscoverage['public/collection.js'][66]++;
  if (this.modelName) {
    _$jscoverage['public/collection.js'][67]++;
    if (_.isFunction(this.modelName)) {
      _$jscoverage['public/collection.js'][68]++;
      options.name = this.modelName(attrs, options);
    }
    else {
      _$jscoverage['public/collection.js'][71]++;
      options.name = this.modelName;
    }
  }
  _$jscoverage['public/collection.js'][74]++;
  options.ctx = this.ctx;
  _$jscoverage['public/collection.js'][77]++;
  var model = new (this.model)(attrs, options);
  _$jscoverage['public/collection.js'][78]++;
  if ((! model._validate(attrs, options))) {
    _$jscoverage['public/collection.js'][79]++;
    this.trigger("invalid", this, attrs, options);
    _$jscoverage['public/collection.js'][80]++;
    return false;
  }
  _$jscoverage['public/collection.js'][82]++;
  return model;
})});
  _$jscoverage['public/collection.js'][87]++;
  return Collection;
}));
