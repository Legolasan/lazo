/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['public/model.js']) {
  _$jscoverage['public/model.js'] = [];
  _$jscoverage['public/model.js'][1] = 0;
  _$jscoverage['public/model.js'][2] = 0;
  _$jscoverage['public/model.js'][16] = 0;
  _$jscoverage['public/model.js'][19] = 0;
  _$jscoverage['public/model.js'][20] = 0;
  _$jscoverage['public/model.js'][24] = 0;
  _$jscoverage['public/model.js'][27] = 0;
  _$jscoverage['public/model.js'][28] = 0;
  _$jscoverage['public/model.js'][30] = 0;
  _$jscoverage['public/model.js'][31] = 0;
  _$jscoverage['public/model.js'][36] = 0;
  _$jscoverage['public/model.js'][40] = 0;
  _$jscoverage['public/model.js'][44] = 0;
  _$jscoverage['public/model.js'][45] = 0;
  _$jscoverage['public/model.js'][47] = 0;
  _$jscoverage['public/model.js'][48] = 0;
  _$jscoverage['public/model.js'][52] = 0;
  _$jscoverage['public/model.js'][58] = 0;
  _$jscoverage['public/model.js'][59] = 0;
  _$jscoverage['public/model.js'][64] = 0;
  _$jscoverage['public/model.js'][65] = 0;
  _$jscoverage['public/model.js'][66] = 0;
  _$jscoverage['public/model.js'][67] = 0;
  _$jscoverage['public/model.js'][70] = 0;
  _$jscoverage['public/model.js'][71] = 0;
  _$jscoverage['public/model.js'][73] = 0;
  _$jscoverage['public/model.js'][74] = 0;
  _$jscoverage['public/model.js'][75] = 0;
  _$jscoverage['public/model.js'][78] = 0;
  _$jscoverage['public/model.js'][79] = 0;
  _$jscoverage['public/model.js'][81] = 0;
  _$jscoverage['public/model.js'][84] = 0;
  _$jscoverage['public/model.js'][85] = 0;
  _$jscoverage['public/model.js'][86] = 0;
  _$jscoverage['public/model.js'][89] = 0;
  _$jscoverage['public/model.js'][90] = 0;
  _$jscoverage['public/model.js'][92] = 0;
  _$jscoverage['public/model.js'][93] = 0;
  _$jscoverage['public/model.js'][94] = 0;
  _$jscoverage['public/model.js'][95] = 0;
  _$jscoverage['public/model.js'][96] = 0;
  _$jscoverage['public/model.js'][98] = 0;
  _$jscoverage['public/model.js'][99] = 0;
  _$jscoverage['public/model.js'][100] = 0;
  _$jscoverage['public/model.js'][101] = 0;
  _$jscoverage['public/model.js'][102] = 0;
  _$jscoverage['public/model.js'][107] = 0;
  _$jscoverage['public/model.js'][109] = 0;
  _$jscoverage['public/model.js'][112] = 0;
  _$jscoverage['public/model.js'][118] = 0;
  _$jscoverage['public/model.js'][119] = 0;
  _$jscoverage['public/model.js'][122] = 0;
  _$jscoverage['public/model.js'][123] = 0;
  _$jscoverage['public/model.js'][126] = 0;
  _$jscoverage['public/model.js'][129] = 0;
  _$jscoverage['public/model.js'][130] = 0;
  _$jscoverage['public/model.js'][132] = 0;
  _$jscoverage['public/model.js'][139] = 0;
  _$jscoverage['public/model.js'][141] = 0;
  _$jscoverage['public/model.js'][142] = 0;
  _$jscoverage['public/model.js'][143] = 0;
  _$jscoverage['public/model.js'][147] = 0;
  _$jscoverage['public/model.js'][148] = 0;
  _$jscoverage['public/model.js'][149] = 0;
  _$jscoverage['public/model.js'][150] = 0;
  _$jscoverage['public/model.js'][151] = 0;
  _$jscoverage['public/model.js'][156] = 0;
  _$jscoverage['public/model.js'][162] = 0;
}
_$jscoverage['public/model.js'].source = ["define(['underscore', 'backbone', 'proxy', 'resolver/model', 'async'], function (_, Backbone, Proxy, helpers, async) {","    'use strict';","","    /**","     * A base class for models","     *","     * @class LazoModel","     * @constructor","     * @param {Object} attributes A hash of name-value pairs that will be the model's state","     * @param {Object} options","     *      @param {String} options.name The name of the model in the repo","     *      @param {Object} options.params A hash of name-value pairs used in url substitution","     *      @param {Context} options.ctx The current context for the request","     * @extends Backbone.Model","     */","    var LazoModel = Backbone.Model.extend({","","            constructor: function(attributes, options) {","                this._initialize(attributes, options);","                Backbone.Model.apply(this, arguments);","            },","","            sync: function(method, model, options) {","                var self = this,","                    success = options.success;","","                options.success = function (resp) {","                    self._resp = resp;","","                    if (success) {","                        success(resp);","                    }","                };","","                //ignoring model since this==model passed by backbone sync","                Proxy.prototype.sync.call(this, method, options);","            },","","            call: function(fname, args, options) {","                Proxy.prototype.callSyncher.call(this, fname, args, options);","            },","","            _initialize: function(attributes, options) {","                if (options.name) {","                    this.name = options.name;","                }","                this.params = options.params;","                this.ctx = options.ctx;","            },","","            _getGlobalId: function() {","                return LazoModel._getGlobalId(this.name, this.params);","            }","","        },","        {","            _serialize: function (models, serModelObj) {","                _.each(models, function (value, key, list) {","                    serModelObj[key] = value._getGlobalId();","                });","            },","","            _deserialize: function (ctl, _rootCtx, options) {","                LAZO.require(['utils/modelLoader'], function (modelLoader) {","                    var mdlFuncs = [];","                    var processModel = function (value, key, type) {","                        var glMdlMeta = _rootCtx.modelList[value],","                            modelInstances = _rootCtx.modelInstances;","","                        mdlFuncs[mdlFuncs.length] = function (asyncCb) {","                            var gid = LazoModel._getGlobalId(glMdlMeta.name, glMdlMeta.params);","","                            function checkProcessing() {","                                if (modelInstances[gid].processing) {","                                    setTimeout(checkProcessing, 50);","                                }","                                else {","                                    ctl.ctx[type + 's'][key] = modelInstances[gid];","                                    asyncCb(null, modelInstances[gid]);","                                }","                                return;","                            }","","                            if (modelInstances[gid]) {","                                checkProcessing();","                                return;","                            }","                            else {","                                modelInstances[gid] = {};","                                modelInstances[gid].processing = true;","","                                var _initModel = function (Model, _default) {","                                    var m = new Model(glMdlMeta.data, {name: glMdlMeta.name, ctx: ctl.ctx, params: glMdlMeta.params, parse: true});","                                    modelInstances[gid] = m;","                                    m.cid = glMdlMeta.cid;","                                    m._default = _default;","","                                    if (glMdlMeta.idMap) {","                                        _.each(glMdlMeta.idMap, function (elem) {","                                            var modelItem = m.get(elem.id);","                                            if (modelItem) {","                                                modelItem.cid = elem.cid;","                                            }","                                        });","                                    }","","                                    ctl.ctx[type + 's'][key] = m;","","                                    return asyncCb(null, m);","                                };","","                                modelLoader(glMdlMeta.name, type, _initModel);","                            }","                        };","                    };","","                    // models","                    _.each(ctl.ctx.models, function (value, key, list) {","                        processModel(value, key, 'model');","                    });","                    // collections","                    _.each(ctl.ctx.collections, function (value, key, list) {","                        processModel(value, key, 'collection');","                    });","                    // load models and collections in parallel","                    async.parallel(","                        mdlFuncs,","                        function (err, results) {","                            if (err) {","                                return options.error(err);","                            }","                            return options.success();","                        }","                    );","                });","            },","","            _getGlobalId: function (modelName, params) {","                var globalModelId = 'GET:'+modelName;","","                if (modelName.indexOf(\"u:\") === 0 || modelName.indexOf(\"http\") === 0) {","                    if (params) {","                        globalModelId = helpers.substitute(globalModelId, params);","                    }","                }","                else {","                    if (params) {","                        var props = _.keys(params);","                        props.sort();","                        _.each(props, function(element, index, list) {","                            globalModelId = globalModelId + \"|\" + element + \"=\" + params[element];","                        });","                    }","                }","","                return globalModelId;","            }","        }","","    );","","    return LazoModel;","});"];
_$jscoverage['public/model.js'][1]++;
define(["underscore", "backbone", "proxy", "resolver/model", "async"], (function (_, Backbone, Proxy, helpers, async) {
  _$jscoverage['public/model.js'][2]++;
  "use strict";
  _$jscoverage['public/model.js'][16]++;
  var LazoModel = Backbone.Model.extend({constructor: (function (attributes, options) {
  _$jscoverage['public/model.js'][19]++;
  this._initialize(attributes, options);
  _$jscoverage['public/model.js'][20]++;
  Backbone.Model.apply(this, arguments);
}), sync: (function (method, model, options) {
  _$jscoverage['public/model.js'][24]++;
  var self = this, success = options.success;
  _$jscoverage['public/model.js'][27]++;
  options.success = (function (resp) {
  _$jscoverage['public/model.js'][28]++;
  self._resp = resp;
  _$jscoverage['public/model.js'][30]++;
  if (success) {
    _$jscoverage['public/model.js'][31]++;
    success(resp);
  }
});
  _$jscoverage['public/model.js'][36]++;
  Proxy.prototype.sync.call(this, method, options);
}), call: (function (fname, args, options) {
  _$jscoverage['public/model.js'][40]++;
  Proxy.prototype.callSyncher.call(this, fname, args, options);
}), _initialize: (function (attributes, options) {
  _$jscoverage['public/model.js'][44]++;
  if (options.name) {
    _$jscoverage['public/model.js'][45]++;
    this.name = options.name;
  }
  _$jscoverage['public/model.js'][47]++;
  this.params = options.params;
  _$jscoverage['public/model.js'][48]++;
  this.ctx = options.ctx;
}), _getGlobalId: (function () {
  _$jscoverage['public/model.js'][52]++;
  return LazoModel._getGlobalId(this.name, this.params);
})}, {_serialize: (function (models, serModelObj) {
  _$jscoverage['public/model.js'][58]++;
  _.each(models, (function (value, key, list) {
  _$jscoverage['public/model.js'][59]++;
  serModelObj[key] = value._getGlobalId();
}));
}), _deserialize: (function (ctl, _rootCtx, options) {
  _$jscoverage['public/model.js'][64]++;
  LAZO.require(["utils/modelLoader"], (function (modelLoader) {
  _$jscoverage['public/model.js'][65]++;
  var mdlFuncs = [];
  _$jscoverage['public/model.js'][66]++;
  var processModel = (function (value, key, type) {
  _$jscoverage['public/model.js'][67]++;
  var glMdlMeta = _rootCtx.modelList[value], modelInstances = _rootCtx.modelInstances;
  _$jscoverage['public/model.js'][70]++;
  mdlFuncs[mdlFuncs.length] = (function (asyncCb) {
  _$jscoverage['public/model.js'][71]++;
  var gid = LazoModel._getGlobalId(glMdlMeta.name, glMdlMeta.params);
  _$jscoverage['public/model.js'][73]++;
  function checkProcessing() {
    _$jscoverage['public/model.js'][74]++;
    if (modelInstances[gid].processing) {
      _$jscoverage['public/model.js'][75]++;
      setTimeout(checkProcessing, 50);
    }
    else {
      _$jscoverage['public/model.js'][78]++;
      ctl.ctx[(type + "s")][key] = modelInstances[gid];
      _$jscoverage['public/model.js'][79]++;
      asyncCb(null, modelInstances[gid]);
    }
    _$jscoverage['public/model.js'][81]++;
    return;
}
  _$jscoverage['public/model.js'][84]++;
  if (modelInstances[gid]) {
    _$jscoverage['public/model.js'][85]++;
    checkProcessing();
    _$jscoverage['public/model.js'][86]++;
    return;
  }
  else {
    _$jscoverage['public/model.js'][89]++;
    modelInstances[gid] = {};
    _$jscoverage['public/model.js'][90]++;
    modelInstances[gid].processing = true;
    _$jscoverage['public/model.js'][92]++;
    var _initModel = (function (Model, _default) {
  _$jscoverage['public/model.js'][93]++;
  var m = new Model(glMdlMeta.data, {name: glMdlMeta.name, ctx: ctl.ctx, params: glMdlMeta.params, parse: true});
  _$jscoverage['public/model.js'][94]++;
  modelInstances[gid] = m;
  _$jscoverage['public/model.js'][95]++;
  m.cid = glMdlMeta.cid;
  _$jscoverage['public/model.js'][96]++;
  m._default = _default;
  _$jscoverage['public/model.js'][98]++;
  if (glMdlMeta.idMap) {
    _$jscoverage['public/model.js'][99]++;
    _.each(glMdlMeta.idMap, (function (elem) {
  _$jscoverage['public/model.js'][100]++;
  var modelItem = m.get(elem.id);
  _$jscoverage['public/model.js'][101]++;
  if (modelItem) {
    _$jscoverage['public/model.js'][102]++;
    modelItem.cid = elem.cid;
  }
}));
  }
  _$jscoverage['public/model.js'][107]++;
  ctl.ctx[(type + "s")][key] = m;
  _$jscoverage['public/model.js'][109]++;
  return asyncCb(null, m);
});
    _$jscoverage['public/model.js'][112]++;
    modelLoader(glMdlMeta.name, type, _initModel);
  }
});
});
  _$jscoverage['public/model.js'][118]++;
  _.each(ctl.ctx.models, (function (value, key, list) {
  _$jscoverage['public/model.js'][119]++;
  processModel(value, key, "model");
}));
  _$jscoverage['public/model.js'][122]++;
  _.each(ctl.ctx.collections, (function (value, key, list) {
  _$jscoverage['public/model.js'][123]++;
  processModel(value, key, "collection");
}));
  _$jscoverage['public/model.js'][126]++;
  async.parallel(mdlFuncs, (function (err, results) {
  _$jscoverage['public/model.js'][129]++;
  if (err) {
    _$jscoverage['public/model.js'][130]++;
    return options.error(err);
  }
  _$jscoverage['public/model.js'][132]++;
  return options.success();
}));
}));
}), _getGlobalId: (function (modelName, params) {
  _$jscoverage['public/model.js'][139]++;
  var globalModelId = ("GET:" + modelName);
  _$jscoverage['public/model.js'][141]++;
  if (((modelName.indexOf("u:") === 0) || (modelName.indexOf("http") === 0))) {
    _$jscoverage['public/model.js'][142]++;
    if (params) {
      _$jscoverage['public/model.js'][143]++;
      globalModelId = helpers.substitute(globalModelId, params);
    }
  }
  else {
    _$jscoverage['public/model.js'][147]++;
    if (params) {
      _$jscoverage['public/model.js'][148]++;
      var props = _.keys(params);
      _$jscoverage['public/model.js'][149]++;
      props.sort();
      _$jscoverage['public/model.js'][150]++;
      _.each(props, (function (element, index, list) {
  _$jscoverage['public/model.js'][151]++;
  globalModelId = (globalModelId + "|" + element + "=" + params[element]);
}));
    }
  }
  _$jscoverage['public/model.js'][156]++;
  return globalModelId;
})});
  _$jscoverage['public/model.js'][162]++;
  return LazoModel;
}));
