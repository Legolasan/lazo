/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['public/views/base.js']) {
  _$jscoverage['public/views/base.js'] = [];
  _$jscoverage['public/views/base.js'][1] = 0;
  _$jscoverage['public/views/base.js'][3] = 0;
  _$jscoverage['public/views/base.js'][5] = 0;
  _$jscoverage['public/views/base.js'][8] = 0;
  _$jscoverage['public/views/base.js'][9] = 0;
  _$jscoverage['public/views/base.js'][11] = 0;
  _$jscoverage['public/views/base.js'][12] = 0;
  _$jscoverage['public/views/base.js'][13] = 0;
  _$jscoverage['public/views/base.js'][14] = 0;
  _$jscoverage['public/views/base.js'][15] = 0;
  _$jscoverage['public/views/base.js'][16] = 0;
  _$jscoverage['public/views/base.js'][17] = 0;
  _$jscoverage['public/views/base.js'][21] = 0;
  _$jscoverage['public/views/base.js'][23] = 0;
  _$jscoverage['public/views/base.js'][24] = 0;
  _$jscoverage['public/views/base.js'][26] = 0;
  _$jscoverage['public/views/base.js'][27] = 0;
  _$jscoverage['public/views/base.js'][28] = 0;
  _$jscoverage['public/views/base.js'][29] = 0;
  _$jscoverage['public/views/base.js'][30] = 0;
  _$jscoverage['public/views/base.js'][32] = 0;
  _$jscoverage['public/views/base.js'][35] = 0;
  _$jscoverage['public/views/base.js'][36] = 0;
  _$jscoverage['public/views/base.js'][38] = 0;
  _$jscoverage['public/views/base.js'][43] = 0;
  _$jscoverage['public/views/base.js'][44] = 0;
  _$jscoverage['public/views/base.js'][45] = 0;
  _$jscoverage['public/views/base.js'][48] = 0;
  _$jscoverage['public/views/base.js'][52] = 0;
  _$jscoverage['public/views/base.js'][53] = 0;
  _$jscoverage['public/views/base.js'][56] = 0;
  _$jscoverage['public/views/base.js'][57] = 0;
  _$jscoverage['public/views/base.js'][58] = 0;
  _$jscoverage['public/views/base.js'][62] = 0;
  _$jscoverage['public/views/base.js'][67] = 0;
  _$jscoverage['public/views/base.js'][68] = 0;
  _$jscoverage['public/views/base.js'][69] = 0;
  _$jscoverage['public/views/base.js'][73] = 0;
  _$jscoverage['public/views/base.js'][77] = 0;
  _$jscoverage['public/views/base.js'][81] = 0;
  _$jscoverage['public/views/base.js'][82] = 0;
  _$jscoverage['public/views/base.js'][86] = 0;
  _$jscoverage['public/views/base.js'][87] = 0;
  _$jscoverage['public/views/base.js'][93] = 0;
  _$jscoverage['public/views/base.js'][101] = 0;
  _$jscoverage['public/views/base.js'][102] = 0;
  _$jscoverage['public/views/base.js'][103] = 0;
  _$jscoverage['public/views/base.js'][107] = 0;
  _$jscoverage['public/views/base.js'][135] = 0;
  _$jscoverage['public/views/base.js'][140] = 0;
  _$jscoverage['public/views/base.js'][141] = 0;
  _$jscoverage['public/views/base.js'][143] = 0;
  _$jscoverage['public/views/base.js'][144] = 0;
  _$jscoverage['public/views/base.js'][147] = 0;
  _$jscoverage['public/views/base.js'][148] = 0;
  _$jscoverage['public/views/base.js'][151] = 0;
  _$jscoverage['public/views/base.js'][152] = 0;
  _$jscoverage['public/views/base.js'][154] = 0;
  _$jscoverage['public/views/base.js'][159] = 0;
  _$jscoverage['public/views/base.js'][162] = 0;
  _$jscoverage['public/views/base.js'][163] = 0;
  _$jscoverage['public/views/base.js'][164] = 0;
  _$jscoverage['public/views/base.js'][168] = 0;
  _$jscoverage['public/views/base.js'][169] = 0;
  _$jscoverage['public/views/base.js'][172] = 0;
  _$jscoverage['public/views/base.js'][177] = 0;
  _$jscoverage['public/views/base.js'][183] = 0;
  _$jscoverage['public/views/base.js'][184] = 0;
  _$jscoverage['public/views/base.js'][185] = 0;
  _$jscoverage['public/views/base.js'][186] = 0;
  _$jscoverage['public/views/base.js'][187] = 0;
  _$jscoverage['public/views/base.js'][188] = 0;
  _$jscoverage['public/views/base.js'][192] = 0;
  _$jscoverage['public/views/base.js'][194] = 0;
  _$jscoverage['public/views/base.js'][197] = 0;
  _$jscoverage['public/views/base.js'][200] = 0;
  _$jscoverage['public/views/base.js'][205] = 0;
  _$jscoverage['public/views/base.js'][206] = 0;
  _$jscoverage['public/views/base.js'][207] = 0;
  _$jscoverage['public/views/base.js'][210] = 0;
  _$jscoverage['public/views/base.js'][215] = 0;
}
_$jscoverage['public/views/base.js'].source = ["define(['jquery', 'underscore', 'backbone', 'renderer'], function ($, _, Backbone, renderer) {","","    'use strict';","","    var LazoView = Backbone.View.extend({","","        constructor: function (options) {","            this.isServer = LAZO.app.isServer;","            this.isClient = LAZO.app.isClient;","            // Backbone.View.prototype constructor with the exception of _augment","            this.cid = _.uniqueId('view');","            this._augment(options || {}); // override cid before delegateEvents is called","            this._configure(options || {});","            this._ensureElement();","            this.initialize.apply(this, arguments);","            this.delegateEvents();","            this._getTemplateEngine();","        },","","        serialize: function (obj, exceptions) { // serialize an object","            var data = {};","","            for (var k in obj) { // do not use _.each; it uses hasOwnProp;","                if ((_.isObject(obj[k]) || _.isArray(obj[k]) || _.isString(obj[k]) || _.isNumber(obj[k])) &amp;&amp; // white list","                    (!exceptions[k] &amp;&amp; !_.isFunction(obj[k]))) { // black list","                    if (k === 'models' || k === 'collections') { // serialize the models and collections from ctl.ctx","                        data[k] = {};","                        for (var j in obj[k]) {","                            if (obj[k][j].toJSON) {","                                data[k][j] = obj[k][j].toJSON();","                            } else {","                                data[k][j] = obj[k][j];","                            }","                        }","                    } else if (obj[k] instanceof Backbone.Collection || obj[k] instanceof Backbone.Model) {","                        data[k] = obj[k].toJSON();","                    } else {","                        data[k] = obj[k];","                    }","                }","            }","","            if (obj._rootCtx) {","                data.crumb = obj._rootCtx.cookies &amp;&amp; obj._rootCtx.cookies.crumb ? obj._rootCtx.cookies.crumb : '';","                _.extend(data, obj._rootCtx.data);","            }","","            return data;","        },","","        render: function () {","            if (this.isServer) {","                throw 'view, ' + this.name + ', attempted to call render on the server.';","            }","","            this.ctl._getEl().html(renderer.getHtml(this.ctl, this.cid, 'view'));","            renderer.attachViews(this.ctl);","            return this;","        },","","        getHtml: function () { // get view html","            return this._wrapperEl(this.getInnerHtml());","        },","","        // Overrides Backbone.prototype.setElement. Sets LazoView attributes.","        setElement: function () { // set view el attribues after bb.prototype.setElement is called","            var response = Backbone.View.prototype.setElement.apply(this, arguments);","            this._setElAttrs();","            return response;","        },","","        serializeData: function () { // serialize data for rendering","            return this.transformData(_.extend(this.serialize(this.ctl.ctx, this._exclusions), this.serialize(this, this._exclusions)));","        },","","        transformData: function (data) { // hook point for developers to modify data before passing to the template","            return data;","        },","","        addExclusion: function (exclusion) { // add property key to serialization exclusions list","            this._exclusions[exclusion] = true;","            return this;","        },","","        removeExclusion: function (exclusion) { // remove property key from serialization exclusions list","            delete this._exclusions[exclusion];","            return this;","        },","","        afterRender: function () {},","","        getInnerHtml: function () { // get view html minus this.el string wrapper","            return this._templateEngine.execute(this.template, this.serializeData(), this.templatePath);","        },","","        onRemove: function () {},","","        onAttach: function () {},","","        remove: function () {","            Backbone.View.prototype.remove.call(this);","            this.trigger('remove');","            return this;","        },","","        _augment: function (options) {","            _.extend(this, _.pick(options, this._augmentKeys));","        },","","        // Names used to lookup properties in the options object and augment the view instance.","        _augmentKeys: ['ctl', 'cid', 'template', 'name', 'render', 'templateEngine', 'templatePath', 'ref', 'basePath', 'isBase', 'hasTemplate', 'getInnerHtml', 'compiledTemplatePath'],","","        // Names used to lookup properties in the options object and augment the view instance.","        _exclusions: { ctl: true, $el: true, el: true, parent: true, options: true }, // properties that are not serialized","","        // Used to lookup values and assign them to view instance el as attributes.","        _elAttributes: {","","            'lazo-view-name': 'view:name',","","            'lazo-view-id': 'view:cid',","","            'lazo-model-name': 'view:model.name',","","            'lazo-model-id': 'view:model.cid',","","            'lazo-collection-name': 'view:collection.name',","","            'lazo-collection-id': 'view:collection.cid'","","        },","","        // Generates a string representation of view instance el and wraps html string passed.","        _wrapperEl: function (html) { // generate string representation of this.el","            var elHtmlOpen,","                elHtmlClose,","                attrsStr = '',","                attrs = _.extend({}, _.result(this, 'attributes'), this._setElAttrs());","","            if (this.id) {","                attrs.id = _.result(this, 'id');","            }","            if (this.className) {","                attrs['class'] = _.result(this, 'className');","            }","","            _.each(attrs, function (val, key) {","                attrsStr += ' ' + key + '=\"' + val + '\"';","            });","","            elHtmlOpen = '&lt;' + _.result(this, 'tagName') + attrsStr + '&gt;';","            elHtmlClose = '&lt;/' + _.result(this, 'tagName') + '&gt;';","","            return elHtmlOpen + html + elHtmlClose;","        },","","        // Creates a hash of attributes used when creating this.el or the string represenation of this.el.","        _setElAttrs: function () { // add el data attributes","            var attrs = {},","                self = this;","","            _.each(this._elAttributes, function (val, key) {","                if (!_.isUndefined(val = self._resolveAttrVal(val))) {","                    attrs[key] = val;","                }","            });","","            if (!this.isServer) {","                this.$el.attr(attrs);","            }","","            return attrs;","        },","","        // Resolves an attribute value based on the lookup convention defined in this._elAttributes.","        _resolveAttrVal: function (key) {","            var retVal,","                parts,","                viewKeyParts = key.split(':'),","                viewKey,","                struct = this;","","            if (viewKeyParts.length &amp;&amp; viewKeyParts[0] === 'view') {","                viewKey = viewKeyParts[1];","                if ((parts = viewKey.split('.')).length) {","                    _.each(parts, function (part) { // attempt to build out chain","                        if (!_.isUndefined(struct)) {","                            struct = struct[part];","                        }","                    });","","                    retVal = struct;","                } else {","                    retVal = this[viewKey];","                }","            } else {","                retVal = _.result(key);","            }","","            return retVal;","        },","","        // Returns a reference to the view's template engine based on this.templateEngine.","        _getTemplateEngine: function () {","            if (!this._templateEngine) {","                this.templateEngine = this.templateEngine || LAZO.app.getDefaultTemplateEngineName();","                this._templateEngine = LAZO.app.getTemplateEngine(this.templateEngine);","            }","","            return this._templateEngine;","        }","","    });","","    return LazoView;","","});"];
_$jscoverage['public/views/base.js'][1]++;
define(["jquery", "underscore", "backbone", "renderer"], (function ($, _, Backbone, renderer) {
  _$jscoverage['public/views/base.js'][3]++;
  "use strict";
  _$jscoverage['public/views/base.js'][5]++;
  var LazoView = Backbone.View.extend({constructor: (function (options) {
  _$jscoverage['public/views/base.js'][8]++;
  this.isServer = LAZO.app.isServer;
  _$jscoverage['public/views/base.js'][9]++;
  this.isClient = LAZO.app.isClient;
  _$jscoverage['public/views/base.js'][11]++;
  this.cid = _.uniqueId("view");
  _$jscoverage['public/views/base.js'][12]++;
  this._augment((options || {}));
  _$jscoverage['public/views/base.js'][13]++;
  this._configure((options || {}));
  _$jscoverage['public/views/base.js'][14]++;
  this._ensureElement();
  _$jscoverage['public/views/base.js'][15]++;
  this.initialize.apply(this, arguments);
  _$jscoverage['public/views/base.js'][16]++;
  this.delegateEvents();
  _$jscoverage['public/views/base.js'][17]++;
  this._getTemplateEngine();
}), serialize: (function (obj, exceptions) {
  _$jscoverage['public/views/base.js'][21]++;
  var data = {};
  _$jscoverage['public/views/base.js'][23]++;
  for (var k in obj) {
    _$jscoverage['public/views/base.js'][24]++;
    if (((_.isObject(obj[k]) || _.isArray(obj[k]) || _.isString(obj[k]) || _.isNumber(obj[k])) && ((! exceptions[k]) && (! _.isFunction(obj[k]))))) {
      _$jscoverage['public/views/base.js'][26]++;
      if (((k === "models") || (k === "collections"))) {
        _$jscoverage['public/views/base.js'][27]++;
        data[k] = {};
        _$jscoverage['public/views/base.js'][28]++;
        for (var j in obj[k]) {
          _$jscoverage['public/views/base.js'][29]++;
          if (obj[k][j].toJSON) {
            _$jscoverage['public/views/base.js'][30]++;
            data[k][j] = obj[k][j].toJSON();
          }
          else {
            _$jscoverage['public/views/base.js'][32]++;
            data[k][j] = obj[k][j];
          }
}
      }
      else {
        _$jscoverage['public/views/base.js'][35]++;
        if (((obj[k] instanceof Backbone.Collection) || (obj[k] instanceof Backbone.Model))) {
          _$jscoverage['public/views/base.js'][36]++;
          data[k] = obj[k].toJSON();
        }
        else {
          _$jscoverage['public/views/base.js'][38]++;
          data[k] = obj[k];
        }
      }
    }
}
  _$jscoverage['public/views/base.js'][43]++;
  if (obj._rootCtx) {
    _$jscoverage['public/views/base.js'][44]++;
    data.crumb = ((obj._rootCtx.cookies && obj._rootCtx.cookies.crumb)? obj._rootCtx.cookies.crumb: "");
    _$jscoverage['public/views/base.js'][45]++;
    _.extend(data, obj._rootCtx.data);
  }
  _$jscoverage['public/views/base.js'][48]++;
  return data;
}), render: (function () {
  _$jscoverage['public/views/base.js'][52]++;
  if (this.isServer) {
    _$jscoverage['public/views/base.js'][53]++;
    throw ("view, " + this.name + ", attempted to call render on the server.");
  }
  _$jscoverage['public/views/base.js'][56]++;
  this.ctl._getEl().html(renderer.getHtml(this.ctl, this.cid, "view"));
  _$jscoverage['public/views/base.js'][57]++;
  renderer.attachViews(this.ctl);
  _$jscoverage['public/views/base.js'][58]++;
  return this;
}), getHtml: (function () {
  _$jscoverage['public/views/base.js'][62]++;
  return this._wrapperEl(this.getInnerHtml());
}), setElement: (function () {
  _$jscoverage['public/views/base.js'][67]++;
  var response = Backbone.View.prototype.setElement.apply(this, arguments);
  _$jscoverage['public/views/base.js'][68]++;
  this._setElAttrs();
  _$jscoverage['public/views/base.js'][69]++;
  return response;
}), serializeData: (function () {
  _$jscoverage['public/views/base.js'][73]++;
  return this.transformData(_.extend(this.serialize(this.ctl.ctx, this._exclusions), this.serialize(this, this._exclusions)));
}), transformData: (function (data) {
  _$jscoverage['public/views/base.js'][77]++;
  return data;
}), addExclusion: (function (exclusion) {
  _$jscoverage['public/views/base.js'][81]++;
  this._exclusions[exclusion] = true;
  _$jscoverage['public/views/base.js'][82]++;
  return this;
}), removeExclusion: (function (exclusion) {
  _$jscoverage['public/views/base.js'][86]++;
  (delete this._exclusions[exclusion]);
  _$jscoverage['public/views/base.js'][87]++;
  return this;
}), afterRender: (function () {
}), getInnerHtml: (function () {
  _$jscoverage['public/views/base.js'][93]++;
  return this._templateEngine.execute(this.template, this.serializeData(), this.templatePath);
}), onRemove: (function () {
}), onAttach: (function () {
}), remove: (function () {
  _$jscoverage['public/views/base.js'][101]++;
  Backbone.View.prototype.remove.call(this);
  _$jscoverage['public/views/base.js'][102]++;
  this.trigger("remove");
  _$jscoverage['public/views/base.js'][103]++;
  return this;
}), _augment: (function (options) {
  _$jscoverage['public/views/base.js'][107]++;
  _.extend(this, _.pick(options, this._augmentKeys));
}), _augmentKeys: ["ctl", "cid", "template", "name", "render", "templateEngine", "templatePath", "ref", "basePath", "isBase", "hasTemplate", "getInnerHtml", "compiledTemplatePath"], _exclusions: {ctl: true, $el: true, el: true, parent: true, options: true}, _elAttributes: {"lazo-view-name": "view:name", "lazo-view-id": "view:cid", "lazo-model-name": "view:model.name", "lazo-model-id": "view:model.cid", "lazo-collection-name": "view:collection.name", "lazo-collection-id": "view:collection.cid"}, _wrapperEl: (function (html) {
  _$jscoverage['public/views/base.js'][135]++;
  var elHtmlOpen, elHtmlClose, attrsStr = "", attrs = _.extend({}, _.result(this, "attributes"), this._setElAttrs());
  _$jscoverage['public/views/base.js'][140]++;
  if (this.id) {
    _$jscoverage['public/views/base.js'][141]++;
    attrs.id = _.result(this, "id");
  }
  _$jscoverage['public/views/base.js'][143]++;
  if (this.className) {
    _$jscoverage['public/views/base.js'][144]++;
    attrs["class"] = _.result(this, "className");
  }
  _$jscoverage['public/views/base.js'][147]++;
  _.each(attrs, (function (val, key) {
  _$jscoverage['public/views/base.js'][148]++;
  attrsStr += (" " + key + "=\"" + val + "\"");
}));
  _$jscoverage['public/views/base.js'][151]++;
  elHtmlOpen = ("<" + _.result(this, "tagName") + attrsStr + ">");
  _$jscoverage['public/views/base.js'][152]++;
  elHtmlClose = ("</" + _.result(this, "tagName") + ">");
  _$jscoverage['public/views/base.js'][154]++;
  return (elHtmlOpen + html + elHtmlClose);
}), _setElAttrs: (function () {
  _$jscoverage['public/views/base.js'][159]++;
  var attrs = {}, self = this;
  _$jscoverage['public/views/base.js'][162]++;
  _.each(this._elAttributes, (function (val, key) {
  _$jscoverage['public/views/base.js'][163]++;
  if ((! _.isUndefined((val = self._resolveAttrVal(val))))) {
    _$jscoverage['public/views/base.js'][164]++;
    attrs[key] = val;
  }
}));
  _$jscoverage['public/views/base.js'][168]++;
  if ((! this.isServer)) {
    _$jscoverage['public/views/base.js'][169]++;
    this.$el.attr(attrs);
  }
  _$jscoverage['public/views/base.js'][172]++;
  return attrs;
}), _resolveAttrVal: (function (key) {
  _$jscoverage['public/views/base.js'][177]++;
  var retVal, parts, viewKeyParts = key.split(":"), viewKey, struct = this;
  _$jscoverage['public/views/base.js'][183]++;
  if ((viewKeyParts.length && (viewKeyParts[0] === "view"))) {
    _$jscoverage['public/views/base.js'][184]++;
    viewKey = viewKeyParts[1];
    _$jscoverage['public/views/base.js'][185]++;
    if ((parts = viewKey.split(".")).length) {
      _$jscoverage['public/views/base.js'][186]++;
      _.each(parts, (function (part) {
  _$jscoverage['public/views/base.js'][187]++;
  if ((! _.isUndefined(struct))) {
    _$jscoverage['public/views/base.js'][188]++;
    struct = struct[part];
  }
}));
      _$jscoverage['public/views/base.js'][192]++;
      retVal = struct;
    }
    else {
      _$jscoverage['public/views/base.js'][194]++;
      retVal = this[viewKey];
    }
  }
  else {
    _$jscoverage['public/views/base.js'][197]++;
    retVal = _.result(key);
  }
  _$jscoverage['public/views/base.js'][200]++;
  return retVal;
}), _getTemplateEngine: (function () {
  _$jscoverage['public/views/base.js'][205]++;
  if ((! this._templateEngine)) {
    _$jscoverage['public/views/base.js'][206]++;
    this.templateEngine = (this.templateEngine || LAZO.app.getDefaultTemplateEngineName());
    _$jscoverage['public/views/base.js'][207]++;
    this._templateEngine = LAZO.app.getTemplateEngine(this.templateEngine);
  }
  _$jscoverage['public/views/base.js'][210]++;
  return this._templateEngine;
})});
  _$jscoverage['public/views/base.js'][215]++;
  return LazoView;
}));
