/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['public/views/collection.js']) {
  _$jscoverage['public/views/collection.js'] = [];
  _$jscoverage['public/views/collection.js'][1] = 0;
  _$jscoverage['public/views/collection.js'][3] = 0;
  _$jscoverage['public/views/collection.js'][5] = 0;
  _$jscoverage['public/views/collection.js'][7] = 0;
  _$jscoverage['public/views/collection.js'][10] = 0;
  _$jscoverage['public/views/collection.js'][11] = 0;
  _$jscoverage['public/views/collection.js'][12] = 0;
  _$jscoverage['public/views/collection.js'][13] = 0;
  _$jscoverage['public/views/collection.js'][14] = 0;
  _$jscoverage['public/views/collection.js'][16] = 0;
  _$jscoverage['public/views/collection.js'][18] = 0;
  _$jscoverage['public/views/collection.js'][19] = 0;
  _$jscoverage['public/views/collection.js'][20] = 0;
  _$jscoverage['public/views/collection.js'][21] = 0;
  _$jscoverage['public/views/collection.js'][22] = 0;
  _$jscoverage['public/views/collection.js'][23] = 0;
  _$jscoverage['public/views/collection.js'][27] = 0;
  _$jscoverage['public/views/collection.js'][31] = 0;
  _$jscoverage['public/views/collection.js'][35] = 0;
  _$jscoverage['public/views/collection.js'][39] = 0;
  _$jscoverage['public/views/collection.js'][43] = 0;
  _$jscoverage['public/views/collection.js'][44] = 0;
  _$jscoverage['public/views/collection.js'][48] = 0;
  _$jscoverage['public/views/collection.js'][49] = 0;
  _$jscoverage['public/views/collection.js'][53] = 0;
  _$jscoverage['public/views/collection.js'][54] = 0;
  _$jscoverage['public/views/collection.js'][56] = 0;
  _$jscoverage['public/views/collection.js'][60] = 0;
  _$jscoverage['public/views/collection.js'][65] = 0;
  _$jscoverage['public/views/collection.js'][66] = 0;
  _$jscoverage['public/views/collection.js'][67] = 0;
  _$jscoverage['public/views/collection.js'][69] = 0;
  _$jscoverage['public/views/collection.js'][71] = 0;
  _$jscoverage['public/views/collection.js'][72] = 0;
  _$jscoverage['public/views/collection.js'][73] = 0;
  _$jscoverage['public/views/collection.js'][77] = 0;
  _$jscoverage['public/views/collection.js'][81] = 0;
  _$jscoverage['public/views/collection.js'][85] = 0;
  _$jscoverage['public/views/collection.js'][86] = 0;
  _$jscoverage['public/views/collection.js'][87] = 0;
  _$jscoverage['public/views/collection.js'][88] = 0;
  _$jscoverage['public/views/collection.js'][91] = 0;
  _$jscoverage['public/views/collection.js'][92] = 0;
  _$jscoverage['public/views/collection.js'][97] = 0;
  _$jscoverage['public/views/collection.js'][101] = 0;
  _$jscoverage['public/views/collection.js'][108] = 0;
  _$jscoverage['public/views/collection.js'][109] = 0;
  _$jscoverage['public/views/collection.js'][112] = 0;
  _$jscoverage['public/views/collection.js'][113] = 0;
  _$jscoverage['public/views/collection.js'][115] = 0;
  _$jscoverage['public/views/collection.js'][116] = 0;
  _$jscoverage['public/views/collection.js'][117] = 0;
  _$jscoverage['public/views/collection.js'][118] = 0;
  _$jscoverage['public/views/collection.js'][121] = 0;
  _$jscoverage['public/views/collection.js'][122] = 0;
  _$jscoverage['public/views/collection.js'][123] = 0;
  _$jscoverage['public/views/collection.js'][128] = 0;
  _$jscoverage['public/views/collection.js'][129] = 0;
  _$jscoverage['public/views/collection.js'][130] = 0;
  _$jscoverage['public/views/collection.js'][131] = 0;
  _$jscoverage['public/views/collection.js'][132] = 0;
  _$jscoverage['public/views/collection.js'][135] = 0;
  _$jscoverage['public/views/collection.js'][136] = 0;
  _$jscoverage['public/views/collection.js'][139] = 0;
  _$jscoverage['public/views/collection.js'][156] = 0;
  _$jscoverage['public/views/collection.js'][160] = 0;
  _$jscoverage['public/views/collection.js'][161] = 0;
  _$jscoverage['public/views/collection.js'][162] = 0;
  _$jscoverage['public/views/collection.js'][163] = 0;
  _$jscoverage['public/views/collection.js'][165] = 0;
  _$jscoverage['public/views/collection.js'][169] = 0;
  _$jscoverage['public/views/collection.js'][170] = 0;
  _$jscoverage['public/views/collection.js'][171] = 0;
  _$jscoverage['public/views/collection.js'][174] = 0;
  _$jscoverage['public/views/collection.js'][191] = 0;
  _$jscoverage['public/views/collection.js'][195] = 0;
  _$jscoverage['public/views/collection.js'][200] = 0;
  _$jscoverage['public/views/collection.js'][202] = 0;
  _$jscoverage['public/views/collection.js'][203] = 0;
  _$jscoverage['public/views/collection.js'][204] = 0;
  _$jscoverage['public/views/collection.js'][205] = 0;
  _$jscoverage['public/views/collection.js'][208] = 0;
  _$jscoverage['public/views/collection.js'][213] = 0;
  _$jscoverage['public/views/collection.js'][214] = 0;
  _$jscoverage['public/views/collection.js'][215] = 0;
  _$jscoverage['public/views/collection.js'][216] = 0;
  _$jscoverage['public/views/collection.js'][218] = 0;
  _$jscoverage['public/views/collection.js'][222] = 0;
  _$jscoverage['public/views/collection.js'][223] = 0;
  _$jscoverage['public/views/collection.js'][224] = 0;
  _$jscoverage['public/views/collection.js'][225] = 0;
  _$jscoverage['public/views/collection.js'][232] = 0;
  _$jscoverage['public/views/collection.js'][237] = 0;
  _$jscoverage['public/views/collection.js'][239] = 0;
  _$jscoverage['public/views/collection.js'][240] = 0;
  _$jscoverage['public/views/collection.js'][241] = 0;
  _$jscoverage['public/views/collection.js'][242] = 0;
  _$jscoverage['public/views/collection.js'][243] = 0;
  _$jscoverage['public/views/collection.js'][248] = 0;
  _$jscoverage['public/views/collection.js'][251] = 0;
  _$jscoverage['public/views/collection.js'][252] = 0;
  _$jscoverage['public/views/collection.js'][253] = 0;
  _$jscoverage['public/views/collection.js'][254] = 0;
  _$jscoverage['public/views/collection.js'][256] = 0;
  _$jscoverage['public/views/collection.js'][259] = 0;
  _$jscoverage['public/views/collection.js'][260] = 0;
  _$jscoverage['public/views/collection.js'][261] = 0;
  _$jscoverage['public/views/collection.js'][262] = 0;
  _$jscoverage['public/views/collection.js'][263] = 0;
  _$jscoverage['public/views/collection.js'][266] = 0;
  _$jscoverage['public/views/collection.js'][271] = 0;
  _$jscoverage['public/views/collection.js'][272] = 0;
  _$jscoverage['public/views/collection.js'][277] = 0;
  _$jscoverage['public/views/collection.js'][283] = 0;
  _$jscoverage['public/views/collection.js'][285] = 0;
  _$jscoverage['public/views/collection.js'][286] = 0;
  _$jscoverage['public/views/collection.js'][287] = 0;
  _$jscoverage['public/views/collection.js'][288] = 0;
  _$jscoverage['public/views/collection.js'][289] = 0;
  _$jscoverage['public/views/collection.js'][290] = 0;
  _$jscoverage['public/views/collection.js'][292] = 0;
  _$jscoverage['public/views/collection.js'][293] = 0;
  _$jscoverage['public/views/collection.js'][297] = 0;
  _$jscoverage['public/views/collection.js'][298] = 0;
  _$jscoverage['public/views/collection.js'][299] = 0;
  _$jscoverage['public/views/collection.js'][300] = 0;
  _$jscoverage['public/views/collection.js'][301] = 0;
  _$jscoverage['public/views/collection.js'][304] = 0;
  _$jscoverage['public/views/collection.js'][305] = 0;
  _$jscoverage['public/views/collection.js'][309] = 0;
  _$jscoverage['public/views/collection.js'][312] = 0;
  _$jscoverage['public/views/collection.js'][313] = 0;
  _$jscoverage['public/views/collection.js'][314] = 0;
  _$jscoverage['public/views/collection.js'][316] = 0;
  _$jscoverage['public/views/collection.js'][317] = 0;
  _$jscoverage['public/views/collection.js'][318] = 0;
  _$jscoverage['public/views/collection.js'][320] = 0;
  _$jscoverage['public/views/collection.js'][323] = 0;
  _$jscoverage['public/views/collection.js'][327] = 0;
  _$jscoverage['public/views/collection.js'][328] = 0;
  _$jscoverage['public/views/collection.js'][329] = 0;
  _$jscoverage['public/views/collection.js'][331] = 0;
  _$jscoverage['public/views/collection.js'][335] = 0;
  _$jscoverage['public/views/collection.js'][339] = 0;
  _$jscoverage['public/views/collection.js'][343] = 0;
  _$jscoverage['public/views/collection.js'][344] = 0;
  _$jscoverage['public/views/collection.js'][345] = 0;
  _$jscoverage['public/views/collection.js'][347] = 0;
  _$jscoverage['public/views/collection.js'][348] = 0;
  _$jscoverage['public/views/collection.js'][349] = 0;
  _$jscoverage['public/views/collection.js'][351] = 0;
  _$jscoverage['public/views/collection.js'][356] = 0;
  _$jscoverage['public/views/collection.js'][361] = 0;
  _$jscoverage['public/views/collection.js'][362] = 0;
  _$jscoverage['public/views/collection.js'][363] = 0;
  _$jscoverage['public/views/collection.js'][364] = 0;
  _$jscoverage['public/views/collection.js'][365] = 0;
  _$jscoverage['public/views/collection.js'][368] = 0;
  _$jscoverage['public/views/collection.js'][372] = 0;
  _$jscoverage['public/views/collection.js'][377] = 0;
  _$jscoverage['public/views/collection.js'][378] = 0;
  _$jscoverage['public/views/collection.js'][379] = 0;
  _$jscoverage['public/views/collection.js'][380] = 0;
  _$jscoverage['public/views/collection.js'][381] = 0;
  _$jscoverage['public/views/collection.js'][382] = 0;
  _$jscoverage['public/views/collection.js'][386] = 0;
  _$jscoverage['public/views/collection.js'][390] = 0;
  _$jscoverage['public/views/collection.js'][395] = 0;
  _$jscoverage['public/views/collection.js'][396] = 0;
  _$jscoverage['public/views/collection.js'][397] = 0;
  _$jscoverage['public/views/collection.js'][401] = 0;
  _$jscoverage['public/views/collection.js'][405] = 0;
  _$jscoverage['public/views/collection.js'][410] = 0;
  _$jscoverage['public/views/collection.js'][411] = 0;
  _$jscoverage['public/views/collection.js'][412] = 0;
  _$jscoverage['public/views/collection.js'][415] = 0;
  _$jscoverage['public/views/collection.js'][419] = 0;
  _$jscoverage['public/views/collection.js'][425] = 0;
  _$jscoverage['public/views/collection.js'][426] = 0;
  _$jscoverage['public/views/collection.js'][432] = 0;
  _$jscoverage['public/views/collection.js'][439] = 0;
  _$jscoverage['public/views/collection.js'][440] = 0;
  _$jscoverage['public/views/collection.js'][442] = 0;
  _$jscoverage['public/views/collection.js'][443] = 0;
  _$jscoverage['public/views/collection.js'][446] = 0;
  _$jscoverage['public/views/collection.js'][447] = 0;
  _$jscoverage['public/views/collection.js'][449] = 0;
  _$jscoverage['public/views/collection.js'][455] = 0;
  _$jscoverage['public/views/collection.js'][459] = 0;
  _$jscoverage['public/views/collection.js'][463] = 0;
  _$jscoverage['public/views/collection.js'][464] = 0;
  _$jscoverage['public/views/collection.js'][465] = 0;
  _$jscoverage['public/views/collection.js'][466] = 0;
  _$jscoverage['public/views/collection.js'][469] = 0;
  _$jscoverage['public/views/collection.js'][470] = 0;
  _$jscoverage['public/views/collection.js'][471] = 0;
  _$jscoverage['public/views/collection.js'][474] = 0;
  _$jscoverage['public/views/collection.js'][479] = 0;
}
_$jscoverage['public/views/collection.js'].source = ["define(['lazoView', 'renderer', 'underscore'], function (View, renderer, _) {","","    'use strict';","","    var COLLECTION_SPECIFIER = 'collection'; // value for lazo-collection-target when collection object is specified","","    var LazoCollectionView = View.extend({","","        constructor: function (options) {","            var collection;","            options = options || {};","            this._augmentKeys = View.prototype._augmentKeys.concat(['itemView', 'emptyView']);","            if (_.isString((collection = options.collection || this.collection))) {","                this.collection = options.ctl.ctx.collections[collection];","            }","            View.call(this, options);","","            this.itemViewOptions = this.options.itemViewOptions || this.itemViewOptions;","            this.itemViewOptions = this.itemViewOptions || {};","            this._itemViews = {};","            this._emptyViews = {};","            this._isEmptyViewShown = {};","            return this;","        },","","        getInnerHtml: function () {","            return this._getCollectionHtml(View.prototype.getInnerHtml.call(this));","        },","","        getItemView: function (model, collection) {","            return this._getItemEmptyView('itemView', collection);","        },","","        getEmptyView: function (collection) {","            return this._getItemEmptyView('emptyView', collection);","        },","","        resolveView: function (viewName) {","            return this._itemEmptyViewConstructors[viewName];","        },","","        addItemView: function (view, $target, collection) {","            $target.append(view.el);","            return this;","        },","","        removeItemView: function (view, $target, collection) {","            view.remove();","            return this;","        },","","        renderCollection: function (views, $target, collection) {","            _.each(views, function (view) {","                $target.append(view.el);","            });","            return this;","        },","","        getCollections: function () {","            var collectionNames = this._findCollectionNames(View.prototype.getInnerHtml.call(this)),","                collections = [],","                collection,","                self = this;","","            if (this.collection) {","                if (_.isString(this.collection) &amp;&amp; (collection = this.ctl.ctx.collections[this.collection])) {","                    collections.push(collection);","                } else {","                    collections.push(this.collection);","                }","            } else if (collectionNames &amp;&amp; collectionNames.length) {","                collections = _.map(collectionNames, function (collectionName) {","                    return self._getCollection(collectionName);","                });","            }","","            return collections;","        },","","        getItemEmptyViews: function () {","            var self = this,","                views = [],","                view;","","            _.each(this.getCollections(), function (collection) {","                if (collection.length) {","                    collection.each(function (model) {","                        views.push(self._getItemViewInstance(model, collection));","                    });","                } else {","                    if ((view = self._getEmptyViewInstance(collection))) {","                        views.push(view);","                    }","                }","            });","","            return views;","        },","","        attachItemViews: function () { // TODO: make private method","            var collectionNames = this._findCollectionNames(this.$el.html()),","                self = this,","                attachItemView,","                iterateAndListen,","                view,","                View;","","            attachItemView = function (view, $el) {","                renderer.attachView(view, $el[0]);","            };","","            iterateAndListen = function (collection, name) {","                self._listenToCollection(collection);","","                if (!collection.length) {","                    if ((view = self._getEmptyViewInstance(collection))) {","                        self._isEmptyViewShown[collection.cid] = true;","                        renderer.attachView(view, self._getCollectionTarget(collection).children()[0]);","                    }","                } else {","                    collection.each(function (model) {","                        var $el = self._getViewEl(model);","                        attachItemView(self._getItemViewInstance(model, collection, { cid: $el.attr('lazo-view-id') }), $el);","                    });","                }","            };","","            if (collectionNames) {","                _.each(collectionNames, function (name) {","                    var c = self._getCollection(name);","                    if(c){","                        iterateAndListen(c, name);","                    }","                });","            } else if (this.collection) {","                iterateAndListen(this.collection);","            }","","            return this;","        },","","        // Atrribute used to mark collection targets.","        _targetAttr: 'lazo-collection-target',","","        // Hash of item view instances. Key is the model id associated to the view instance.","        _itemViews: null,","","        // Hash of empty view instances. Key is the collection id associated to the view instance.","        _emptyViews: null,","","        // Used to store the showing state of a collection empty view.","        _isEmptyViewShown: null,","","        // Generates a string representation of item view instances el or an empty view el if collection is not populated.","        _getItemViewsHtml: function (collection) {","            var html = '',","                self = this,","                view;","","            if (!collection.length) {","                if ((view = this._getEmptyViewInstance(collection))) {","                    this._isEmptyViewShown[collection.cid] = true;","                    return view.getHtml();","                } else { // empty view not defined","                    return html;","                }","            }","","            this._removeEmptyView(collection);","            collection.each(function (model) {","                html += self._getItemViewInstance(model, collection).getHtml();","            });","","            return html;","        },","","        /**","         * Returns name of view to be used by collection based on view type, item or empty.","         *","         * views: {","         *     collectionName: {","         *         itemView: 'itemView',","         *         emptyView: ['emptyView1', 'emptyView2']","         *     }","         * }","         *","         * itemView: ['itemView1', 'itemView2'],","         * emptyView: 'emptyView',","         */","        _getItemEmptyViewName: function (type, collection) {","            var collectionName = this._getCollectionName(collection),","                viewName = collectionName &amp;&amp; this.views &amp;&amp; this.views[collectionName] ? this.views[collectionName][type] :","                    this[type];","","            return _.isArray(viewName) ? viewName[0] : viewName;","        },","","        // Returns the view constructor to be used by collection based on view type, item or empty.","        _getItemEmptyView: function (type, collection) {","            var viewName = this._getItemEmptyViewName(type, collection);","","            if (!viewName &amp;&amp; type === 'emptyView') {","                return;","            } else if (!viewName) {","                throw type + ' view not found.';","            }","","            return this.resolveView(viewName);","        },","","        // Gets the name of a collection.","        _getCollectionName: function (collection) {","            var collections;","            if (this.collection) {","                if (!_.isString(this.collection)) {","                    return COLLECTION_SPECIFIER;","                } else {","                    return;","                }","            }","","            collections = this.ctl.ctx.collections;","            for (var key in collections) {","                if (collections[key] === collection) {","                    return key;","                }","            }","        },","","        // Gets the item view $el for a model.","        _getViewEl: function (model) {","            return this.$('[lazo-model-id=\"' + model.cid + '\"]');","        },","","        // Sets up view, does internal cleanup, and calls public method.","        _addItemView: function (model, collection) {","            var view = this._getItemViewInstance(model, collection);","","            this._removeEmptyView(collection);","            view.render();","            view.afterRender();","            this.addItemView(view, this._getCollectionTarget(collection), collection);","            return this;","        },","","        // Destroys view, does internal cleanup, and calls public method.","        _removeItemView: function (model, collection) {","            var view,","                self = this;","","            if(this._itemViews[model.cid]){","                this._itemViews[model.cid].once('remove', function () {","                    renderer.cleanupView(self._itemViews[model.cid]);","                    delete self._itemViews[model.cid];","                });","                this.removeItemView(this._itemViews[model.cid], this._getCollectionTarget(collection), collection);","            }","","            if (!collection.length) {","                if ((view = this._getEmptyViewInstance(collection))) {","                    this._isEmptyViewShown[collection.cid] = true;","                    view.render();","                    this.addItemView(view, this._getCollectionTarget(collection), collection);","                }","            }","            return this;","        },","","        // Gets the collection target $el","        _getCollectionTarget: function (collection) {","            var name = this._getCollectionName(collection);","            return name ? $('[' + this._targetAttr + '=\"' + name + '\"]') : this.$el;","        },","","        // Renders a collection on the client.","        _renderCollection: function (collection) {","            var self = this,","                views = [],","                $target = self._getCollectionTarget(collection),","                view;","","            // Empty existing collection","            $target.empty();","","            if (!collection.length) {","                if ((view = this._getEmptyViewInstance(collection))) {","                    this._isEmptyViewShown[collection.cid] = true;","                    view.render();","                    self.renderCollection([view], self._getCollectionTarget(collection), collection);","                    return this;","                } else { // empty view not defined","                    self.renderCollection([], self._getCollectionTarget(collection), collection);","                    return this;","                }","            }","","            this._removeEmptyView(collection);","            collection.each(function (model) {","                view = self._getItemViewInstance(model, collection);","                view.render();","                views.push(view);","            });","","            self.renderCollection(views, self._getCollectionTarget(collection));","            return this;","        },","","        _removeEmptyView: function (collection) {","            var view,","                self = this;","","            if (this._isEmptyViewShown[collection.cid]) {","                view = this._emptyViews[collection.cid];","                this._isEmptyViewShown[collection.cid] = false;","","                view.once('remove', function () {","                    renderer.cleanupView(view);","                    delete self._emptyViews[collection.cid];","                });","                this.removeItemView(view, this._getCollectionTarget(collection), collection);","            }","","            return this;","        },","","        _listenToCollection: function (collection) {","            this.listenTo(collection, 'add', this._addItemView, this);","            this.listenTo(collection, 'remove', this._removeItemView, this);","            this.listenTo(collection, 'reset', this._renderCollection, this);","","            return this;","        },","","        _getCollection: function (name) {","            return name === COLLECTION_SPECIFIER ? this.collection : this.ctl.ctx.collections[name];","        },","","        _getCollectionHtml: function (html) {","            var collectionNames = this._findCollectionNames(html),","                self = this,","                collectionHtml = {};","","            if (collectionNames.length) { // collection targets defined in template; get html for each collection","                _.each(collectionNames, function (collectionName) {","                    collectionHtml[collectionName] = self._getItemViewsHtml(self._getCollection(collectionName));","                });","                return this._insertCollectionHtml(collectionNames, collectionHtml, html);","            } else if (this.collection) { // collection is inserted directly under this.el","                return this._getItemViewsHtml(this.collection);","            } else { // no collection found or defined","                return html;","            }","        },","","        _insertCollectionHtml: function (collectionNames, collectionHtml, htmlBuffer) {","            var match,","                htmlOpen,","                htmlClose,","                self = this;","","            _.each(collectionNames, function (collectionName) {","                match = renderer.getInsertIndex(self._targetAttr, collectionName, htmlBuffer);","                htmlOpen = htmlBuffer.substr(0, match.index + match[0].length);","                htmlClose = htmlBuffer.substr(match.index + match[0].length);","                htmlBuffer = htmlOpen + collectionHtml[collectionName] + htmlClose;","            });","","            return htmlBuffer;","        },","","        _findCollectionNames: function (html) { // TODO: there has to be a better regex; shouldn't need the while loop","            var htmlSubstr = html,","                match = true,","                names = [],","                start = 0;","","            while (match) {","                htmlSubstr = htmlSubstr.substr(start);","                match = htmlSubstr.match(/&lt;[^&gt;]*\\s(?:lazo-collection-target=[\"']([^\"']*)[\"'])[^&gt;]*&gt;/); // TODO: use this._targetAttr","                if (match) {","                    names.push(match[1]);","                    start = match[0].length + match.index;","                }","            }","","            return names;","        },","","        _getEmptyViewInstance: function (collection) {","            var view,","                View,","                self = this,","                name;","","            if (!(view = self._emptyViews[collection.cid])) {","                if ((view = this._createItemEmptyView('emptyView', collection, { collection: collection }))) {","                    self._emptyViews[collection.cid] = view;","                }","            }","","            return view;","        },","","        _getItemViewInstance: function (model, collection, options) {","            var view,","                View,","                self = this,","                name;","","            if (!(view = self._itemViews[model.cid])) {","                options = options || {};","                view = self._itemViews[model.cid] = this._createItemEmptyView('itemView', collection, _.extend({ model: model }, options));","            }","","            return view;","        },","","        _createItemEmptyView: function (viewType, collection, options) {","            var self = this,","                name = this._getItemEmptyViewName(viewType, collection),","                View = viewType === 'itemView' ? self.getItemView(options.model, collection) :","                    self.getEmptyView(collection);","","","            if (!View) { // empty view not defined","                return;","            }","","            // template values cannot be determined during construction because view instances","            // are constucted by the controller to determine the template dependencies for","            // a collection view item and empty views.","            return new View(_.extend({","                ctl: self.ctl,","                collection: collection,","                name: name,","                ref: self.ctl._getPath(name, 'view'),","                baseBath: self.ctl._getBasePath(name, 'view'),","                render: function () {","                    if (!_.isFunction(this.template)) {","                        this.template = self._getItemEmptyViewTemplate(this);","                    }","                    this.$el.html(this.getInnerHtml());","                    return this;","                },","                getInnerHtml: function () {","                    if (!_.isFunction(this.template)) {","                        this.template = self._getItemEmptyViewTemplate(this);","                    }","                    return View.prototype.getInnerHtml.call(this);","                }","            }, options));","        },","","        _getItemEmptyViewTemplate: function (view) {","            var templateName = _.result(view, 'templateName') || view.name,","                template = this._itemEmptyViewTemplates[templateName];","","            // this._itemEmptyViewTemplates contents differ depending on how and when they were populated","            return _.isObject(template) ? template.template : this._templateEngine.compile(template);","        },","","        _onRemove: function () {","            var self = this;","            _.each(this._itemViews, function (view, key) {","                renderer.cleanupView(view);","                delete self._itemViews[key];","            });","","            _.each(this._emptyViews, function (view, key) {","                renderer.cleanupView(view);","                delete self._emptyViews[key];","            });","","            return this;","        }","","    });","","    return LazoCollectionView;","","});"];
_$jscoverage['public/views/collection.js'][1]++;
define(["lazoView", "renderer", "underscore"], (function (View, renderer, _) {
  _$jscoverage['public/views/collection.js'][3]++;
  "use strict";
  _$jscoverage['public/views/collection.js'][5]++;
  var COLLECTION_SPECIFIER = "collection";
  _$jscoverage['public/views/collection.js'][7]++;
  var LazoCollectionView = View.extend({constructor: (function (options) {
  _$jscoverage['public/views/collection.js'][10]++;
  var collection;
  _$jscoverage['public/views/collection.js'][11]++;
  options = (options || {});
  _$jscoverage['public/views/collection.js'][12]++;
  this._augmentKeys = View.prototype._augmentKeys.concat(["itemView", "emptyView"]);
  _$jscoverage['public/views/collection.js'][13]++;
  if (_.isString((collection = (options.collection || this.collection)))) {
    _$jscoverage['public/views/collection.js'][14]++;
    this.collection = options.ctl.ctx.collections[collection];
  }
  _$jscoverage['public/views/collection.js'][16]++;
  View.call(this, options);
  _$jscoverage['public/views/collection.js'][18]++;
  this.itemViewOptions = (this.options.itemViewOptions || this.itemViewOptions);
  _$jscoverage['public/views/collection.js'][19]++;
  this.itemViewOptions = (this.itemViewOptions || {});
  _$jscoverage['public/views/collection.js'][20]++;
  this._itemViews = {};
  _$jscoverage['public/views/collection.js'][21]++;
  this._emptyViews = {};
  _$jscoverage['public/views/collection.js'][22]++;
  this._isEmptyViewShown = {};
  _$jscoverage['public/views/collection.js'][23]++;
  return this;
}), getInnerHtml: (function () {
  _$jscoverage['public/views/collection.js'][27]++;
  return this._getCollectionHtml(View.prototype.getInnerHtml.call(this));
}), getItemView: (function (model, collection) {
  _$jscoverage['public/views/collection.js'][31]++;
  return this._getItemEmptyView("itemView", collection);
}), getEmptyView: (function (collection) {
  _$jscoverage['public/views/collection.js'][35]++;
  return this._getItemEmptyView("emptyView", collection);
}), resolveView: (function (viewName) {
  _$jscoverage['public/views/collection.js'][39]++;
  return this._itemEmptyViewConstructors[viewName];
}), addItemView: (function (view, $target, collection) {
  _$jscoverage['public/views/collection.js'][43]++;
  $target.append(view.el);
  _$jscoverage['public/views/collection.js'][44]++;
  return this;
}), removeItemView: (function (view, $target, collection) {
  _$jscoverage['public/views/collection.js'][48]++;
  view.remove();
  _$jscoverage['public/views/collection.js'][49]++;
  return this;
}), renderCollection: (function (views, $target, collection) {
  _$jscoverage['public/views/collection.js'][53]++;
  _.each(views, (function (view) {
  _$jscoverage['public/views/collection.js'][54]++;
  $target.append(view.el);
}));
  _$jscoverage['public/views/collection.js'][56]++;
  return this;
}), getCollections: (function () {
  _$jscoverage['public/views/collection.js'][60]++;
  var collectionNames = this._findCollectionNames(View.prototype.getInnerHtml.call(this)), collections = [], collection, self = this;
  _$jscoverage['public/views/collection.js'][65]++;
  if (this.collection) {
    _$jscoverage['public/views/collection.js'][66]++;
    if ((_.isString(this.collection) && (collection = this.ctl.ctx.collections[this.collection]))) {
      _$jscoverage['public/views/collection.js'][67]++;
      collections.push(collection);
    }
    else {
      _$jscoverage['public/views/collection.js'][69]++;
      collections.push(this.collection);
    }
  }
  else {
    _$jscoverage['public/views/collection.js'][71]++;
    if ((collectionNames && collectionNames.length)) {
      _$jscoverage['public/views/collection.js'][72]++;
      collections = _.map(collectionNames, (function (collectionName) {
  _$jscoverage['public/views/collection.js'][73]++;
  return self._getCollection(collectionName);
}));
    }
  }
  _$jscoverage['public/views/collection.js'][77]++;
  return collections;
}), getItemEmptyViews: (function () {
  _$jscoverage['public/views/collection.js'][81]++;
  var self = this, views = [], view;
  _$jscoverage['public/views/collection.js'][85]++;
  _.each(this.getCollections(), (function (collection) {
  _$jscoverage['public/views/collection.js'][86]++;
  if (collection.length) {
    _$jscoverage['public/views/collection.js'][87]++;
    collection.each((function (model) {
  _$jscoverage['public/views/collection.js'][88]++;
  views.push(self._getItemViewInstance(model, collection));
}));
  }
  else {
    _$jscoverage['public/views/collection.js'][91]++;
    if ((view = self._getEmptyViewInstance(collection))) {
      _$jscoverage['public/views/collection.js'][92]++;
      views.push(view);
    }
  }
}));
  _$jscoverage['public/views/collection.js'][97]++;
  return views;
}), attachItemViews: (function () {
  _$jscoverage['public/views/collection.js'][101]++;
  var collectionNames = this._findCollectionNames(this.$el.html()), self = this, attachItemView, iterateAndListen, view, View;
  _$jscoverage['public/views/collection.js'][108]++;
  attachItemView = (function (view, $el) {
  _$jscoverage['public/views/collection.js'][109]++;
  renderer.attachView(view, $el[0]);
});
  _$jscoverage['public/views/collection.js'][112]++;
  iterateAndListen = (function (collection, name) {
  _$jscoverage['public/views/collection.js'][113]++;
  self._listenToCollection(collection);
  _$jscoverage['public/views/collection.js'][115]++;
  if ((! collection.length)) {
    _$jscoverage['public/views/collection.js'][116]++;
    if ((view = self._getEmptyViewInstance(collection))) {
      _$jscoverage['public/views/collection.js'][117]++;
      self._isEmptyViewShown[collection.cid] = true;
      _$jscoverage['public/views/collection.js'][118]++;
      renderer.attachView(view, self._getCollectionTarget(collection).children()[0]);
    }
  }
  else {
    _$jscoverage['public/views/collection.js'][121]++;
    collection.each((function (model) {
  _$jscoverage['public/views/collection.js'][122]++;
  var $el = self._getViewEl(model);
  _$jscoverage['public/views/collection.js'][123]++;
  attachItemView(self._getItemViewInstance(model, collection, {cid: $el.attr("lazo-view-id")}), $el);
}));
  }
});
  _$jscoverage['public/views/collection.js'][128]++;
  if (collectionNames) {
    _$jscoverage['public/views/collection.js'][129]++;
    _.each(collectionNames, (function (name) {
  _$jscoverage['public/views/collection.js'][130]++;
  var c = self._getCollection(name);
  _$jscoverage['public/views/collection.js'][131]++;
  if (c) {
    _$jscoverage['public/views/collection.js'][132]++;
    iterateAndListen(c, name);
  }
}));
  }
  else {
    _$jscoverage['public/views/collection.js'][135]++;
    if (this.collection) {
      _$jscoverage['public/views/collection.js'][136]++;
      iterateAndListen(this.collection);
    }
  }
  _$jscoverage['public/views/collection.js'][139]++;
  return this;
}), _targetAttr: "lazo-collection-target", _itemViews: null, _emptyViews: null, _isEmptyViewShown: null, _getItemViewsHtml: (function (collection) {
  _$jscoverage['public/views/collection.js'][156]++;
  var html = "", self = this, view;
  _$jscoverage['public/views/collection.js'][160]++;
  if ((! collection.length)) {
    _$jscoverage['public/views/collection.js'][161]++;
    if ((view = this._getEmptyViewInstance(collection))) {
      _$jscoverage['public/views/collection.js'][162]++;
      this._isEmptyViewShown[collection.cid] = true;
      _$jscoverage['public/views/collection.js'][163]++;
      return view.getHtml();
    }
    else {
      _$jscoverage['public/views/collection.js'][165]++;
      return html;
    }
  }
  _$jscoverage['public/views/collection.js'][169]++;
  this._removeEmptyView(collection);
  _$jscoverage['public/views/collection.js'][170]++;
  collection.each((function (model) {
  _$jscoverage['public/views/collection.js'][171]++;
  html += self._getItemViewInstance(model, collection).getHtml();
}));
  _$jscoverage['public/views/collection.js'][174]++;
  return html;
}), _getItemEmptyViewName: (function (type, collection) {
  _$jscoverage['public/views/collection.js'][191]++;
  var collectionName = this._getCollectionName(collection), viewName = ((collectionName && this.views && this.views[collectionName])? this.views[collectionName][type]: this[type]);
  _$jscoverage['public/views/collection.js'][195]++;
  return (_.isArray(viewName)? viewName[0]: viewName);
}), _getItemEmptyView: (function (type, collection) {
  _$jscoverage['public/views/collection.js'][200]++;
  var viewName = this._getItemEmptyViewName(type, collection);
  _$jscoverage['public/views/collection.js'][202]++;
  if (((! viewName) && (type === "emptyView"))) {
    _$jscoverage['public/views/collection.js'][203]++;
    return;
  }
  else {
    _$jscoverage['public/views/collection.js'][204]++;
    if ((! viewName)) {
      _$jscoverage['public/views/collection.js'][205]++;
      throw (type + " view not found.");
    }
  }
  _$jscoverage['public/views/collection.js'][208]++;
  return this.resolveView(viewName);
}), _getCollectionName: (function (collection) {
  _$jscoverage['public/views/collection.js'][213]++;
  var collections;
  _$jscoverage['public/views/collection.js'][214]++;
  if (this.collection) {
    _$jscoverage['public/views/collection.js'][215]++;
    if ((! _.isString(this.collection))) {
      _$jscoverage['public/views/collection.js'][216]++;
      return COLLECTION_SPECIFIER;
    }
    else {
      _$jscoverage['public/views/collection.js'][218]++;
      return;
    }
  }
  _$jscoverage['public/views/collection.js'][222]++;
  collections = this.ctl.ctx.collections;
  _$jscoverage['public/views/collection.js'][223]++;
  for (var key in collections) {
    _$jscoverage['public/views/collection.js'][224]++;
    if ((collections[key] === collection)) {
      _$jscoverage['public/views/collection.js'][225]++;
      return key;
    }
}
}), _getViewEl: (function (model) {
  _$jscoverage['public/views/collection.js'][232]++;
  return this.$(("[lazo-model-id=\"" + model.cid + "\"]"));
}), _addItemView: (function (model, collection) {
  _$jscoverage['public/views/collection.js'][237]++;
  var view = this._getItemViewInstance(model, collection);
  _$jscoverage['public/views/collection.js'][239]++;
  this._removeEmptyView(collection);
  _$jscoverage['public/views/collection.js'][240]++;
  view.render();
  _$jscoverage['public/views/collection.js'][241]++;
  view.afterRender();
  _$jscoverage['public/views/collection.js'][242]++;
  this.addItemView(view, this._getCollectionTarget(collection), collection);
  _$jscoverage['public/views/collection.js'][243]++;
  return this;
}), _removeItemView: (function (model, collection) {
  _$jscoverage['public/views/collection.js'][248]++;
  var view, self = this;
  _$jscoverage['public/views/collection.js'][251]++;
  if (this._itemViews[model.cid]) {
    _$jscoverage['public/views/collection.js'][252]++;
    this._itemViews[model.cid].once("remove", (function () {
  _$jscoverage['public/views/collection.js'][253]++;
  renderer.cleanupView(self._itemViews[model.cid]);
  _$jscoverage['public/views/collection.js'][254]++;
  (delete self._itemViews[model.cid]);
}));
    _$jscoverage['public/views/collection.js'][256]++;
    this.removeItemView(this._itemViews[model.cid], this._getCollectionTarget(collection), collection);
  }
  _$jscoverage['public/views/collection.js'][259]++;
  if ((! collection.length)) {
    _$jscoverage['public/views/collection.js'][260]++;
    if ((view = this._getEmptyViewInstance(collection))) {
      _$jscoverage['public/views/collection.js'][261]++;
      this._isEmptyViewShown[collection.cid] = true;
      _$jscoverage['public/views/collection.js'][262]++;
      view.render();
      _$jscoverage['public/views/collection.js'][263]++;
      this.addItemView(view, this._getCollectionTarget(collection), collection);
    }
  }
  _$jscoverage['public/views/collection.js'][266]++;
  return this;
}), _getCollectionTarget: (function (collection) {
  _$jscoverage['public/views/collection.js'][271]++;
  var name = this._getCollectionName(collection);
  _$jscoverage['public/views/collection.js'][272]++;
  return (name? $(("[" + this._targetAttr + "=\"" + name + "\"]")): this.$el);
}), _renderCollection: (function (collection) {
  _$jscoverage['public/views/collection.js'][277]++;
  var self = this, views = [], $target = self._getCollectionTarget(collection), view;
  _$jscoverage['public/views/collection.js'][283]++;
  $target.empty();
  _$jscoverage['public/views/collection.js'][285]++;
  if ((! collection.length)) {
    _$jscoverage['public/views/collection.js'][286]++;
    if ((view = this._getEmptyViewInstance(collection))) {
      _$jscoverage['public/views/collection.js'][287]++;
      this._isEmptyViewShown[collection.cid] = true;
      _$jscoverage['public/views/collection.js'][288]++;
      view.render();
      _$jscoverage['public/views/collection.js'][289]++;
      self.renderCollection([view], self._getCollectionTarget(collection), collection);
      _$jscoverage['public/views/collection.js'][290]++;
      return this;
    }
    else {
      _$jscoverage['public/views/collection.js'][292]++;
      self.renderCollection([], self._getCollectionTarget(collection), collection);
      _$jscoverage['public/views/collection.js'][293]++;
      return this;
    }
  }
  _$jscoverage['public/views/collection.js'][297]++;
  this._removeEmptyView(collection);
  _$jscoverage['public/views/collection.js'][298]++;
  collection.each((function (model) {
  _$jscoverage['public/views/collection.js'][299]++;
  view = self._getItemViewInstance(model, collection);
  _$jscoverage['public/views/collection.js'][300]++;
  view.render();
  _$jscoverage['public/views/collection.js'][301]++;
  views.push(view);
}));
  _$jscoverage['public/views/collection.js'][304]++;
  self.renderCollection(views, self._getCollectionTarget(collection));
  _$jscoverage['public/views/collection.js'][305]++;
  return this;
}), _removeEmptyView: (function (collection) {
  _$jscoverage['public/views/collection.js'][309]++;
  var view, self = this;
  _$jscoverage['public/views/collection.js'][312]++;
  if (this._isEmptyViewShown[collection.cid]) {
    _$jscoverage['public/views/collection.js'][313]++;
    view = this._emptyViews[collection.cid];
    _$jscoverage['public/views/collection.js'][314]++;
    this._isEmptyViewShown[collection.cid] = false;
    _$jscoverage['public/views/collection.js'][316]++;
    view.once("remove", (function () {
  _$jscoverage['public/views/collection.js'][317]++;
  renderer.cleanupView(view);
  _$jscoverage['public/views/collection.js'][318]++;
  (delete self._emptyViews[collection.cid]);
}));
    _$jscoverage['public/views/collection.js'][320]++;
    this.removeItemView(view, this._getCollectionTarget(collection), collection);
  }
  _$jscoverage['public/views/collection.js'][323]++;
  return this;
}), _listenToCollection: (function (collection) {
  _$jscoverage['public/views/collection.js'][327]++;
  this.listenTo(collection, "add", this._addItemView, this);
  _$jscoverage['public/views/collection.js'][328]++;
  this.listenTo(collection, "remove", this._removeItemView, this);
  _$jscoverage['public/views/collection.js'][329]++;
  this.listenTo(collection, "reset", this._renderCollection, this);
  _$jscoverage['public/views/collection.js'][331]++;
  return this;
}), _getCollection: (function (name) {
  _$jscoverage['public/views/collection.js'][335]++;
  return ((name === COLLECTION_SPECIFIER)? this.collection: this.ctl.ctx.collections[name]);
}), _getCollectionHtml: (function (html) {
  _$jscoverage['public/views/collection.js'][339]++;
  var collectionNames = this._findCollectionNames(html), self = this, collectionHtml = {};
  _$jscoverage['public/views/collection.js'][343]++;
  if (collectionNames.length) {
    _$jscoverage['public/views/collection.js'][344]++;
    _.each(collectionNames, (function (collectionName) {
  _$jscoverage['public/views/collection.js'][345]++;
  collectionHtml[collectionName] = self._getItemViewsHtml(self._getCollection(collectionName));
}));
    _$jscoverage['public/views/collection.js'][347]++;
    return this._insertCollectionHtml(collectionNames, collectionHtml, html);
  }
  else {
    _$jscoverage['public/views/collection.js'][348]++;
    if (this.collection) {
      _$jscoverage['public/views/collection.js'][349]++;
      return this._getItemViewsHtml(this.collection);
    }
    else {
      _$jscoverage['public/views/collection.js'][351]++;
      return html;
    }
  }
}), _insertCollectionHtml: (function (collectionNames, collectionHtml, htmlBuffer) {
  _$jscoverage['public/views/collection.js'][356]++;
  var match, htmlOpen, htmlClose, self = this;
  _$jscoverage['public/views/collection.js'][361]++;
  _.each(collectionNames, (function (collectionName) {
  _$jscoverage['public/views/collection.js'][362]++;
  match = renderer.getInsertIndex(self._targetAttr, collectionName, htmlBuffer);
  _$jscoverage['public/views/collection.js'][363]++;
  htmlOpen = htmlBuffer.substr(0, (match.index + match[0].length));
  _$jscoverage['public/views/collection.js'][364]++;
  htmlClose = htmlBuffer.substr((match.index + match[0].length));
  _$jscoverage['public/views/collection.js'][365]++;
  htmlBuffer = (htmlOpen + collectionHtml[collectionName] + htmlClose);
}));
  _$jscoverage['public/views/collection.js'][368]++;
  return htmlBuffer;
}), _findCollectionNames: (function (html) {
  _$jscoverage['public/views/collection.js'][372]++;
  var htmlSubstr = html, match = true, names = [], start = 0;
  _$jscoverage['public/views/collection.js'][377]++;
  while (match) {
    _$jscoverage['public/views/collection.js'][378]++;
    htmlSubstr = htmlSubstr.substr(start);
    _$jscoverage['public/views/collection.js'][379]++;
    match = htmlSubstr.match(/<[^>]*\s(?:lazo-collection-target=["']([^"']*)["'])[^>]*>/);
    _$jscoverage['public/views/collection.js'][380]++;
    if (match) {
      _$jscoverage['public/views/collection.js'][381]++;
      names.push(match[1]);
      _$jscoverage['public/views/collection.js'][382]++;
      start = (match[0].length + match.index);
    }
}
  _$jscoverage['public/views/collection.js'][386]++;
  return names;
}), _getEmptyViewInstance: (function (collection) {
  _$jscoverage['public/views/collection.js'][390]++;
  var view, View, self = this, name;
  _$jscoverage['public/views/collection.js'][395]++;
  if ((! (view = self._emptyViews[collection.cid]))) {
    _$jscoverage['public/views/collection.js'][396]++;
    if ((view = this._createItemEmptyView("emptyView", collection, {collection: collection}))) {
      _$jscoverage['public/views/collection.js'][397]++;
      self._emptyViews[collection.cid] = view;
    }
  }
  _$jscoverage['public/views/collection.js'][401]++;
  return view;
}), _getItemViewInstance: (function (model, collection, options) {
  _$jscoverage['public/views/collection.js'][405]++;
  var view, View, self = this, name;
  _$jscoverage['public/views/collection.js'][410]++;
  if ((! (view = self._itemViews[model.cid]))) {
    _$jscoverage['public/views/collection.js'][411]++;
    options = (options || {});
    _$jscoverage['public/views/collection.js'][412]++;
    view = (self._itemViews[model.cid] = this._createItemEmptyView("itemView", collection, _.extend({model: model}, options)));
  }
  _$jscoverage['public/views/collection.js'][415]++;
  return view;
}), _createItemEmptyView: (function (viewType, collection, options) {
  _$jscoverage['public/views/collection.js'][419]++;
  var self = this, name = this._getItemEmptyViewName(viewType, collection), View = ((viewType === "itemView")? self.getItemView(options.model, collection): self.getEmptyView(collection));
  _$jscoverage['public/views/collection.js'][425]++;
  if ((! View)) {
    _$jscoverage['public/views/collection.js'][426]++;
    return;
  }
  _$jscoverage['public/views/collection.js'][432]++;
  return new View(_.extend({ctl: self.ctl, collection: collection, name: name, ref: self.ctl._getPath(name, "view"), baseBath: self.ctl._getBasePath(name, "view"), render: (function () {
  _$jscoverage['public/views/collection.js'][439]++;
  if ((! _.isFunction(this.template))) {
    _$jscoverage['public/views/collection.js'][440]++;
    this.template = self._getItemEmptyViewTemplate(this);
  }
  _$jscoverage['public/views/collection.js'][442]++;
  this.$el.html(this.getInnerHtml());
  _$jscoverage['public/views/collection.js'][443]++;
  return this;
}), getInnerHtml: (function () {
  _$jscoverage['public/views/collection.js'][446]++;
  if ((! _.isFunction(this.template))) {
    _$jscoverage['public/views/collection.js'][447]++;
    this.template = self._getItemEmptyViewTemplate(this);
  }
  _$jscoverage['public/views/collection.js'][449]++;
  return View.prototype.getInnerHtml.call(this);
})}, options));
}), _getItemEmptyViewTemplate: (function (view) {
  _$jscoverage['public/views/collection.js'][455]++;
  var templateName = (_.result(view, "templateName") || view.name), template = this._itemEmptyViewTemplates[templateName];
  _$jscoverage['public/views/collection.js'][459]++;
  return (_.isObject(template)? template.template: this._templateEngine.compile(template));
}), _onRemove: (function () {
  _$jscoverage['public/views/collection.js'][463]++;
  var self = this;
  _$jscoverage['public/views/collection.js'][464]++;
  _.each(this._itemViews, (function (view, key) {
  _$jscoverage['public/views/collection.js'][465]++;
  renderer.cleanupView(view);
  _$jscoverage['public/views/collection.js'][466]++;
  (delete self._itemViews[key]);
}));
  _$jscoverage['public/views/collection.js'][469]++;
  _.each(this._emptyViews, (function (view, key) {
  _$jscoverage['public/views/collection.js'][470]++;
  renderer.cleanupView(view);
  _$jscoverage['public/views/collection.js'][471]++;
  (delete self._emptyViews[key]);
}));
  _$jscoverage['public/views/collection.js'][474]++;
  return this;
})});
  _$jscoverage['public/views/collection.js'][479]++;
  return LazoCollectionView;
}));
