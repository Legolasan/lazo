/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['public/controller.js']) {
  _$jscoverage['public/controller.js'] = [];
  _$jscoverage['public/controller.js'][1] = 0;
  _$jscoverage['public/controller.js'][33] = 0;
  _$jscoverage['public/controller.js'][35] = 0;
  _$jscoverage['public/controller.js'][38] = 0;
  _$jscoverage['public/controller.js'][39] = 0;
  _$jscoverage['public/controller.js'][42] = 0;
  _$jscoverage['public/controller.js'][43] = 0;
  _$jscoverage['public/controller.js'][46] = 0;
  _$jscoverage['public/controller.js'][47] = 0;
  _$jscoverage['public/controller.js'][48] = 0;
  _$jscoverage['public/controller.js'][54] = 0;
  _$jscoverage['public/controller.js'][58] = 0;
  _$jscoverage['public/controller.js'][62] = 0;
  _$jscoverage['public/controller.js'][63] = 0;
  _$jscoverage['public/controller.js'][65] = 0;
  _$jscoverage['public/controller.js'][66] = 0;
  _$jscoverage['public/controller.js'][69] = 0;
  _$jscoverage['public/controller.js'][70] = 0;
  _$jscoverage['public/controller.js'][72] = 0;
  _$jscoverage['public/controller.js'][75] = 0;
  _$jscoverage['public/controller.js'][77] = 0;
  _$jscoverage['public/controller.js'][80] = 0;
  _$jscoverage['public/controller.js'][86] = 0;
  _$jscoverage['public/controller.js'][87] = 0;
  _$jscoverage['public/controller.js'][90] = 0;
  _$jscoverage['public/controller.js'][91] = 0;
  _$jscoverage['public/controller.js'][95] = 0;
  _$jscoverage['public/controller.js'][99] = 0;
  _$jscoverage['public/controller.js'][103] = 0;
  _$jscoverage['public/controller.js'][107] = 0;
  _$jscoverage['public/controller.js'][111] = 0;
  _$jscoverage['public/controller.js'][115] = 0;
  _$jscoverage['public/controller.js'][119] = 0;
  _$jscoverage['public/controller.js'][120] = 0;
  _$jscoverage['public/controller.js'][124] = 0;
  _$jscoverage['public/controller.js'][128] = 0;
  _$jscoverage['public/controller.js'][132] = 0;
  _$jscoverage['public/controller.js'][136] = 0;
  _$jscoverage['public/controller.js'][137] = 0;
  _$jscoverage['public/controller.js'][141] = 0;
  _$jscoverage['public/controller.js'][145] = 0;
  _$jscoverage['public/controller.js'][146] = 0;
  _$jscoverage['public/controller.js'][151] = 0;
  _$jscoverage['public/controller.js'][155] = 0;
  _$jscoverage['public/controller.js'][156] = 0;
  _$jscoverage['public/controller.js'][157] = 0;
  _$jscoverage['public/controller.js'][159] = 0;
  _$jscoverage['public/controller.js'][165] = 0;
  _$jscoverage['public/controller.js'][166] = 0;
  _$jscoverage['public/controller.js'][172] = 0;
  _$jscoverage['public/controller.js'][177] = 0;
  _$jscoverage['public/controller.js'][180] = 0;
  _$jscoverage['public/controller.js'][181] = 0;
  _$jscoverage['public/controller.js'][183] = 0;
  _$jscoverage['public/controller.js'][184] = 0;
  _$jscoverage['public/controller.js'][185] = 0;
  _$jscoverage['public/controller.js'][186] = 0;
  _$jscoverage['public/controller.js'][187] = 0;
  _$jscoverage['public/controller.js'][191] = 0;
  _$jscoverage['public/controller.js'][192] = 0;
  _$jscoverage['public/controller.js'][193] = 0;
  _$jscoverage['public/controller.js'][194] = 0;
  _$jscoverage['public/controller.js'][195] = 0;
  _$jscoverage['public/controller.js'][196] = 0;
  _$jscoverage['public/controller.js'][200] = 0;
  _$jscoverage['public/controller.js'][201] = 0;
  _$jscoverage['public/controller.js'][202] = 0;
  _$jscoverage['public/controller.js'][203] = 0;
  _$jscoverage['public/controller.js'][204] = 0;
  _$jscoverage['public/controller.js'][208] = 0;
  _$jscoverage['public/controller.js'][209] = 0;
  _$jscoverage['public/controller.js'][212] = 0;
  _$jscoverage['public/controller.js'][213] = 0;
  _$jscoverage['public/controller.js'][214] = 0;
  _$jscoverage['public/controller.js'][216] = 0;
  _$jscoverage['public/controller.js'][217] = 0;
  _$jscoverage['public/controller.js'][220] = 0;
  _$jscoverage['public/controller.js'][221] = 0;
  _$jscoverage['public/controller.js'][225] = 0;
  _$jscoverage['public/controller.js'][226] = 0;
  _$jscoverage['public/controller.js'][228] = 0;
  _$jscoverage['public/controller.js'][234] = 0;
  _$jscoverage['public/controller.js'][235] = 0;
  _$jscoverage['public/controller.js'][236] = 0;
  _$jscoverage['public/controller.js'][238] = 0;
  _$jscoverage['public/controller.js'][243] = 0;
  _$jscoverage['public/controller.js'][247] = 0;
  _$jscoverage['public/controller.js'][252] = 0;
  _$jscoverage['public/controller.js'][253] = 0;
  _$jscoverage['public/controller.js'][259] = 0;
  _$jscoverage['public/controller.js'][260] = 0;
  _$jscoverage['public/controller.js'][262] = 0;
  _$jscoverage['public/controller.js'][263] = 0;
  _$jscoverage['public/controller.js'][264] = 0;
  _$jscoverage['public/controller.js'][269] = 0;
  _$jscoverage['public/controller.js'][272] = 0;
  _$jscoverage['public/controller.js'][273] = 0;
  _$jscoverage['public/controller.js'][274] = 0;
  _$jscoverage['public/controller.js'][276] = 0;
  _$jscoverage['public/controller.js'][277] = 0;
  _$jscoverage['public/controller.js'][278] = 0;
  _$jscoverage['public/controller.js'][280] = 0;
  _$jscoverage['public/controller.js'][281] = 0;
  _$jscoverage['public/controller.js'][288] = 0;
  _$jscoverage['public/controller.js'][289] = 0;
  _$jscoverage['public/controller.js'][296] = 0;
  _$jscoverage['public/controller.js'][297] = 0;
  _$jscoverage['public/controller.js'][303] = 0;
  _$jscoverage['public/controller.js'][305] = 0;
  _$jscoverage['public/controller.js'][307] = 0;
  _$jscoverage['public/controller.js'][308] = 0;
  _$jscoverage['public/controller.js'][309] = 0;
  _$jscoverage['public/controller.js'][310] = 0;
  _$jscoverage['public/controller.js'][311] = 0;
  _$jscoverage['public/controller.js'][314] = 0;
  _$jscoverage['public/controller.js'][315] = 0;
  _$jscoverage['public/controller.js'][316] = 0;
  _$jscoverage['public/controller.js'][317] = 0;
  _$jscoverage['public/controller.js'][318] = 0;
  _$jscoverage['public/controller.js'][323] = 0;
  _$jscoverage['public/controller.js'][324] = 0;
  _$jscoverage['public/controller.js'][326] = 0;
  _$jscoverage['public/controller.js'][327] = 0;
  _$jscoverage['public/controller.js'][329] = 0;
  _$jscoverage['public/controller.js'][332] = 0;
  _$jscoverage['public/controller.js'][338] = 0;
  _$jscoverage['public/controller.js'][339] = 0;
  _$jscoverage['public/controller.js'][342] = 0;
  _$jscoverage['public/controller.js'][343] = 0;
  _$jscoverage['public/controller.js'][347] = 0;
  _$jscoverage['public/controller.js'][348] = 0;
  _$jscoverage['public/controller.js'][351] = 0;
  _$jscoverage['public/controller.js'][352] = 0;
  _$jscoverage['public/controller.js'][353] = 0;
  _$jscoverage['public/controller.js'][356] = 0;
  _$jscoverage['public/controller.js'][361] = 0;
  _$jscoverage['public/controller.js'][367] = 0;
  _$jscoverage['public/controller.js'][368] = 0;
  _$jscoverage['public/controller.js'][371] = 0;
  _$jscoverage['public/controller.js'][372] = 0;
  _$jscoverage['public/controller.js'][373] = 0;
  _$jscoverage['public/controller.js'][374] = 0;
  _$jscoverage['public/controller.js'][375] = 0;
  _$jscoverage['public/controller.js'][376] = 0;
  _$jscoverage['public/controller.js'][377] = 0;
  _$jscoverage['public/controller.js'][380] = 0;
  _$jscoverage['public/controller.js'][381] = 0;
  _$jscoverage['public/controller.js'][382] = 0;
  _$jscoverage['public/controller.js'][383] = 0;
  _$jscoverage['public/controller.js'][384] = 0;
  _$jscoverage['public/controller.js'][385] = 0;
  _$jscoverage['public/controller.js'][386] = 0;
  _$jscoverage['public/controller.js'][387] = 0;
  _$jscoverage['public/controller.js'][389] = 0;
  _$jscoverage['public/controller.js'][390] = 0;
  _$jscoverage['public/controller.js'][394] = 0;
  _$jscoverage['public/controller.js'][395] = 0;
  _$jscoverage['public/controller.js'][397] = 0;
  _$jscoverage['public/controller.js'][398] = 0;
  _$jscoverage['public/controller.js'][399] = 0;
  _$jscoverage['public/controller.js'][401] = 0;
  _$jscoverage['public/controller.js'][402] = 0;
  _$jscoverage['public/controller.js'][406] = 0;
  _$jscoverage['public/controller.js'][414] = 0;
  _$jscoverage['public/controller.js'][418] = 0;
  _$jscoverage['public/controller.js'][422] = 0;
  _$jscoverage['public/controller.js'][429] = 0;
  _$jscoverage['public/controller.js'][431] = 0;
  _$jscoverage['public/controller.js'][432] = 0;
  _$jscoverage['public/controller.js'][433] = 0;
  _$jscoverage['public/controller.js'][434] = 0;
  _$jscoverage['public/controller.js'][437] = 0;
  _$jscoverage['public/controller.js'][438] = 0;
  _$jscoverage['public/controller.js'][439] = 0;
  _$jscoverage['public/controller.js'][441] = 0;
  _$jscoverage['public/controller.js'][444] = 0;
  _$jscoverage['public/controller.js'][445] = 0;
  _$jscoverage['public/controller.js'][448] = 0;
  _$jscoverage['public/controller.js'][449] = 0;
  _$jscoverage['public/controller.js'][451] = 0;
  _$jscoverage['public/controller.js'][456] = 0;
  _$jscoverage['public/controller.js'][457] = 0;
  _$jscoverage['public/controller.js'][458] = 0;
  _$jscoverage['public/controller.js'][460] = 0;
  _$jscoverage['public/controller.js'][465] = 0;
  _$jscoverage['public/controller.js'][466] = 0;
  _$jscoverage['public/controller.js'][467] = 0;
  _$jscoverage['public/controller.js'][469] = 0;
  _$jscoverage['public/controller.js'][475] = 0;
  _$jscoverage['public/controller.js'][480] = 0;
}
_$jscoverage['public/controller.js'].source = ["define([","    'underscore',","    'backbone',","    'base',","    'resolver/main',","    'utils/module',","    'lazoCollectionView',","    'lazoView',","    'utils/ctlSerializor',","    'l!jitc/main',","    'context',","    'async',","    'l!ctlNav',","    'utils/template',","    'jquery',","    'l!jquerycookie'],","    function (","        _,","        Backbone,","        Base,","        resolver,","        module,","        LazoCollectionView,","        LazoBaseView,","        serializor,","        jitc,","        Context,","        async,","        ctlNav,","        template,","        $) {","","    'use strict';","","    var Controller = Base.extend(_.extend({","","        constructor: function (options) {","            if (!options) {","                throw new TypeError('The options parameter is mandatory.'); // TODO: error handling","            }","","            if (!options.name || typeof options.name !== 'string') {","                throw new TypeError('The options.name parameter is mandatory.'); // TODO: error handling","            }","","            this.cid = _.uniqueId(options.name);","            this.ctx = options.ctx;","            this.name = options.name;","        },","","        orderedCss: [],","","        addChild: function (container, cmpName, options) {","            module.addChild(container, cmpName, this, options);","        },","","        index: function (options) {","            return options.success('index');","        },","","        navigate: function (action, options) {","            var self = this;","            options = options || {};","","            if (LAZO.isClient) { // TODO: add in options for callbacks","                return ctlNav(this, this.name, action, _.extend(this.ctx.params, options.params), LAZO.app._getCrumb(), options);","            }","","            options = _.defaults(options || {}, { error: function () {","                return;","            }, success: function () {","                return;","            }});","","            this._execute(action, {","                error: function (err) {","                    return options.error(err);","                },","                success: function () {","                    return options.success();","                }","            });","        },","","        transition: function (prevCtx, view, options) { // TODO: add hook points for animation","            if (LAZO.app.isClient &amp;&amp; this.currentView) {","                renderer.cleanup(this, this.currentView.cid);","            }","","            this.currentView = view;","            options.success(this);","        },","","        setCookie: function (name, value, options) {","            this.ctx.setCookie(name, value, options);","        },","","        clearCookie: function (name) {","            this.ctx.clearCookie(name);","        },","","        loadModel: function (modelName, options) {","            LAZO.app.loadModel(modelName, _.extend(options, { ctx: this.ctx }));","        },","","        loadCollection: function (collectionName, options) {","            LAZO.app.loadCollection(collectionName, _.extend(options, { ctx: this.ctx }));","        },","","        createModel: function (modelName, attributes, options) {","            LAZO.app.createModel(modelName, attributes, _.extend(options, { ctx: this.ctx }));","        },","","        createCollection: function (collectionName, attributes, options) {","            LAZO.app.createCollection(collectionName, attributes, _.extend(options, { ctx: this.ctx }));","        },","","        setSharedData: function (key, val) {","            this.ctx.setSharedData(key, val);","            return this;","        },","","        getSharedData: function (key) {","            return this.ctx.getSharedData(key);","        },","","        toJSON: function (rootCtx) {","            return serializor.serialize(this, rootCtx);","        },","","        serialize: function () {","            return JSON.stringify(this.toJSON());","        },","","        setPageTitle: function (title) {","            this.ctx._rootCtx.pageTitle = title;","            return this;","        },","","        getPageTitle: function (title) {","            return this.ctx._rootCtx.pageTitle;","        },","","        _getEl: function () {","            if (LAZO.app.isClient) {","                return $('[lazo-cmp-id=' + this.cid + ']');","            }","        },","","        _execute: function (action, options) {","            var tasks = this._buildExecTaskList(action),","                self = this,","                ctx = {}; // TODO: replace underscore with lodash _.clone(this.ctx, true); // create a deep copy of the current context","","            async.waterfall(tasks, function (err, view) {","                if (err) {","                    options.error(err);","                } else {","                    self.transition(ctx, view, options);","                }","            });","        },","","        _createView: function (View, options) {","            try {","                return new View(_.extend({","                    ref: resolver.getPath(options.name, this.name, 'view'),","                    basePath: resolver.getBasePath(options.name, this.name, 'view'),","                    ctl: this","                }, options));","            } catch (e) {","                throw e;","            }","        },","","        _buildExecTaskList: function (action) {","            var tasks = [],","                self = this;","","            tasks.push(function (callback) {","                callback(null, action);","            });","            tasks.push(_.bind(this._action, this));","            tasks.push(_.bind(this._getCss, this));","            tasks.push(_.bind(this._getView, this));","            tasks.push(_.bind(this._resolveTemplateEngine, this));","            return this.ctx.isXHR ? this._buildXHRExecTaskList(tasks) : this._buildStandardExecTaskList(tasks);","        },","","        _buildXHRExecTaskList: function (tasks) {","            tasks.push(_.bind(this._getTemplate, this));","            tasks.push(_.bind(this._addTemplatePathToCtx, this));","            tasks.push(_.bind(this._getItemEmptyViews, this));","            tasks.push(_.bind(this._getViewWidgets, this));","            tasks.push(_.bind(this._addItemEmptyTemplatePath, this));","            return tasks;","        },","","        _buildStandardExecTaskList: function (tasks) {","            tasks.push(_.bind(this._getTemplate, this));","            tasks.push(_.bind(this._getItemEmptyViews, this));","            tasks.push(_.bind(this._getViewWidgets, this));","            tasks.push(_.bind(this._getItemEmptyTemplates, this));","            return tasks;","        },","","        _action: function (action, callback) {","            if (typeof this[action] !== 'function') {","                return callback(new Error('The given action is not implemented.'));","            }","","            try {","                var actionCalled = false;","                this[action]({","                    error: function (err) {","                        actionCalled = true;","                        return callback(err, null);","                    },","                    success: function (viewName) {","                        actionCalled = true;","                        return callback(null, viewName);","                    }","                });","            } catch (error) {","                if (!actionCalled) {","                    callback(error);","                } else { // What can we do?  THe error was in the callback, so let's not call that again!","                    throw error;","                }","            }","        },","","        _getViewWidgets: function (view, callback) {","            module.addViewWidgets(view, this.ctx, function (err) {","                if (err) { // TODO: error handling","                    return callback(err, null);","                }","                callback(null, view);","            });","        },","","        _getCss: function (viewName, callback) {","            var self = this,","                rootCtx = this.ctx._rootCtx,","                orderedCss = _.isArray(this.orderedCss) ? this.orderedCss : [];","","            resolver.list('components/' + self.name + '/client', {","                    ext: '.css',","                    basePath: LAZO.FILE_REPO_PATH","                },","                function (err, cssFiles) {","                if (!rootCtx.dependencies) {","                    rootCtx.dependencies = {","                        css: []","                    };","                }","","                // makes paths absolute for browser","                cssFiles = cssFiles.map(function (cssFile) {","                    return '/' + cssFile;","                });","                self.ctx.css = orderedCss.concat(cssFiles);","                rootCtx.dependencies.css = _.union(orderedCss.concat(rootCtx.dependencies.css), cssFiles);","                callback(err, viewName);","            });","        },","","        _getView: function (viewName, callback) {","            var self = this,","                path = resolver.getPath(viewName, this.name, 'view');","","            resolver.isBase(path, 'view', function (isBase) {","                if (isBase) {","                    return callback(null, self._createView(LazoBaseView, { name: viewName, isBase: true }));","                } else {","                    module.getView(path, function (err, View) {","                        if (err) {","                            return callback(new Error('Controller _getView failed for ' + path + ' : ' + err.message), null);","                        }","                        module.addPath(path, self.ctx);","                        return callback(null, self._createView(View, { name: viewName, isBase: false }));","                    });","                }","            });","        },","","        _resolveTemplateEngine: function (view, callback) {","            var engineName = view.templateEngine;","            template.loadTemplateEngine({","                name: engineName,","                handler: template.engHandlerMaker(engineName),","                exp: null,","                extension: template.getDefaultExt(engineName)","            }, {","                success: function (engine) {","                    view._templateEngine = engine;","                    callback(null, view);","                }","            });","        },","","       _getTemplate: function (view, callback) {","            var self = this,","                convertedTemplatePath;","            view.templatePath = resolver.getTemplatePath(view);","","            module.getTemplate(view.templatePath, function (err, template) {","                if (err) {","                    view.template = view._templateEngine.compile('', view.templatePath);","                    view.hasTemplate = false;","                    return callback(null, view);","                }","","                try {","                    view.hasTemplate = true;","                    module.addPath('text!' + view.templatePath, self.ctx); // TODO: remove once template precompilation works","                    convertedTemplatePath = resolver.convertTemplatePath(view.templatePath);","                    jitc.writeTemplate(convertedTemplatePath,","                        (template || ''),","                        view.templateEngine,","                        LAZO.FILE_REPO_DIR + '/tmp',","                        function (err) {","                            if (err) { // TODO: error handling","                                throw err;","                            }","                            view.template = jitc.compileTemplate(template, view._templateEngine);","                            view.compiledTemplatePath = convertedTemplatePath;","                            // module.addPath('tmp/' + convertedTemplatePath, self.ctx); TODO: precompiling","                            return callback(err, view);","                    });","                } catch (e) {","                    return callback(e, view);","                }","            });","        },","","        _addTemplatePathToCtx: function (view, callback) {","            if (view instanceof LazoCollectionView) {","                return this._getTemplate(view, callback);","            }","","            module.addPath('text!' + resolver.getTemplatePath(view), this.ctx);","            callback(null, view);","        },","","        _getItemEmptyViews: function (view, callback) {","            if (!(view instanceof LazoCollectionView)) {","                return callback(null, view);","            }","","            module.addItemEmptyViews(view, function (err) {","                if (err) {","                    return callback(err, view);","                }","","                return callback(null, view);","            });","        },","","        _getItemEmptyTemplates: function (view, callback) {","            var self = this,","                views,","                i,","                templatesToBeCompiled,","                templatesCompiled;","","            if (!(view instanceof LazoCollectionView) || !view._itemEmptyViewConstructors) {","                return callback(null, view);","            }","","            views = view.getItemEmptyViews();","            i = views.length;","            templatesToBeCompiled = i;","            templatesCompiled = 0;","            module.addItemEmptyTemplates(view, function (err) {","                if (err) {","                    return callback(err, view);","                }","","                while (i) {","                    i--;","                    (function (i) {","                        var convertedTemplatePath;","                        try {","                            views[i].hasTemplate = views[i].template.length ? true : false;","                            if (views[i].hasTemplate) {","                                module.addPath('text!' + view.templatePath, self.ctx); // TODO: remove once template precompilation works","                            }","                            convertedTemplatePath = resolver.convertTemplatePath(views[i].templatePath);","                            jitc.writeTemplate(convertedTemplatePath, views[i].template,","                                views[i].templateEngine,","                                LAZO.FILE_REPO_DIR + '/tmp', // target dir","                                function (err) {","                                    if (err) { // TODO: error handling","                                        throw err;","                                    }","                                    templatesCompiled++;","                                    views[i].template = jitc.compileTemplate(views[i].template, views[i]._templateEngine);","                                    views[i].compiledTemplatePath = convertedTemplatePath;","                                    // module.addPath('tmp/' + convertedTemplatePath, self.ctx); TODO: precompiling","                                    if (templatesToBeCompiled === templatesCompiled) {","                                        return callback(err, view);","                                    }","                            });","                        } catch (e) {","                            return callback(e, view);","                        }","                    })(i);","                }","            });","        },","","        _addItemEmptyTemplatePath: function (view, callback) {","            module.addItemEmptyTemplatesPaths(view, this.ctx, callback);","        },","","        _getPath: function (moduleName, moduleType) { // used by collection view","            return resolver.getPath(moduleName, this.name, moduleType);","        },","","        _getBasePath: function (moduleName, moduleType) { // used by collection view","            return resolver.getBasePath(moduleName, this.name, moduleType);","        }","","    }, Backbone.Events),","    {","","        create: function (cmpName, ctlOptions, options) {","            var ctlPath = 'components/' + cmpName + '/controller';","","            function loadBase() {","                var instance = new Controller(ctlOptions);","                instance.isBase = true;","                return options.success(instance);","            }","","            function loadCtl() {","                LAZO.require([ctlPath], function (Ctl) {","                    var instance = new Ctl(ctlOptions);","","                    module.addPath(ctlPath, ctlOptions.ctx);","                    // Initialize default params, but only if context is set (otherwise we are deserializing,","                    // so the context will be set later with the params already set.","                    if (ctlOptions.ctx &amp;&amp; instance.config &amp;&amp; instance.config.params) {","                        _.defaults(instance.ctx.params, instance.config.params);","                    }","","                    instance.isBase = false;","                    return options.success(instance);","                }, function (err) {","                    return options.error(new Error('Controller create LAZO.require failed for ' + ctlPath + ' : ' + err.message));","                });","            }","","            // client rehydration","            if (_.isBoolean(ctlOptions.isBase)) {","                if (ctlOptions.isBase) {","                    return loadBase();","                } else {","                    return loadCtl();","                }","            }","","            // server","            resolver.isBase(ctlPath, 'controller', function (isBase) {","                if (isBase) {","                    loadBase();","                } else {","                    loadCtl();","                }","            });","        },","","        deserialize: function (ctl, options) { // TODO: implement","            return serializor.deserialize(ctl, _.extend({}, options, { Controller: Controller }));","        }","","    });","","    return Controller;","});"];
_$jscoverage['public/controller.js'][1]++;
define(["underscore", "backbone", "base", "resolver/main", "utils/module", "lazoCollectionView", "lazoView", "utils/ctlSerializor", "l!jitc/main", "context", "async", "l!ctlNav", "utils/template", "jquery", "l!jquerycookie"], (function (_, Backbone, Base, resolver, module, LazoCollectionView, LazoBaseView, serializor, jitc, Context, async, ctlNav, template, $) {
  _$jscoverage['public/controller.js'][33]++;
  "use strict";
  _$jscoverage['public/controller.js'][35]++;
  var Controller = Base.extend(_.extend({constructor: (function (options) {
  _$jscoverage['public/controller.js'][38]++;
  if ((! options)) {
    _$jscoverage['public/controller.js'][39]++;
    throw new TypeError("The options parameter is mandatory.");
  }
  _$jscoverage['public/controller.js'][42]++;
  if (((! options.name) || ((typeof options.name) !== "string"))) {
    _$jscoverage['public/controller.js'][43]++;
    throw new TypeError("The options.name parameter is mandatory.");
  }
  _$jscoverage['public/controller.js'][46]++;
  this.cid = _.uniqueId(options.name);
  _$jscoverage['public/controller.js'][47]++;
  this.ctx = options.ctx;
  _$jscoverage['public/controller.js'][48]++;
  this.name = options.name;
}), orderedCss: [], addChild: (function (container, cmpName, options) {
  _$jscoverage['public/controller.js'][54]++;
  module.addChild(container, cmpName, this, options);
}), index: (function (options) {
  _$jscoverage['public/controller.js'][58]++;
  return options.success("index");
}), navigate: (function (action, options) {
  _$jscoverage['public/controller.js'][62]++;
  var self = this;
  _$jscoverage['public/controller.js'][63]++;
  options = (options || {});
  _$jscoverage['public/controller.js'][65]++;
  if (LAZO.isClient) {
    _$jscoverage['public/controller.js'][66]++;
    return ctlNav(this, this.name, action, _.extend(this.ctx.params, options.params), LAZO.app._getCrumb(), options);
  }
  _$jscoverage['public/controller.js'][69]++;
  options = _.defaults((options || {}), {error: (function () {
  _$jscoverage['public/controller.js'][70]++;
  return;
}), success: (function () {
  _$jscoverage['public/controller.js'][72]++;
  return;
})});
  _$jscoverage['public/controller.js'][75]++;
  this._execute(action, {error: (function (err) {
  _$jscoverage['public/controller.js'][77]++;
  return options.error(err);
}), success: (function () {
  _$jscoverage['public/controller.js'][80]++;
  return options.success();
})});
}), transition: (function (prevCtx, view, options) {
  _$jscoverage['public/controller.js'][86]++;
  if ((LAZO.app.isClient && this.currentView)) {
    _$jscoverage['public/controller.js'][87]++;
    renderer.cleanup(this, this.currentView.cid);
  }
  _$jscoverage['public/controller.js'][90]++;
  this.currentView = view;
  _$jscoverage['public/controller.js'][91]++;
  options.success(this);
}), setCookie: (function (name, value, options) {
  _$jscoverage['public/controller.js'][95]++;
  this.ctx.setCookie(name, value, options);
}), clearCookie: (function (name) {
  _$jscoverage['public/controller.js'][99]++;
  this.ctx.clearCookie(name);
}), loadModel: (function (modelName, options) {
  _$jscoverage['public/controller.js'][103]++;
  LAZO.app.loadModel(modelName, _.extend(options, {ctx: this.ctx}));
}), loadCollection: (function (collectionName, options) {
  _$jscoverage['public/controller.js'][107]++;
  LAZO.app.loadCollection(collectionName, _.extend(options, {ctx: this.ctx}));
}), createModel: (function (modelName, attributes, options) {
  _$jscoverage['public/controller.js'][111]++;
  LAZO.app.createModel(modelName, attributes, _.extend(options, {ctx: this.ctx}));
}), createCollection: (function (collectionName, attributes, options) {
  _$jscoverage['public/controller.js'][115]++;
  LAZO.app.createCollection(collectionName, attributes, _.extend(options, {ctx: this.ctx}));
}), setSharedData: (function (key, val) {
  _$jscoverage['public/controller.js'][119]++;
  this.ctx.setSharedData(key, val);
  _$jscoverage['public/controller.js'][120]++;
  return this;
}), getSharedData: (function (key) {
  _$jscoverage['public/controller.js'][124]++;
  return this.ctx.getSharedData(key);
}), toJSON: (function (rootCtx) {
  _$jscoverage['public/controller.js'][128]++;
  return serializor.serialize(this, rootCtx);
}), serialize: (function () {
  _$jscoverage['public/controller.js'][132]++;
  return JSON.stringify(this.toJSON());
}), setPageTitle: (function (title) {
  _$jscoverage['public/controller.js'][136]++;
  this.ctx._rootCtx.pageTitle = title;
  _$jscoverage['public/controller.js'][137]++;
  return this;
}), getPageTitle: (function (title) {
  _$jscoverage['public/controller.js'][141]++;
  return this.ctx._rootCtx.pageTitle;
}), _getEl: (function () {
  _$jscoverage['public/controller.js'][145]++;
  if (LAZO.app.isClient) {
    _$jscoverage['public/controller.js'][146]++;
    return $(("[lazo-cmp-id=" + this.cid + "]"));
  }
}), _execute: (function (action, options) {
  _$jscoverage['public/controller.js'][151]++;
  var tasks = this._buildExecTaskList(action), self = this, ctx = {};
  _$jscoverage['public/controller.js'][155]++;
  async.waterfall(tasks, (function (err, view) {
  _$jscoverage['public/controller.js'][156]++;
  if (err) {
    _$jscoverage['public/controller.js'][157]++;
    options.error(err);
  }
  else {
    _$jscoverage['public/controller.js'][159]++;
    self.transition(ctx, view, options);
  }
}));
}), _createView: (function (View, options) {
  _$jscoverage['public/controller.js'][165]++;
  try {
    _$jscoverage['public/controller.js'][166]++;
    return new View(_.extend({ref: resolver.getPath(options.name, this.name, "view"), basePath: resolver.getBasePath(options.name, this.name, "view"), ctl: this}, options));
  }
  catch (e) {
    _$jscoverage['public/controller.js'][172]++;
    throw e;
  }
}), _buildExecTaskList: (function (action) {
  _$jscoverage['public/controller.js'][177]++;
  var tasks = [], self = this;
  _$jscoverage['public/controller.js'][180]++;
  tasks.push((function (callback) {
  _$jscoverage['public/controller.js'][181]++;
  callback(null, action);
}));
  _$jscoverage['public/controller.js'][183]++;
  tasks.push(_.bind(this._action, this));
  _$jscoverage['public/controller.js'][184]++;
  tasks.push(_.bind(this._getCss, this));
  _$jscoverage['public/controller.js'][185]++;
  tasks.push(_.bind(this._getView, this));
  _$jscoverage['public/controller.js'][186]++;
  tasks.push(_.bind(this._resolveTemplateEngine, this));
  _$jscoverage['public/controller.js'][187]++;
  return (this.ctx.isXHR? this._buildXHRExecTaskList(tasks): this._buildStandardExecTaskList(tasks));
}), _buildXHRExecTaskList: (function (tasks) {
  _$jscoverage['public/controller.js'][191]++;
  tasks.push(_.bind(this._getTemplate, this));
  _$jscoverage['public/controller.js'][192]++;
  tasks.push(_.bind(this._addTemplatePathToCtx, this));
  _$jscoverage['public/controller.js'][193]++;
  tasks.push(_.bind(this._getItemEmptyViews, this));
  _$jscoverage['public/controller.js'][194]++;
  tasks.push(_.bind(this._getViewWidgets, this));
  _$jscoverage['public/controller.js'][195]++;
  tasks.push(_.bind(this._addItemEmptyTemplatePath, this));
  _$jscoverage['public/controller.js'][196]++;
  return tasks;
}), _buildStandardExecTaskList: (function (tasks) {
  _$jscoverage['public/controller.js'][200]++;
  tasks.push(_.bind(this._getTemplate, this));
  _$jscoverage['public/controller.js'][201]++;
  tasks.push(_.bind(this._getItemEmptyViews, this));
  _$jscoverage['public/controller.js'][202]++;
  tasks.push(_.bind(this._getViewWidgets, this));
  _$jscoverage['public/controller.js'][203]++;
  tasks.push(_.bind(this._getItemEmptyTemplates, this));
  _$jscoverage['public/controller.js'][204]++;
  return tasks;
}), _action: (function (action, callback) {
  _$jscoverage['public/controller.js'][208]++;
  if (((typeof this[action]) !== "function")) {
    _$jscoverage['public/controller.js'][209]++;
    return callback(new Error("The given action is not implemented."));
  }
  _$jscoverage['public/controller.js'][212]++;
  try {
    _$jscoverage['public/controller.js'][213]++;
    var actionCalled = false;
    _$jscoverage['public/controller.js'][214]++;
    (this[action])({error: (function (err) {
  _$jscoverage['public/controller.js'][216]++;
  actionCalled = true;
  _$jscoverage['public/controller.js'][217]++;
  return callback(err, null);
}), success: (function (viewName) {
  _$jscoverage['public/controller.js'][220]++;
  actionCalled = true;
  _$jscoverage['public/controller.js'][221]++;
  return callback(null, viewName);
})});
  }
  catch (error) {
    _$jscoverage['public/controller.js'][225]++;
    if ((! actionCalled)) {
      _$jscoverage['public/controller.js'][226]++;
      callback(error);
    }
    else {
      _$jscoverage['public/controller.js'][228]++;
      throw error;
    }
  }
}), _getViewWidgets: (function (view, callback) {
  _$jscoverage['public/controller.js'][234]++;
  module.addViewWidgets(view, this.ctx, (function (err) {
  _$jscoverage['public/controller.js'][235]++;
  if (err) {
    _$jscoverage['public/controller.js'][236]++;
    return callback(err, null);
  }
  _$jscoverage['public/controller.js'][238]++;
  callback(null, view);
}));
}), _getCss: (function (viewName, callback) {
  _$jscoverage['public/controller.js'][243]++;
  var self = this, rootCtx = this.ctx._rootCtx, orderedCss = (_.isArray(this.orderedCss)? this.orderedCss: []);
  _$jscoverage['public/controller.js'][247]++;
  resolver.list(("components/" + self.name + "/client"), {ext: ".css", basePath: LAZO.FILE_REPO_PATH}, (function (err, cssFiles) {
  _$jscoverage['public/controller.js'][252]++;
  if ((! rootCtx.dependencies)) {
    _$jscoverage['public/controller.js'][253]++;
    rootCtx.dependencies = {css: []};
  }
  _$jscoverage['public/controller.js'][259]++;
  cssFiles = cssFiles.map((function (cssFile) {
  _$jscoverage['public/controller.js'][260]++;
  return ("/" + cssFile);
}));
  _$jscoverage['public/controller.js'][262]++;
  self.ctx.css = orderedCss.concat(cssFiles);
  _$jscoverage['public/controller.js'][263]++;
  rootCtx.dependencies.css = _.union(orderedCss.concat(rootCtx.dependencies.css), cssFiles);
  _$jscoverage['public/controller.js'][264]++;
  callback(err, viewName);
}));
}), _getView: (function (viewName, callback) {
  _$jscoverage['public/controller.js'][269]++;
  var self = this, path = resolver.getPath(viewName, this.name, "view");
  _$jscoverage['public/controller.js'][272]++;
  resolver.isBase(path, "view", (function (isBase) {
  _$jscoverage['public/controller.js'][273]++;
  if (isBase) {
    _$jscoverage['public/controller.js'][274]++;
    return callback(null, self._createView(LazoBaseView, {name: viewName, isBase: true}));
  }
  else {
    _$jscoverage['public/controller.js'][276]++;
    module.getView(path, (function (err, View) {
  _$jscoverage['public/controller.js'][277]++;
  if (err) {
    _$jscoverage['public/controller.js'][278]++;
    return callback(new Error(("Controller _getView failed for " + path + " : " + err.message)), null);
  }
  _$jscoverage['public/controller.js'][280]++;
  module.addPath(path, self.ctx);
  _$jscoverage['public/controller.js'][281]++;
  return callback(null, self._createView(View, {name: viewName, isBase: false}));
}));
  }
}));
}), _resolveTemplateEngine: (function (view, callback) {
  _$jscoverage['public/controller.js'][288]++;
  var engineName = view.templateEngine;
  _$jscoverage['public/controller.js'][289]++;
  template.loadTemplateEngine({name: engineName, handler: template.engHandlerMaker(engineName), exp: null, extension: template.getDefaultExt(engineName)}, {success: (function (engine) {
  _$jscoverage['public/controller.js'][296]++;
  view._templateEngine = engine;
  _$jscoverage['public/controller.js'][297]++;
  callback(null, view);
})});
}), _getTemplate: (function (view, callback) {
  _$jscoverage['public/controller.js'][303]++;
  var self = this, convertedTemplatePath;
  _$jscoverage['public/controller.js'][305]++;
  view.templatePath = resolver.getTemplatePath(view);
  _$jscoverage['public/controller.js'][307]++;
  module.getTemplate(view.templatePath, (function (err, template) {
  _$jscoverage['public/controller.js'][308]++;
  if (err) {
    _$jscoverage['public/controller.js'][309]++;
    view.template = view._templateEngine.compile("", view.templatePath);
    _$jscoverage['public/controller.js'][310]++;
    view.hasTemplate = false;
    _$jscoverage['public/controller.js'][311]++;
    return callback(null, view);
  }
  _$jscoverage['public/controller.js'][314]++;
  try {
    _$jscoverage['public/controller.js'][315]++;
    view.hasTemplate = true;
    _$jscoverage['public/controller.js'][316]++;
    module.addPath(("text!" + view.templatePath), self.ctx);
    _$jscoverage['public/controller.js'][317]++;
    convertedTemplatePath = resolver.convertTemplatePath(view.templatePath);
    _$jscoverage['public/controller.js'][318]++;
    jitc.writeTemplate(convertedTemplatePath, (template || ""), view.templateEngine, (LAZO.FILE_REPO_DIR + "/tmp"), (function (err) {
  _$jscoverage['public/controller.js'][323]++;
  if (err) {
    _$jscoverage['public/controller.js'][324]++;
    throw err;
  }
  _$jscoverage['public/controller.js'][326]++;
  view.template = jitc.compileTemplate(template, view._templateEngine);
  _$jscoverage['public/controller.js'][327]++;
  view.compiledTemplatePath = convertedTemplatePath;
  _$jscoverage['public/controller.js'][329]++;
  return callback(err, view);
}));
  }
  catch (e) {
    _$jscoverage['public/controller.js'][332]++;
    return callback(e, view);
  }
}));
}), _addTemplatePathToCtx: (function (view, callback) {
  _$jscoverage['public/controller.js'][338]++;
  if ((view instanceof LazoCollectionView)) {
    _$jscoverage['public/controller.js'][339]++;
    return this._getTemplate(view, callback);
  }
  _$jscoverage['public/controller.js'][342]++;
  module.addPath(("text!" + resolver.getTemplatePath(view)), this.ctx);
  _$jscoverage['public/controller.js'][343]++;
  callback(null, view);
}), _getItemEmptyViews: (function (view, callback) {
  _$jscoverage['public/controller.js'][347]++;
  if ((! (view instanceof LazoCollectionView))) {
    _$jscoverage['public/controller.js'][348]++;
    return callback(null, view);
  }
  _$jscoverage['public/controller.js'][351]++;
  module.addItemEmptyViews(view, (function (err) {
  _$jscoverage['public/controller.js'][352]++;
  if (err) {
    _$jscoverage['public/controller.js'][353]++;
    return callback(err, view);
  }
  _$jscoverage['public/controller.js'][356]++;
  return callback(null, view);
}));
}), _getItemEmptyTemplates: (function (view, callback) {
  _$jscoverage['public/controller.js'][361]++;
  var self = this, views, i, templatesToBeCompiled, templatesCompiled;
  _$jscoverage['public/controller.js'][367]++;
  if (((! (view instanceof LazoCollectionView)) || (! view._itemEmptyViewConstructors))) {
    _$jscoverage['public/controller.js'][368]++;
    return callback(null, view);
  }
  _$jscoverage['public/controller.js'][371]++;
  views = view.getItemEmptyViews();
  _$jscoverage['public/controller.js'][372]++;
  i = views.length;
  _$jscoverage['public/controller.js'][373]++;
  templatesToBeCompiled = i;
  _$jscoverage['public/controller.js'][374]++;
  templatesCompiled = 0;
  _$jscoverage['public/controller.js'][375]++;
  module.addItemEmptyTemplates(view, (function (err) {
  _$jscoverage['public/controller.js'][376]++;
  if (err) {
    _$jscoverage['public/controller.js'][377]++;
    return callback(err, view);
  }
  _$jscoverage['public/controller.js'][380]++;
  while (i) {
    _$jscoverage['public/controller.js'][381]++;
    (i--);
    _$jscoverage['public/controller.js'][382]++;
    (function (i) {
  _$jscoverage['public/controller.js'][383]++;
  var convertedTemplatePath;
  _$jscoverage['public/controller.js'][384]++;
  try {
    _$jscoverage['public/controller.js'][385]++;
    views[i].hasTemplate = (views[i].template.length? true: false);
    _$jscoverage['public/controller.js'][386]++;
    if (views[i].hasTemplate) {
      _$jscoverage['public/controller.js'][387]++;
      module.addPath(("text!" + view.templatePath), self.ctx);
    }
    _$jscoverage['public/controller.js'][389]++;
    convertedTemplatePath = resolver.convertTemplatePath(views[i].templatePath);
    _$jscoverage['public/controller.js'][390]++;
    jitc.writeTemplate(convertedTemplatePath, views[i].template, views[i].templateEngine, (LAZO.FILE_REPO_DIR + "/tmp"), (function (err) {
  _$jscoverage['public/controller.js'][394]++;
  if (err) {
    _$jscoverage['public/controller.js'][395]++;
    throw err;
  }
  _$jscoverage['public/controller.js'][397]++;
  (templatesCompiled++);
  _$jscoverage['public/controller.js'][398]++;
  views[i].template = jitc.compileTemplate(views[i].template, views[i]._templateEngine);
  _$jscoverage['public/controller.js'][399]++;
  views[i].compiledTemplatePath = convertedTemplatePath;
  _$jscoverage['public/controller.js'][401]++;
  if ((templatesToBeCompiled === templatesCompiled)) {
    _$jscoverage['public/controller.js'][402]++;
    return callback(err, view);
  }
}));
  }
  catch (e) {
    _$jscoverage['public/controller.js'][406]++;
    return callback(e, view);
  }
})(i);
}
}));
}), _addItemEmptyTemplatePath: (function (view, callback) {
  _$jscoverage['public/controller.js'][414]++;
  module.addItemEmptyTemplatesPaths(view, this.ctx, callback);
}), _getPath: (function (moduleName, moduleType) {
  _$jscoverage['public/controller.js'][418]++;
  return resolver.getPath(moduleName, this.name, moduleType);
}), _getBasePath: (function (moduleName, moduleType) {
  _$jscoverage['public/controller.js'][422]++;
  return resolver.getBasePath(moduleName, this.name, moduleType);
})}, Backbone.Events), {create: (function (cmpName, ctlOptions, options) {
  _$jscoverage['public/controller.js'][429]++;
  var ctlPath = ("components/" + cmpName + "/controller");
  _$jscoverage['public/controller.js'][431]++;
  function loadBase() {
    _$jscoverage['public/controller.js'][432]++;
    var instance = new Controller(ctlOptions);
    _$jscoverage['public/controller.js'][433]++;
    instance.isBase = true;
    _$jscoverage['public/controller.js'][434]++;
    return options.success(instance);
}
  _$jscoverage['public/controller.js'][437]++;
  function loadCtl() {
    _$jscoverage['public/controller.js'][438]++;
    LAZO.require([ctlPath], (function (Ctl) {
  _$jscoverage['public/controller.js'][439]++;
  var instance = new Ctl(ctlOptions);
  _$jscoverage['public/controller.js'][441]++;
  module.addPath(ctlPath, ctlOptions.ctx);
  _$jscoverage['public/controller.js'][444]++;
  if ((ctlOptions.ctx && instance.config && instance.config.params)) {
    _$jscoverage['public/controller.js'][445]++;
    _.defaults(instance.ctx.params, instance.config.params);
  }
  _$jscoverage['public/controller.js'][448]++;
  instance.isBase = false;
  _$jscoverage['public/controller.js'][449]++;
  return options.success(instance);
}), (function (err) {
  _$jscoverage['public/controller.js'][451]++;
  return options.error(new Error(("Controller create LAZO.require failed for " + ctlPath + " : " + err.message)));
}));
}
  _$jscoverage['public/controller.js'][456]++;
  if (_.isBoolean(ctlOptions.isBase)) {
    _$jscoverage['public/controller.js'][457]++;
    if (ctlOptions.isBase) {
      _$jscoverage['public/controller.js'][458]++;
      return loadBase();
    }
    else {
      _$jscoverage['public/controller.js'][460]++;
      return loadCtl();
    }
  }
  _$jscoverage['public/controller.js'][465]++;
  resolver.isBase(ctlPath, "controller", (function (isBase) {
  _$jscoverage['public/controller.js'][466]++;
  if (isBase) {
    _$jscoverage['public/controller.js'][467]++;
    loadBase();
  }
  else {
    _$jscoverage['public/controller.js'][469]++;
    loadCtl();
  }
}));
}), deserialize: (function (ctl, options) {
  _$jscoverage['public/controller.js'][475]++;
  return serializor.deserialize(ctl, _.extend({}, options, {Controller: Controller}));
})});
  _$jscoverage['public/controller.js'][480]++;
  return Controller;
}));
