/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['public/server/syncher.js']) {
  _$jscoverage['public/server/syncher.js'] = [];
  _$jscoverage['public/server/syncher.js'][1] = 0;
  _$jscoverage['public/server/syncher.js'][16] = 0;
  _$jscoverage['public/server/syncher.js'][34] = 0;
  _$jscoverage['public/server/syncher.js'][47] = 0;
  _$jscoverage['public/server/syncher.js'][60] = 0;
  _$jscoverage['public/server/syncher.js'][72] = 0;
  _$jscoverage['public/server/syncher.js'][76] = 0;
}
_$jscoverage['public/server/syncher.js'].source = ["define(['base'], function (Base) {","","    /**","     * By extending the Syncher class developers are able write code that can directly","     * interact with any data store.  All methods on the Syncher are expected to be asynchronous.","     *","     * If a Syncher exists it will be used by the framework to back a Backbone model or collection.","     * Essentially becoming the sync for the model or collection.","     *","     * If you need to connect to a standard REST endpoint consider using {{#crossLink \"LazoModel\"}}{{/crossLink}}","     * or {{#crossLink \"LazoCollection\"}}{{/crossLink}}.","     *","     * @class Syncher","     * @constructor","     */","    var Syncher = Base.extend({","","        /**","         * Handle to service proxy which can be used to fetch data from services. See {{#crossLink \"ServiceProxy\"}}{{/crossLink}}","         *","         * @property proxy","         * @type ServiceProxy","         */","","        /**","         * The fetch method will be called when the LAZO.app's or LazoController's loadModel or loadCollection method is executed.","         * @method fetch","         * @param {Object} options The options specified in a call to loadModel or loadCollection","         *      @param {Function} options.success Callback function to be called when fetch succeeds, passed &lt;code&gt;(response)&lt;/code&gt; as argument.","         *      @param {Function} options.error Callback function to be called when fetch fails, passed &lt;code&gt;(response)&lt;/code&gt; as argument.","         * @return must call the success or error callback passing the response","         */","        fetch: function(options) {","            throw new Error('fetch method not implemented provided');","        },","","        /**","         * The add method will be called when the LAZO.app's or LazoController's create method is executed.","         * @method add","         * @param {Object} attributes A hash of the model's state that will be the attributes a new model","         * @param {Object} options  The options specified in a call to a model's save method","         *      @param {Function} options.success Callback function to be called when add succeeds, passed &lt;code&gt;(response)&lt;/code&gt; as argument.","         *      @param {Function} options.error Callback function to be called when add fails, passed &lt;code&gt;(response)&lt;/code&gt; as argument.","         * @return must call the success or error callback passing the response","         */","        add: function(attributes, options) {","            throw new Error('add method not implemented provided');","        },","","        /**","         * The update method will be called when the LazoModel's save method is executed.","         * @method update","         * @param {Object} attributes A hash of the model's state that will update the attributes of a model","         * @param {Object} options  The options specified in a call to a model's save method","         *      @param {Function} options.success Callback function to be called when update succeeds, passed &lt;code&gt;(response)&lt;/code&gt; as argument.","         *      @param {Function} options.error Callback function to be called when update fails, passed &lt;code&gt;(response)&lt;/code&gt; as argument.","         * @return must call the success or error callback passing the response","         */","        update: function(attributes, options) {","            throw new Error('update method not implemented provided');","        },","","        /**","         * The destroy method will be called when the LazoModel's destroy method is executed.","         * @method destroy","         * @param {Object} options  The options specified in a call to a model's destroy method","         *      @param {Function} options.success Callback function to be called when destroy succeeds, passed &lt;code&gt;(response)&lt;/code&gt; as argument.","         *      @param {Function} options.error Callback function to be called when destroy fails, passed &lt;code&gt;(response)&lt;/code&gt; as argument.","         * @return must call the success or error callback passing the response","         */","        destroy: function(options) {","            throw new Error('destroy method not implemented provided');","        }","    });","","    return Syncher;","});"];
_$jscoverage['public/server/syncher.js'][1]++;
define(["base"], (function (Base) {
  _$jscoverage['public/server/syncher.js'][16]++;
  var Syncher = Base.extend({fetch: (function (options) {
  _$jscoverage['public/server/syncher.js'][34]++;
  throw new Error("fetch method not implemented provided");
}), add: (function (attributes, options) {
  _$jscoverage['public/server/syncher.js'][47]++;
  throw new Error("add method not implemented provided");
}), update: (function (attributes, options) {
  _$jscoverage['public/server/syncher.js'][60]++;
  throw new Error("update method not implemented provided");
}), destroy: (function (options) {
  _$jscoverage['public/server/syncher.js'][72]++;
  throw new Error("destroy method not implemented provided");
})});
  _$jscoverage['public/server/syncher.js'][76]++;
  return Syncher;
}));
