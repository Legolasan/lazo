/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['public/server/bundle.js']) {
  _$jscoverage['public/server/bundle.js'] = [];
  _$jscoverage['public/server/bundle.js'][1] = 0;
  _$jscoverage['public/server/bundle.js'][4] = 0;
  _$jscoverage['public/server/bundle.js'][6] = 0;
  _$jscoverage['public/server/bundle.js'][8] = 0;
  _$jscoverage['public/server/bundle.js'][9] = 0;
  _$jscoverage['public/server/bundle.js'][10] = 0;
  _$jscoverage['public/server/bundle.js'][11] = 0;
  _$jscoverage['public/server/bundle.js'][15] = 0;
  _$jscoverage['public/server/bundle.js'][16] = 0;
  _$jscoverage['public/server/bundle.js'][17] = 0;
  _$jscoverage['public/server/bundle.js'][21] = 0;
  _$jscoverage['public/server/bundle.js'][32] = 0;
  _$jscoverage['public/server/bundle.js'][35] = 0;
  _$jscoverage['public/server/bundle.js'][38] = 0;
  _$jscoverage['public/server/bundle.js'][40] = 0;
  _$jscoverage['public/server/bundle.js'][41] = 0;
  _$jscoverage['public/server/bundle.js'][42] = 0;
  _$jscoverage['public/server/bundle.js'][43] = 0;
  _$jscoverage['public/server/bundle.js'][45] = 0;
  _$jscoverage['public/server/bundle.js'][46] = 0;
  _$jscoverage['public/server/bundle.js'][49] = 0;
  _$jscoverage['public/server/bundle.js'][50] = 0;
  _$jscoverage['public/server/bundle.js'][51] = 0;
  _$jscoverage['public/server/bundle.js'][59] = 0;
  _$jscoverage['public/server/bundle.js'][63] = 0;
  _$jscoverage['public/server/bundle.js'][67] = 0;
  _$jscoverage['public/server/bundle.js'][71] = 0;
  _$jscoverage['public/server/bundle.js'][75] = 0;
  _$jscoverage['public/server/bundle.js'][76] = 0;
  _$jscoverage['public/server/bundle.js'][77] = 0;
  _$jscoverage['public/server/bundle.js'][81] = 0;
  _$jscoverage['public/server/bundle.js'][85] = 0;
  _$jscoverage['public/server/bundle.js'][86] = 0;
  _$jscoverage['public/server/bundle.js'][87] = 0;
  _$jscoverage['public/server/bundle.js'][90] = 0;
  _$jscoverage['public/server/bundle.js'][94] = 0;
  _$jscoverage['public/server/bundle.js'][98] = 0;
  _$jscoverage['public/server/bundle.js'][100] = 0;
  _$jscoverage['public/server/bundle.js'][101] = 0;
  _$jscoverage['public/server/bundle.js'][102] = 0;
  _$jscoverage['public/server/bundle.js'][104] = 0;
  _$jscoverage['public/server/bundle.js'][109] = 0;
  _$jscoverage['public/server/bundle.js'][111] = 0;
  _$jscoverage['public/server/bundle.js'][119] = 0;
  _$jscoverage['public/server/bundle.js'][120] = 0;
  _$jscoverage['public/server/bundle.js'][123] = 0;
  _$jscoverage['public/server/bundle.js'][128] = 0;
  _$jscoverage['public/server/bundle.js'][131] = 0;
  _$jscoverage['public/server/bundle.js'][132] = 0;
  _$jscoverage['public/server/bundle.js'][135] = 0;
  _$jscoverage['public/server/bundle.js'][136] = 0;
  _$jscoverage['public/server/bundle.js'][137] = 0;
  _$jscoverage['public/server/bundle.js'][138] = 0;
  _$jscoverage['public/server/bundle.js'][140] = 0;
  _$jscoverage['public/server/bundle.js'][145] = 0;
  _$jscoverage['public/server/bundle.js'][147] = 0;
  _$jscoverage['public/server/bundle.js'][148] = 0;
  _$jscoverage['public/server/bundle.js'][151] = 0;
  _$jscoverage['public/server/bundle.js'][160] = 0;
  _$jscoverage['public/server/bundle.js'][161] = 0;
  _$jscoverage['public/server/bundle.js'][164] = 0;
}
_$jscoverage['public/server/bundle.js'].source = ["define(['async', 'underscore', 'base', 'jitc/main'],","    function (async, _, Base, jitc) {","","    'use strict';","","    var path = require('path');","","    function exclude(files) {","        return files.filter(function (file) {","            var match = /^(?:(ht|f)tp(s?)\\:\\/\\/)?/.exec(file);","            return !match[0];","        });","    }","","    function clean(files) {","        return files.map(function (file) {","            return file.indexOf('l!') === 0 ? file.substring(2) : file;","        });","    }","","    return Base.extend({","","        outBasePath: LAZO.FILE_REPO_PATH,","","        minifier: 'uglify',","","        out: 'bundles',","","        _jitc: jitc,","","        create: function (uri, modules, callback) {","            var self = this,","                tasks = {};","","            this.cmpJsFiles = exclude(clean(this._uniq(this._flattenModuleList(modules.components, 'js'), modules.exclude))),","            this.cmpCssFiles = exclude(clean(this._flattenModuleList(modules.components, 'css'))),","            this.appJsFiles = exclude(clean(modules.app.js));","            this.appCssFiles = exclude(clean(modules.app.css));","","            tasks.cmpJs = _.bind(this._createRequestJsBundle, this);","            tasks.cmpCss = _.bind(this._createRequestCssBundle, this);","            tasks.appJs = _.bind(this._createAppJsBundle, this);","            tasks.appCss = _.bind(this._createAppCssBundle, this);","","            async.parallel(tasks, function (err, modules) {","                var js = [],","                    css = [];","","                js = js.concat(modules.appJs, modules.cmpJs);","                css = css.concat(modules.appCss, modules.cmpCss);","                callback({","                    js: js,","                    css: css","                });","            });","        },","","        resolveBundleUrl: function (bundle) {","            return bundle;","        },","","        getLazoPath: function () {","            return LAZO.FILE_REPO_PATH;","        },","","        getAppPath: function () {","            return LAZO.FILE_REPO_PATH;","        },","","        getLibPath: function () {","            return '/lib/optimized/lib.js';","        },","","        getConfig: function (files, baseUrl, out) {","            var conf = this._jitc.configureJsBundler(files || [], baseUrl, out);","            conf.optimize = this._getOptimize();","            return conf;","        },","","        _getOptimize: function() {","            return this.minifier;","        },","","        _flattenModuleList: function (list, type) {","            var modules = [];","            for (var key in list) {","                modules = modules.concat(list[key][type]);","            }","","            return modules;","        },","","        _uniq: function (modules, exclude) {","            return _.difference(_.uniq(modules), exclude).sort();","        },","","        _createRequestJsBundle: function (callback, modules) {","            var self = this;","","            this._jitc.bundleJs(this.getConfig(this.cmpJsFiles, this.outBasePath, this.out), function (err, jsBundle) {","                if (err) {","                    callback(err, null);","                }","                callback(null, [self.resolveBundleUrl('/' + jsBundle + '.js')]);","            });","        },","","        _createRequestCssBundle: function (callback, modules) {","            var self = this;","","            this._jitc.bundleCss({","                compiler: 'css',","                outDirBasePath: this.outBasePath,","                outDir: this.out,","                crypto: 'md5',","                files: this.cmpCssFiles,","                basePath: LAZO.FILE_REPO_PATH","            }, function (err, cssBundle) {","                if (err) {","                    callback(err, null);","                }","","                callback(null, self.resolveBundleUrl(cssBundle));","            });","        },","","        _createAppJsBundle: function (callback, modules) {","            var self = this,","                bundleConf = this.getConfig(this.appJsFiles, this.outBasePath, this.out);","","            if (!this.appJsFiles.length) {","                return callback(null, []);","            }","","            bundleConf.outFileName = 'app';","            this._jitc.bundleJs(bundleConf, function (err, jsBundle) {","                if (err) {","                    return callback(err, null);","                }","                callback(null, [self.resolveBundleUrl('/' + jsBundle + '.js')]);","            });","        },","","        _createAppCssBundle: function (callback, modules) {","            var self = this;","","            if (!this.appCssFiles.length) {","                return callback(null, []);","            }","","            this._jitc.bundleCss({","                compiler: 'css',","                outDirBasePath: this.outBasePath,","                outDir: this.out,","                crypto: 'md5',","                files: this.appCssFiles,","                outFileName: 'app',","                basePath: LAZO.FILE_REPO_PATH","            }, function (err, cssBundle) {","                if (err) {","                    return callback(err, null);","                }","","                callback(null, self.resolveBundleUrl(cssBundle));","            });","        }","","    });","","});"];
_$jscoverage['public/server/bundle.js'][1]++;
define(["async", "underscore", "base", "jitc/main"], (function (async, _, Base, jitc) {
  _$jscoverage['public/server/bundle.js'][4]++;
  "use strict";
  _$jscoverage['public/server/bundle.js'][6]++;
  var path = require("path");
  _$jscoverage['public/server/bundle.js'][8]++;
  function exclude(files) {
    _$jscoverage['public/server/bundle.js'][9]++;
    return files.filter((function (file) {
  _$jscoverage['public/server/bundle.js'][10]++;
  var match = /^(?:(ht|f)tp(s?)\:\/\/)?/.exec(file);
  _$jscoverage['public/server/bundle.js'][11]++;
  return (! match[0]);
}));
}
  _$jscoverage['public/server/bundle.js'][15]++;
  function clean(files) {
    _$jscoverage['public/server/bundle.js'][16]++;
    return files.map((function (file) {
  _$jscoverage['public/server/bundle.js'][17]++;
  return ((file.indexOf("l!") === 0)? file.substring(2): file);
}));
}
  _$jscoverage['public/server/bundle.js'][21]++;
  return Base.extend({outBasePath: LAZO.FILE_REPO_PATH, minifier: "uglify", out: "bundles", _jitc: jitc, create: (function (uri, modules, callback) {
  _$jscoverage['public/server/bundle.js'][32]++;
  var self = this, tasks = {};
  _$jscoverage['public/server/bundle.js'][35]++;
  ((this.cmpJsFiles = exclude(clean(this._uniq(this._flattenModuleList(modules.components, "js"), modules.exclude)))), (this.cmpCssFiles = exclude(clean(this._flattenModuleList(modules.components, "css")))), (this.appJsFiles = exclude(clean(modules.app.js))));
  _$jscoverage['public/server/bundle.js'][38]++;
  this.appCssFiles = exclude(clean(modules.app.css));
  _$jscoverage['public/server/bundle.js'][40]++;
  tasks.cmpJs = _.bind(this._createRequestJsBundle, this);
  _$jscoverage['public/server/bundle.js'][41]++;
  tasks.cmpCss = _.bind(this._createRequestCssBundle, this);
  _$jscoverage['public/server/bundle.js'][42]++;
  tasks.appJs = _.bind(this._createAppJsBundle, this);
  _$jscoverage['public/server/bundle.js'][43]++;
  tasks.appCss = _.bind(this._createAppCssBundle, this);
  _$jscoverage['public/server/bundle.js'][45]++;
  async.parallel(tasks, (function (err, modules) {
  _$jscoverage['public/server/bundle.js'][46]++;
  var js = [], css = [];
  _$jscoverage['public/server/bundle.js'][49]++;
  js = js.concat(modules.appJs, modules.cmpJs);
  _$jscoverage['public/server/bundle.js'][50]++;
  css = css.concat(modules.appCss, modules.cmpCss);
  _$jscoverage['public/server/bundle.js'][51]++;
  callback({js: js, css: css});
}));
}), resolveBundleUrl: (function (bundle) {
  _$jscoverage['public/server/bundle.js'][59]++;
  return bundle;
}), getLazoPath: (function () {
  _$jscoverage['public/server/bundle.js'][63]++;
  return LAZO.FILE_REPO_PATH;
}), getAppPath: (function () {
  _$jscoverage['public/server/bundle.js'][67]++;
  return LAZO.FILE_REPO_PATH;
}), getLibPath: (function () {
  _$jscoverage['public/server/bundle.js'][71]++;
  return "/lib/optimized/lib.js";
}), getConfig: (function (files, baseUrl, out) {
  _$jscoverage['public/server/bundle.js'][75]++;
  var conf = this._jitc.configureJsBundler((files || []), baseUrl, out);
  _$jscoverage['public/server/bundle.js'][76]++;
  conf.optimize = this._getOptimize();
  _$jscoverage['public/server/bundle.js'][77]++;
  return conf;
}), _getOptimize: (function () {
  _$jscoverage['public/server/bundle.js'][81]++;
  return this.minifier;
}), _flattenModuleList: (function (list, type) {
  _$jscoverage['public/server/bundle.js'][85]++;
  var modules = [];
  _$jscoverage['public/server/bundle.js'][86]++;
  for (var key in list) {
    _$jscoverage['public/server/bundle.js'][87]++;
    modules = modules.concat(list[key][type]);
}
  _$jscoverage['public/server/bundle.js'][90]++;
  return modules;
}), _uniq: (function (modules, exclude) {
  _$jscoverage['public/server/bundle.js'][94]++;
  return _.difference(_.uniq(modules), exclude).sort();
}), _createRequestJsBundle: (function (callback, modules) {
  _$jscoverage['public/server/bundle.js'][98]++;
  var self = this;
  _$jscoverage['public/server/bundle.js'][100]++;
  this._jitc.bundleJs(this.getConfig(this.cmpJsFiles, this.outBasePath, this.out), (function (err, jsBundle) {
  _$jscoverage['public/server/bundle.js'][101]++;
  if (err) {
    _$jscoverage['public/server/bundle.js'][102]++;
    callback(err, null);
  }
  _$jscoverage['public/server/bundle.js'][104]++;
  callback(null, [self.resolveBundleUrl(("/" + jsBundle + ".js"))]);
}));
}), _createRequestCssBundle: (function (callback, modules) {
  _$jscoverage['public/server/bundle.js'][109]++;
  var self = this;
  _$jscoverage['public/server/bundle.js'][111]++;
  this._jitc.bundleCss({compiler: "css", outDirBasePath: this.outBasePath, outDir: this.out, crypto: "md5", files: this.cmpCssFiles, basePath: LAZO.FILE_REPO_PATH}, (function (err, cssBundle) {
  _$jscoverage['public/server/bundle.js'][119]++;
  if (err) {
    _$jscoverage['public/server/bundle.js'][120]++;
    callback(err, null);
  }
  _$jscoverage['public/server/bundle.js'][123]++;
  callback(null, self.resolveBundleUrl(cssBundle));
}));
}), _createAppJsBundle: (function (callback, modules) {
  _$jscoverage['public/server/bundle.js'][128]++;
  var self = this, bundleConf = this.getConfig(this.appJsFiles, this.outBasePath, this.out);
  _$jscoverage['public/server/bundle.js'][131]++;
  if ((! this.appJsFiles.length)) {
    _$jscoverage['public/server/bundle.js'][132]++;
    return callback(null, []);
  }
  _$jscoverage['public/server/bundle.js'][135]++;
  bundleConf.outFileName = "app";
  _$jscoverage['public/server/bundle.js'][136]++;
  this._jitc.bundleJs(bundleConf, (function (err, jsBundle) {
  _$jscoverage['public/server/bundle.js'][137]++;
  if (err) {
    _$jscoverage['public/server/bundle.js'][138]++;
    return callback(err, null);
  }
  _$jscoverage['public/server/bundle.js'][140]++;
  callback(null, [self.resolveBundleUrl(("/" + jsBundle + ".js"))]);
}));
}), _createAppCssBundle: (function (callback, modules) {
  _$jscoverage['public/server/bundle.js'][145]++;
  var self = this;
  _$jscoverage['public/server/bundle.js'][147]++;
  if ((! this.appCssFiles.length)) {
    _$jscoverage['public/server/bundle.js'][148]++;
    return callback(null, []);
  }
  _$jscoverage['public/server/bundle.js'][151]++;
  this._jitc.bundleCss({compiler: "css", outDirBasePath: this.outBasePath, outDir: this.out, crypto: "md5", files: this.appCssFiles, outFileName: "app", basePath: LAZO.FILE_REPO_PATH}, (function (err, cssBundle) {
  _$jscoverage['public/server/bundle.js'][160]++;
  if (err) {
    _$jscoverage['public/server/bundle.js'][161]++;
    return callback(err, null);
  }
  _$jscoverage['public/server/bundle.js'][164]++;
  callback(null, self.resolveBundleUrl(cssBundle));
}));
})});
}));
