/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['common/config.js']) {
  _$jscoverage['common/config.js'] = [];
  _$jscoverage['common/config.js'][9] = 0;
  _$jscoverage['common/config.js'][11] = 0;
  _$jscoverage['common/config.js'][13] = 0;
  _$jscoverage['common/config.js'][14] = 0;
  _$jscoverage['common/config.js'][15] = 0;
  _$jscoverage['common/config.js'][17] = 0;
  _$jscoverage['common/config.js'][18] = 0;
  _$jscoverage['common/config.js'][26] = 0;
  _$jscoverage['common/config.js'][55] = 0;
  _$jscoverage['common/config.js'][56] = 0;
  _$jscoverage['common/config.js'][57] = 0;
  _$jscoverage['common/config.js'][58] = 0;
  _$jscoverage['common/config.js'][59] = 0;
  _$jscoverage['common/config.js'][60] = 0;
  _$jscoverage['common/config.js'][63] = 0;
  _$jscoverage['common/config.js'][68] = 0;
  _$jscoverage['common/config.js'][69] = 0;
  _$jscoverage['common/config.js'][70] = 0;
  _$jscoverage['common/config.js'][71] = 0;
  _$jscoverage['common/config.js'][72] = 0;
  _$jscoverage['common/config.js'][73] = 0;
  _$jscoverage['common/config.js'][74] = 0;
  _$jscoverage['common/config.js'][76] = 0;
  _$jscoverage['common/config.js'][77] = 0;
  _$jscoverage['common/config.js'][79] = 0;
  _$jscoverage['common/config.js'][80] = 0;
  _$jscoverage['common/config.js'][82] = 0;
  _$jscoverage['common/config.js'][83] = 0;
  _$jscoverage['common/config.js'][87] = 0;
  _$jscoverage['common/config.js'][88] = 0;
  _$jscoverage['common/config.js'][89] = 0;
  _$jscoverage['common/config.js'][91] = 0;
  _$jscoverage['common/config.js'][100] = 0;
  _$jscoverage['common/config.js'][110] = 0;
  _$jscoverage['common/config.js'][116] = 0;
  _$jscoverage['common/config.js'][124] = 0;
  _$jscoverage['common/config.js'][125] = 0;
  _$jscoverage['common/config.js'][126] = 0;
  _$jscoverage['common/config.js'][127] = 0;
  _$jscoverage['common/config.js'][128] = 0;
  _$jscoverage['common/config.js'][131] = 0;
  _$jscoverage['common/config.js'][132] = 0;
  _$jscoverage['common/config.js'][134] = 0;
  _$jscoverage['common/config.js'][145] = 0;
  _$jscoverage['common/config.js'][147] = 0;
  _$jscoverage['common/config.js'][159] = 0;
  _$jscoverage['common/config.js'][161] = 0;
  _$jscoverage['common/config.js'][162] = 0;
  _$jscoverage['common/config.js'][163] = 0;
  _$jscoverage['common/config.js'][164] = 0;
  _$jscoverage['common/config.js'][165] = 0;
  _$jscoverage['common/config.js'][168] = 0;
  _$jscoverage['common/config.js'][169] = 0;
  _$jscoverage['common/config.js'][176] = 0;
  _$jscoverage['common/config.js'][177] = 0;
  _$jscoverage['common/config.js'][179] = 0;
  _$jscoverage['common/config.js'][182] = 0;
  _$jscoverage['common/config.js'][187] = 0;
}
_$jscoverage['common/config.js'].source = ["/**"," Configuration Provider",""," By default, returns environment variables.  Use plugins to support other configuration sources.",""," @submodule config"," **/","","define(['base', 'async'], function (Base, async) {","","    var configs = [];","","    function isJsonString(str) {","        if (!str || 0 === str.trim().length) {","            return false;","        }","        str = str.replace(/\\\\./g, '@').replace(/\"[^\"\\\\\\n\\r]*\"/g, '');","        return (/^[,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]*$/).test(str);","    }","","    /**","     * Main configuration class for returning configuration values.","     * @class Config","     * @type {Object}","     */","    var Config = {","","        // Configuration keys","        ENV: 'ENV',","        BASE_PATH:  'BASE_PATH',","        BASE_REPO_DIR:  'BASE_REPO_DIR',","        FILE_REPO_DIR:  'FILE_REPO_DIR',","        LAZO_PORT:  'LAZO_PORT',","        MODEL_TIMEOUT:  'MODEL_TIMEOUT',","        MODEL_MOCK:  'MODEL_MOCK',","        CACHE:  'CACHE',","        LAZO_VERSION: 'LAZO_VERSION',","","        /**","         Returns the configuration associated with the key.","","         @method get","         @param {String} key The key to lookup","         * @param {Object} options","         * &lt;ul&gt;","         *     &lt;li&gt;{String} defaultVal Default value if key not found&lt;/li&gt;","         *     &lt;li&gt;{Function} success Callback function for successful call, passed &lt;code&gt;value&lt;/code&gt; as argument&lt;/li&gt;","         *     &lt;li&gt;{Function} error Callback function for failed call, passed &lt;code&gt;(err)&lt;/code&gt; as argument&lt;/li&gt;","         * &lt;/ul&gt;","         @return {String} if options.success is implemented, it will return null. Otherwise it will return the value if found.","         **/","        get: function (key, options) {","","            // if no options success callback only do sync calls for backward compatibility","            if(!options || typeof options.success !== 'function'){","                for(var i=0;i&lt;configs.length;i++){","                    var config = configs[i];","                    var val = config.get(key);","                    if(typeof(val) !== 'undefined' &amp;&amp; val !== null){","                        return val;","                    }","                }","                return (options &amp;&amp; typeof options === 'object') ? options.defaultVal : options;","            }","","            // else attempt async","","            var fns = [];","            for(var i=0;i&lt;configs.length;i++){","                var config = configs[i];","                fns.push(function(p1, p2){","                    var val, callback;","                    if(typeof p1 === 'function'){","                        callback = p1;","                    }else{","                        val = p1;","                        callback = p2;","                    }","                    if(typeof(val) !== 'undefined' &amp;&amp; val !== null){","                        return callback(null, val);","                    }","                    config.get(key, {success:function(value){","                        return callback(null, value);","                    }});","                })","            }","            async.waterfall(fns, function (err, result) {","                if(err &amp;&amp; options &amp;&amp; typeof options.error === 'function'){","                    options.error(err);","                }","                return options.success(result);","            });","        },","","        /**","         * Adds a config plugin","         * @param plugin Instance of Config.Plugin","         */","        addPlugin: function(plugin){","            configs.push(plugin);","        }","","    };","","    /**","     * Base configuration plugin.","     * @class Config.Plugin","     * @type {*|Object|Object}","     */","    Config.Plugin = Base.extend({","        /**","         * Constructor","         * @param options","         */","        constructor: function(options){","            this.data = {};","        },","        /**","         * Gets the value for a key","         * @param key","         * @return {*}","         */","        get: function(key, options){","            var ret;","            if(this.data &amp;&amp; key in this.data){","                ret = this.data[key];","                try{","                    ret = JSON.parse(ret);","                }catch(e){} // ignore JSON parse errors since we only want to parse it if it is JSON","            }","            if(options &amp;&amp; typeof options.success === 'function'){","                options.success(ret);","            }","            return ret;","        }","    });","","    /**","     * Static configuration data plugin. Pass in a hash as options.data.","     * &lt;p&gt;Example: var cfg = new Config.HashPlugin({data:{key:\"value\"}});","     * @type {*|Object|Object}","     * @class Config.HashPlugin","     * @extends Config.Plugin","     */","    Config.HashPlugin = Config.Plugin.extend({","        constructor: function(options){","            this.data = options.data;","        }","    });","","    /**","     * JSON configuration file plugin. Pass in file as options.file. It will be loaded by requirejs","     * &lt;p&gt;Example: var cfg = new Config.JSONPlugin({file:\"app/appProperties.json\"});","     * @type {*|Object|Object}","     * @class Config.JSONPlugin","     * @extends Config.Plugin","","     */","    Config.JSONPlugin = Config.Plugin.extend({","        constructor: function(options){","            var self = this;","            LAZO.require(['text!' + options.file], function (text) {","                self.data = JSON.parse(text);","                if(typeof options.success === 'function'){","                    options.success();","                }","            }, function(err){","                if(typeof options.error === 'function'){","                    options.error(err);","                }","            });","        }","    });","","    // for server side node.js, initialize with plugin that reads values from process.env","    if(typeof process !== 'undefined' &amp;&amp; process.env){","        var envCfg = Config.Plugin.extend({","            constructor: function(options){","                this.data = process.env;","            }","        });","        Config.addPlugin(new envCfg());","    }","","","","    return Config;","});"];
_$jscoverage['common/config.js'][9]++;
define(["base", "async"], (function (Base, async) {
  _$jscoverage['common/config.js'][11]++;
  var configs = [];
  _$jscoverage['common/config.js'][13]++;
  function isJsonString(str) {
    _$jscoverage['common/config.js'][14]++;
    if (((! str) || (0 === str.trim().length))) {
      _$jscoverage['common/config.js'][15]++;
      return false;
    }
    _$jscoverage['common/config.js'][17]++;
    str = str.replace(/\\./g, "@").replace(/"[^"\\\n\r]*"/g, "");
    _$jscoverage['common/config.js'][18]++;
    return /^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/.test(str);
}
  _$jscoverage['common/config.js'][26]++;
  var Config = {ENV: "ENV", BASE_PATH: "BASE_PATH", BASE_REPO_DIR: "BASE_REPO_DIR", FILE_REPO_DIR: "FILE_REPO_DIR", LAZO_PORT: "LAZO_PORT", MODEL_TIMEOUT: "MODEL_TIMEOUT", MODEL_MOCK: "MODEL_MOCK", CACHE: "CACHE", LAZO_VERSION: "LAZO_VERSION", get: (function (key, options) {
  _$jscoverage['common/config.js'][55]++;
  if (((! options) || ((typeof options.success) !== "function"))) {
    _$jscoverage['common/config.js'][56]++;
    for (var i = 0; (i < configs.length); (i++)) {
      _$jscoverage['common/config.js'][57]++;
      var config = configs[i];
      _$jscoverage['common/config.js'][58]++;
      var val = config.get(key);
      _$jscoverage['common/config.js'][59]++;
      if ((((typeof val) !== "undefined") && (val !== null))) {
        _$jscoverage['common/config.js'][60]++;
        return val;
      }
}
    _$jscoverage['common/config.js'][63]++;
    return ((options && ((typeof options) === "object"))? options.defaultVal: options);
  }
  _$jscoverage['common/config.js'][68]++;
  var fns = [];
  _$jscoverage['common/config.js'][69]++;
  for (var i = 0; (i < configs.length); (i++)) {
    _$jscoverage['common/config.js'][70]++;
    var config = configs[i];
    _$jscoverage['common/config.js'][71]++;
    fns.push((function (p1, p2) {
  _$jscoverage['common/config.js'][72]++;
  var val, callback;
  _$jscoverage['common/config.js'][73]++;
  if (((typeof p1) === "function")) {
    _$jscoverage['common/config.js'][74]++;
    callback = p1;
  }
  else {
    _$jscoverage['common/config.js'][76]++;
    val = p1;
    _$jscoverage['common/config.js'][77]++;
    callback = p2;
  }
  _$jscoverage['common/config.js'][79]++;
  if ((((typeof val) !== "undefined") && (val !== null))) {
    _$jscoverage['common/config.js'][80]++;
    return callback(null, val);
  }
  _$jscoverage['common/config.js'][82]++;
  config.get(key, {success: (function (value) {
  _$jscoverage['common/config.js'][83]++;
  return callback(null, value);
})});
}));
}
  _$jscoverage['common/config.js'][87]++;
  async.waterfall(fns, (function (err, result) {
  _$jscoverage['common/config.js'][88]++;
  if ((err && options && ((typeof options.error) === "function"))) {
    _$jscoverage['common/config.js'][89]++;
    options.error(err);
  }
  _$jscoverage['common/config.js'][91]++;
  return options.success(result);
}));
}), addPlugin: (function (plugin) {
  _$jscoverage['common/config.js'][100]++;
  configs.push(plugin);
})};
  _$jscoverage['common/config.js'][110]++;
  Config.Plugin = Base.extend({constructor: (function (options) {
  _$jscoverage['common/config.js'][116]++;
  this.data = {};
}), get: (function (key, options) {
  _$jscoverage['common/config.js'][124]++;
  var ret;
  _$jscoverage['common/config.js'][125]++;
  if ((this.data && (key in this.data))) {
    _$jscoverage['common/config.js'][126]++;
    ret = this.data[key];
    _$jscoverage['common/config.js'][127]++;
    try {
      _$jscoverage['common/config.js'][128]++;
      ret = JSON.parse(ret);
    }
    catch (e) {
    }
  }
  _$jscoverage['common/config.js'][131]++;
  if ((options && ((typeof options.success) === "function"))) {
    _$jscoverage['common/config.js'][132]++;
    options.success(ret);
  }
  _$jscoverage['common/config.js'][134]++;
  return ret;
})});
  _$jscoverage['common/config.js'][145]++;
  Config.HashPlugin = Config.Plugin.extend({constructor: (function (options) {
  _$jscoverage['common/config.js'][147]++;
  this.data = options.data;
})});
  _$jscoverage['common/config.js'][159]++;
  Config.JSONPlugin = Config.Plugin.extend({constructor: (function (options) {
  _$jscoverage['common/config.js'][161]++;
  var self = this;
  _$jscoverage['common/config.js'][162]++;
  LAZO.require([("text!" + options.file)], (function (text) {
  _$jscoverage['common/config.js'][163]++;
  self.data = JSON.parse(text);
  _$jscoverage['common/config.js'][164]++;
  if (((typeof options.success) === "function")) {
    _$jscoverage['common/config.js'][165]++;
    options.success();
  }
}), (function (err) {
  _$jscoverage['common/config.js'][168]++;
  if (((typeof options.error) === "function")) {
    _$jscoverage['common/config.js'][169]++;
    options.error(err);
  }
}));
})});
  _$jscoverage['common/config.js'][176]++;
  if ((((typeof process) !== "undefined") && process.env)) {
    _$jscoverage['common/config.js'][177]++;
    var envCfg = Config.Plugin.extend({constructor: (function (options) {
  _$jscoverage['common/config.js'][179]++;
  this.data = process.env;
})});
    _$jscoverage['common/config.js'][182]++;
    Config.addPlugin(new envCfg());
  }
  _$jscoverage['common/config.js'][187]++;
  return Config;
}));
