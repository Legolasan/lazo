/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['common/assets.js']) {
  _$jscoverage['common/assets.js'] = [];
  _$jscoverage['common/assets.js'][8] = 0;
  _$jscoverage['common/assets.js'][15] = 0;
  _$jscoverage['common/assets.js'][23] = 0;
  _$jscoverage['common/assets.js'][24] = 0;
  _$jscoverage['common/assets.js'][25] = 0;
  _$jscoverage['common/assets.js'][28] = 0;
  _$jscoverage['common/assets.js'][38] = 0;
  _$jscoverage['common/assets.js'][50] = 0;
  _$jscoverage['common/assets.js'][61] = 0;
  _$jscoverage['common/assets.js'][74] = 0;
  _$jscoverage['common/assets.js'][88] = 0;
  _$jscoverage['common/assets.js'][90] = 0;
  _$jscoverage['common/assets.js'][104] = 0;
  _$jscoverage['common/assets.js'][105] = 0;
  _$jscoverage['common/assets.js'][106] = 0;
  _$jscoverage['common/assets.js'][108] = 0;
  _$jscoverage['common/assets.js'][111] = 0;
  _$jscoverage['common/assets.js'][124] = 0;
  _$jscoverage['common/assets.js'][125] = 0;
  _$jscoverage['common/assets.js'][126] = 0;
  _$jscoverage['common/assets.js'][139] = 0;
  _$jscoverage['common/assets.js'][160] = 0;
  _$jscoverage['common/assets.js'][164] = 0;
  _$jscoverage['common/assets.js'][166] = 0;
  _$jscoverage['common/assets.js'][167] = 0;
  _$jscoverage['common/assets.js'][182] = 0;
  _$jscoverage['common/assets.js'][183] = 0;
  _$jscoverage['common/assets.js'][186] = 0;
  _$jscoverage['common/assets.js'][187] = 0;
  _$jscoverage['common/assets.js'][188] = 0;
  _$jscoverage['common/assets.js'][189] = 0;
  _$jscoverage['common/assets.js'][191] = 0;
  _$jscoverage['common/assets.js'][192] = 0;
  _$jscoverage['common/assets.js'][193] = 0;
  _$jscoverage['common/assets.js'][196] = 0;
  _$jscoverage['common/assets.js'][199] = 0;
  _$jscoverage['common/assets.js'][200] = 0;
  _$jscoverage['common/assets.js'][201] = 0;
  _$jscoverage['common/assets.js'][204] = 0;
  _$jscoverage['common/assets.js'][206] = 0;
  _$jscoverage['common/assets.js'][207] = 0;
  _$jscoverage['common/assets.js'][208] = 0;
  _$jscoverage['common/assets.js'][209] = 0;
  _$jscoverage['common/assets.js'][212] = 0;
  _$jscoverage['common/assets.js'][213] = 0;
  _$jscoverage['common/assets.js'][216] = 0;
  _$jscoverage['common/assets.js'][217] = 0;
  _$jscoverage['common/assets.js'][220] = 0;
  _$jscoverage['common/assets.js'][221] = 0;
  _$jscoverage['common/assets.js'][222] = 0;
  _$jscoverage['common/assets.js'][224] = 0;
  _$jscoverage['common/assets.js'][227] = 0;
  _$jscoverage['common/assets.js'][229] = 0;
  _$jscoverage['common/assets.js'][230] = 0;
  _$jscoverage['common/assets.js'][233] = 0;
  _$jscoverage['common/assets.js'][239] = 0;
  _$jscoverage['common/assets.js'][242] = 0;
  _$jscoverage['common/assets.js'][245] = 0;
  _$jscoverage['common/assets.js'][248] = 0;
  _$jscoverage['common/assets.js'][269] = 0;
  _$jscoverage['common/assets.js'][271] = 0;
  _$jscoverage['common/assets.js'][272] = 0;
  _$jscoverage['common/assets.js'][274] = 0;
  _$jscoverage['common/assets.js'][275] = 0;
  _$jscoverage['common/assets.js'][278] = 0;
  _$jscoverage['common/assets.js'][280] = 0;
  _$jscoverage['common/assets.js'][281] = 0;
  _$jscoverage['common/assets.js'][283] = 0;
  _$jscoverage['common/assets.js'][284] = 0;
  _$jscoverage['common/assets.js'][287] = 0;
  _$jscoverage['common/assets.js'][291] = 0;
  _$jscoverage['common/assets.js'][292] = 0;
  _$jscoverage['common/assets.js'][294] = 0;
  _$jscoverage['common/assets.js'][295] = 0;
  _$jscoverage['common/assets.js'][298] = 0;
  _$jscoverage['common/assets.js'][302] = 0;
  _$jscoverage['common/assets.js'][308] = 0;
  _$jscoverage['common/assets.js'][316] = 0;
  _$jscoverage['common/assets.js'][325] = 0;
  _$jscoverage['common/assets.js'][326] = 0;
  _$jscoverage['common/assets.js'][339] = 0;
  _$jscoverage['common/assets.js'][340] = 0;
  _$jscoverage['common/assets.js'][341] = 0;
  _$jscoverage['common/assets.js'][344] = 0;
  _$jscoverage['common/assets.js'][355] = 0;
  _$jscoverage['common/assets.js'][356] = 0;
  _$jscoverage['common/assets.js'][357] = 0;
  _$jscoverage['common/assets.js'][360] = 0;
  _$jscoverage['common/assets.js'][363] = 0;
  _$jscoverage['common/assets.js'][373] = 0;
}
_$jscoverage['common/assets.js'].source = ["/*global define:false, requirejs:false, LAZO:false */","","/**"," * The assets manager module."," *"," * @submodule assets"," */","define(['underscore', 'async', 'base'], function (_, async, Base) {","","    /**","     * The default locale (empty string by convention).","     *","     * @type {String}","     */","    var DEFAULT_LOCALE = '';","","    /**","     * Convenience method for invoking callback functions. Does nothing if callback is not a function.","     *","     * @param {Function} callback A callback function.","     * @param {*} [args*] Arguments to be passed to the callback function.","     */","    var invoke = function (callback) {","        if (typeof callback !== 'function') {","            return;","        }","","        callback.apply(this, _.rest(arguments));","    };","","    /**","     * Base type for custom providers required by the DefaultPlugin.","     *","     * @class assets.Provider","     * @constructor","     * @extends Base","     */","    var Provider = Base.extend({","","        /**","         * Lists the assets for a given component or shared at application level.","         *","         * @method list","         * @param {Object} [options] The options object.","         *  @param {String} [options.componentName] The component name. If omitted, lists the application assets.","         *  @param {Function} [options.success] The success callback function.","         *  @param {Function} [options.error] The error callback function.","         */","        list: function () {","            throw new Error('This method must be override by implementor.');","        }","","    });","","    /**","     * Base type for custom plugins.","     *","     * @class assets.Plugin","     * @extends Base","     */","    var Plugin = Base.extend({","","        /**","         * Resolves the asset map for the given component and context.","         *","         * @param {String} componentName The component name.","         * @param {Object} context The context object.","         * @param {Object} [options] The options object.","         *  @param {Function} [options.success] The success callback function.","         *  @param {Function} [options.error] The error callback function.","         * @method map","         */","        map: function () {","            throw new Error('This method must be override by implementor.');","        }","","    }, {","","        /**","         * Parses the request object and returns an array of locales.","         *","         * @param {Object} request A request object.","         * @returns {Array} A locale array.","         * @private","         * @static","         */","        _getLocales: function (request) {","            var acceptLanguage = request &amp;&amp; request.raw &amp;&amp; request.raw.req &amp;&amp; request.raw.req.headers &amp;&amp;","                request.raw.req.headers['accept-language'];","            return this._parseAcceptLanguage(acceptLanguage);","        },","","        /**","         * Loads the JSON file containing the strings map and returns the parsed object.","         *","         * @param {String} path","         * @param {Object} [options] The options object.","         *  @param {Function} [options.success] The success callback function.","         *  @param {Function} [options.error] The error callback function.","         * @private","         * @static","         */","        _loadStrings: function (path, options) {","            LAZO.require(['text!' + path.substr(1)], function (strings) {","                try {","                    invoke(options.success, JSON.parse(strings));","                } catch (error) {","                    invoke(options.error, error);","                }","            }, function (error) {","                invoke(options.error, error);","            });","        },","","        /**","         * Parses the contents of the 'accept-language' header and returns an array of locales.","         *","         * @param {String} acceptLanguage The contents of 'accept-language' header.","         * @returns {Array} An array of locales.","         * @private","         * @static","         */","        _parseAcceptLanguage: function (acceptLanguage) {","            var pattern = /^(([a-z]{2})(?:-[A-Z]{2})?)/;","            var match = acceptLanguage &amp;&amp; pattern.exec(acceptLanguage || '');","            return match ? _.compact(_.uniq(_.rest(match))).concat(DEFAULT_LOCALE) : [DEFAULT_LOCALE];","        }","","    });","","    /**","     * The default assets plugin scans the contents of 'app/assets' and 'component/[componentName]/assets' directories","     * in order to return the application and component assets maps.","     *","     * @class assets.DefaultPlugin","     * @extends Plugin","     * @constructor","     */","    var DefaultPlugin = Plugin.extend({","","        _appCache: null,","","        _componentCache: null,","","        _options: null,","","        _serverProvider: null,","","        /**","         * Creates a DefaultPlugin instance.","         *","         * @param {Object} [options] The options object.","         *  @param {Provider} provider A provider instance. The provider must return an asset list. The DefaultPlugin","         *  takes a client and server provider, both return the contents os 'app/assets' and","         *  'component/[componentName]/assets' directories.","         *  @param {String} [strings='strings.json'] The name of the file that contains the strings map.","         * @constructor","         */","        constructor: function (options) {","            var defaults = {","                strings: 'strings.json'","            };","","            this._options = _.defaults(options || {}, defaults);","","            if (!(this._options.provider instanceof Provider)) {","                throw new TypeError('Invalid provider.');","            }","        },","","        /**","         * Resolves the asset map for the given component and context.","         *","         * @param {String} componentName The component name.","         * @param {Object} context The context object.","         * @param {Object} [options] The options object.","         *  @param {Function} [options.success] The success callback function.","         *  @param {Function} [options.error] The error callback function.","         * @method map","         */","        map: function (componentName, context, options) {","            if (!componentName || !context || !options) {","                throw new TypeError();","            }","","            var self = this;","            var request = context &amp;&amp; context._rawReq;","            var locales = Plugin._getLocales(request);","            var locale = locales &amp;&amp; locales[0] || DEFAULT_LOCALE;","","            var onMaps = function (error, maps) {","                if (error) {","                    return invoke(options.error, error);","                }","","                invoke(options.success, maps);","            };","","            var onAssetsList = function (error, assetsLists) {","                if (error) {","                    return invoke(options.error, error);","                }","","                var mapsTasks = {};","","                _.each(assetsLists, function(assets, component){","                    mapsTasks[component] = function (callback) {","                        if (!self._componentCache) {","                            self._componentCache = {};","                        }","","                        if (!self._componentCache[component]) {","                            self._componentCache[component] = {};","                        }","","                        if (self._componentCache[component][locale]) {","                            return callback(null, self._componentCache[component][locale]);","                        }","","                        var assetsPath;","                        if(component === 'app'){","                            assetsPath = '/app/assets/';","                        }else{","                            assetsPath = '/components/' + component + '/assets/';","                        }","","                        self.constructor._map(assetsPath, locales, assets, self._options.strings, {","                            success: function (map) {","                                self._componentCache[component][locale] = map;","                                callback(null, map);","                            },","                            error: function (error) {","                                callback(error, null);","                            }","                        });","                    };","                });","","                async.parallel(mapsTasks, onMaps);","            };","","            self._options.provider.list({","                componentName: componentName,","                success: function (list) {","                    onAssetsList(null, list);","                },","                error: function (error) {","                    onAssetsList(error, null);","                }","            });","        }","","    }, {","","        /**","         * Resolves the asset map for the given arguments.","         *","         * @param {String} basePath The base path where the assets are located.","         * @param {Array} localeList An array of locales to resolve the assets.","         * @param {Array} assetList An array of assets (application or component).","         * @param {String} stringsFile The name of the file that contains the strings map (i.e. 'strings.json').","         * @param {Object} [options] The options object.","         *  @param {Function} [options.success] The success callback function.","         *  @param {Function} [options.error] The error callback function.","         * @private","         * @static","         */","        _map: function (basePath, localeList, assetList, stringsFile, options) {","            var map = {};","","            _.each(localeList, function (locale) {","                var filterPattern = locale ? new RegExp('^' + locale + '/.+') : /^(?![a-z]{2}(?:-[A-Z]{2})?\\/).+/;","","                var filtered = _.filter(assetList, function (asset) {","                    return filterPattern.test(asset);","                });","","                var keyPattern = /^(?:[a-z]{2}(?:-[A-Z]{2})?\\/)(.+)/;","","                _.each(filtered, function (asset) {","                    var key = asset.replace(keyPattern, '$1');","","                    if (map[key]) {","                        return;","                    }","","                    map[key] = basePath + asset;","                });","            });","","            if (map[stringsFile]) {","                return Plugin._loadStrings(map[stringsFile], {","                    success: function (strings) {","                        delete map[stringsFile];","                        invoke(options.success, _.extend(map, strings));","                    },","                    error: function (error) {","                        invoke(options.error, error);","                    }","                });","            }else{","                invoke(options.success, map);","            }","        }","    });","","","    var assets = (function () {","","        /**","         * The current plugin.","         *","         * @type {Plugin}","         * @private","         */","        var plugin = null;","","        /**","         * Returns the current plugin set.","         *","         * @returns {Plugin} The current plugin set.","         * @method getPlugin","         * @static","         */","        var getPlugin = function () {","            return plugin;","        };","","        /**","         * Resolves the asset map for the given component and context.","         *","         * @param {String} componentName The component name.","         * @param {Object} context The context object.","         * @param {Object} [options] The options object.","         *  @param {Function} [options.success] The success callback function.","         *  @param {Function} [options.error] The error callback function.","         * @method map","         */","        var map = function (componentName, context, options) {","            if (plugin === null) {","                throw new Error('Plugin has not been set.');","            }","","            plugin.map(componentName, context, options);","        };","","        /**","         * Sets the assets plugin.","         *","         * @param {Plugin} newPlugin The plugin to be used.","         * @throws TypeError If the provided plugin is not derived from Plugin.","         * @method setPlugin","         * @static","         */","        var setPlugin = function (newPlugin) {","            if (!(newPlugin instanceof Plugin)) {","                throw new TypeError();","            }","","            plugin = newPlugin;","        };","","        return {","            Provider: Provider,","            DefaultPlugin: DefaultPlugin,","            getPlugin: getPlugin,","            map: map,","            Plugin: Plugin,","            setPlugin: setPlugin","        };","    }());","","    return assets;","});"];
_$jscoverage['common/assets.js'][8]++;
define(["underscore", "async", "base"], (function (_, async, Base) {
  _$jscoverage['common/assets.js'][15]++;
  var DEFAULT_LOCALE = "";
  _$jscoverage['common/assets.js'][23]++;
  var invoke = (function (callback) {
  _$jscoverage['common/assets.js'][24]++;
  if (((typeof callback) !== "function")) {
    _$jscoverage['common/assets.js'][25]++;
    return;
  }
  _$jscoverage['common/assets.js'][28]++;
  callback.apply(this, _.rest(arguments));
});
  _$jscoverage['common/assets.js'][38]++;
  var Provider = Base.extend({list: (function () {
  _$jscoverage['common/assets.js'][50]++;
  throw new Error("This method must be override by implementor.");
})});
  _$jscoverage['common/assets.js'][61]++;
  var Plugin = Base.extend({map: (function () {
  _$jscoverage['common/assets.js'][74]++;
  throw new Error("This method must be override by implementor.");
})}, {_getLocales: (function (request) {
  _$jscoverage['common/assets.js'][88]++;
  var acceptLanguage = (request && request.raw && request.raw.req && request.raw.req.headers && request.raw.req.headers["accept-language"]);
  _$jscoverage['common/assets.js'][90]++;
  return this._parseAcceptLanguage(acceptLanguage);
}), _loadStrings: (function (path, options) {
  _$jscoverage['common/assets.js'][104]++;
  LAZO.require([("text!" + path.substr(1))], (function (strings) {
  _$jscoverage['common/assets.js'][105]++;
  try {
    _$jscoverage['common/assets.js'][106]++;
    invoke(options.success, JSON.parse(strings));
  }
  catch (error) {
    _$jscoverage['common/assets.js'][108]++;
    invoke(options.error, error);
  }
}), (function (error) {
  _$jscoverage['common/assets.js'][111]++;
  invoke(options.error, error);
}));
}), _parseAcceptLanguage: (function (acceptLanguage) {
  _$jscoverage['common/assets.js'][124]++;
  var pattern = /^(([a-z]{2})(?:-[A-Z]{2})?)/;
  _$jscoverage['common/assets.js'][125]++;
  var match = (acceptLanguage && pattern.exec((acceptLanguage || "")));
  _$jscoverage['common/assets.js'][126]++;
  return (match? _.compact(_.uniq(_.rest(match))).concat(DEFAULT_LOCALE): [DEFAULT_LOCALE]);
})});
  _$jscoverage['common/assets.js'][139]++;
  var DefaultPlugin = Plugin.extend({_appCache: null, _componentCache: null, _options: null, _serverProvider: null, constructor: (function (options) {
  _$jscoverage['common/assets.js'][160]++;
  var defaults = {strings: "strings.json"};
  _$jscoverage['common/assets.js'][164]++;
  this._options = _.defaults((options || {}), defaults);
  _$jscoverage['common/assets.js'][166]++;
  if ((! (this._options.provider instanceof Provider))) {
    _$jscoverage['common/assets.js'][167]++;
    throw new TypeError("Invalid provider.");
  }
}), map: (function (componentName, context, options) {
  _$jscoverage['common/assets.js'][182]++;
  if (((! componentName) || (! context) || (! options))) {
    _$jscoverage['common/assets.js'][183]++;
    throw new TypeError();
  }
  _$jscoverage['common/assets.js'][186]++;
  var self = this;
  _$jscoverage['common/assets.js'][187]++;
  var request = (context && context._rawReq);
  _$jscoverage['common/assets.js'][188]++;
  var locales = Plugin._getLocales(request);
  _$jscoverage['common/assets.js'][189]++;
  var locale = ((locales && locales[0]) || DEFAULT_LOCALE);
  _$jscoverage['common/assets.js'][191]++;
  var onMaps = (function (error, maps) {
  _$jscoverage['common/assets.js'][192]++;
  if (error) {
    _$jscoverage['common/assets.js'][193]++;
    return invoke(options.error, error);
  }
  _$jscoverage['common/assets.js'][196]++;
  invoke(options.success, maps);
});
  _$jscoverage['common/assets.js'][199]++;
  var onAssetsList = (function (error, assetsLists) {
  _$jscoverage['common/assets.js'][200]++;
  if (error) {
    _$jscoverage['common/assets.js'][201]++;
    return invoke(options.error, error);
  }
  _$jscoverage['common/assets.js'][204]++;
  var mapsTasks = {};
  _$jscoverage['common/assets.js'][206]++;
  _.each(assetsLists, (function (assets, component) {
  _$jscoverage['common/assets.js'][207]++;
  mapsTasks[component] = (function (callback) {
  _$jscoverage['common/assets.js'][208]++;
  if ((! self._componentCache)) {
    _$jscoverage['common/assets.js'][209]++;
    self._componentCache = {};
  }
  _$jscoverage['common/assets.js'][212]++;
  if ((! self._componentCache[component])) {
    _$jscoverage['common/assets.js'][213]++;
    self._componentCache[component] = {};
  }
  _$jscoverage['common/assets.js'][216]++;
  if (self._componentCache[component][locale]) {
    _$jscoverage['common/assets.js'][217]++;
    return callback(null, self._componentCache[component][locale]);
  }
  _$jscoverage['common/assets.js'][220]++;
  var assetsPath;
  _$jscoverage['common/assets.js'][221]++;
  if ((component === "app")) {
    _$jscoverage['common/assets.js'][222]++;
    assetsPath = "/app/assets/";
  }
  else {
    _$jscoverage['common/assets.js'][224]++;
    assetsPath = ("/components/" + component + "/assets/");
  }
  _$jscoverage['common/assets.js'][227]++;
  self.constructor._map(assetsPath, locales, assets, self._options.strings, {success: (function (map) {
  _$jscoverage['common/assets.js'][229]++;
  self._componentCache[component][locale] = map;
  _$jscoverage['common/assets.js'][230]++;
  callback(null, map);
}), error: (function (error) {
  _$jscoverage['common/assets.js'][233]++;
  callback(error, null);
})});
});
}));
  _$jscoverage['common/assets.js'][239]++;
  async.parallel(mapsTasks, onMaps);
});
  _$jscoverage['common/assets.js'][242]++;
  self._options.provider.list({componentName: componentName, success: (function (list) {
  _$jscoverage['common/assets.js'][245]++;
  onAssetsList(null, list);
}), error: (function (error) {
  _$jscoverage['common/assets.js'][248]++;
  onAssetsList(error, null);
})});
})}, {_map: (function (basePath, localeList, assetList, stringsFile, options) {
  _$jscoverage['common/assets.js'][269]++;
  var map = {};
  _$jscoverage['common/assets.js'][271]++;
  _.each(localeList, (function (locale) {
  _$jscoverage['common/assets.js'][272]++;
  var filterPattern = (locale? new RegExp(("^" + locale + "/.+")): /^(?![a-z]{2}(?:-[A-Z]{2})?\/).+/);
  _$jscoverage['common/assets.js'][274]++;
  var filtered = _.filter(assetList, (function (asset) {
  _$jscoverage['common/assets.js'][275]++;
  return filterPattern.test(asset);
}));
  _$jscoverage['common/assets.js'][278]++;
  var keyPattern = /^(?:[a-z]{2}(?:-[A-Z]{2})?\/)(.+)/;
  _$jscoverage['common/assets.js'][280]++;
  _.each(filtered, (function (asset) {
  _$jscoverage['common/assets.js'][281]++;
  var key = asset.replace(keyPattern, "$1");
  _$jscoverage['common/assets.js'][283]++;
  if (map[key]) {
    _$jscoverage['common/assets.js'][284]++;
    return;
  }
  _$jscoverage['common/assets.js'][287]++;
  map[key] = (basePath + asset);
}));
}));
  _$jscoverage['common/assets.js'][291]++;
  if (map[stringsFile]) {
    _$jscoverage['common/assets.js'][292]++;
    return Plugin._loadStrings(map[stringsFile], {success: (function (strings) {
  _$jscoverage['common/assets.js'][294]++;
  (delete map[stringsFile]);
  _$jscoverage['common/assets.js'][295]++;
  invoke(options.success, _.extend(map, strings));
}), error: (function (error) {
  _$jscoverage['common/assets.js'][298]++;
  invoke(options.error, error);
})});
  }
  else {
    _$jscoverage['common/assets.js'][302]++;
    invoke(options.success, map);
  }
})});
  _$jscoverage['common/assets.js'][308]++;
  var assets = (function () {
  _$jscoverage['common/assets.js'][316]++;
  var plugin = null;
  _$jscoverage['common/assets.js'][325]++;
  var getPlugin = (function () {
  _$jscoverage['common/assets.js'][326]++;
  return plugin;
});
  _$jscoverage['common/assets.js'][339]++;
  var map = (function (componentName, context, options) {
  _$jscoverage['common/assets.js'][340]++;
  if ((plugin === null)) {
    _$jscoverage['common/assets.js'][341]++;
    throw new Error("Plugin has not been set.");
  }
  _$jscoverage['common/assets.js'][344]++;
  plugin.map(componentName, context, options);
});
  _$jscoverage['common/assets.js'][355]++;
  var setPlugin = (function (newPlugin) {
  _$jscoverage['common/assets.js'][356]++;
  if ((! (newPlugin instanceof Plugin))) {
    _$jscoverage['common/assets.js'][357]++;
    throw new TypeError();
  }
  _$jscoverage['common/assets.js'][360]++;
  plugin = newPlugin;
});
  _$jscoverage['common/assets.js'][363]++;
  return ({Provider: Provider, DefaultPlugin: DefaultPlugin, getPlugin: getPlugin, map: map, Plugin: Plugin, setPlugin: setPlugin});
})();
  _$jscoverage['common/assets.js'][373]++;
  return assets;
}));
