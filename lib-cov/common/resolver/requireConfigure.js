/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['common/resolver/requireConfigure.js']) {
  _$jscoverage['common/resolver/requireConfigure.js'] = [];
  _$jscoverage['common/resolver/requireConfigure.js'][1] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][3] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][6] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][7] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][8] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][11] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][20] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][23] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][24] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][26] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][27] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][30] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][33] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][34] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][38] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][39] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][41] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][42] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][45] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][48] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][49] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][50] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][53] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][56] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][60] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][61] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][84] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][85] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][87] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][91] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][92] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][93] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][95] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][102] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][103] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][116] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][117] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][118] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][120] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][126] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][128] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][129] = 0;
  _$jscoverage['common/resolver/requireConfigure.js'][131] = 0;
}
_$jscoverage['common/resolver/requireConfigure.js'].source = ["define(['json!resolver/paths.json'], function (paths) {","","    var configs,","        loader;","","    function getLoader(basePath) {","        if (loader) {","            return loader;","        }","","        loader = requirejs.config({","        baseUrl: basePath,","        context: 'configloader',","        paths: { // set paths for bootstrapping","            'json': 'lib/vendor/json',","            'text': 'lib/vendor/text',","            'common': 'lib/common'","        }});","","        return loader;","    }","","     function resolvePath(path, env, options) {","        var basePath;","","        if (env === 'server') {","            path = (options.basePath ? options.basePath + '/' : '') + path;","        }","","        return path;","    }","","    function getPaths(env, options) {","        var _paths = JSON.parse(JSON.stringify(paths)),","            needle = '/{env}/',","            replace = '/' + env + '/';","","        for (var k in _paths.common) { // update env specific implementation paths","            _paths.common[k] = resolvePath(_paths.common[k].replace(needle, replace), env, options);","        }","        for (k in _paths[env]) { // merge env specific paths","            _paths.common[k] = resolvePath(_paths[env][k], env, options);","        }","","        return _paths.common;","    }","","    function augment(receiver, giver) {","        for (var key in giver) {","            receiver[key] = giver[key];","        }","","        return receiver;","    }","","    configs = {","","        client: function (options, callback) {","","            function augmentConf(shim, paths) {","                return {","                    baseUrl: '/',","                    map: {","                        '*': {","                            'l': '/lib/client/loader.js'","                        }","                    },","                    paths: augment(getPaths('client', options), paths),","                    shim: augment({","                        'handlebars': {","                            exports: 'Handlebars'","                        }","                    }, shim),","                    inlineText: true,","                    keepBuildDir: true,","                    removeCombined: false,","                    skipDirOptimize: true,","                    crypto: 'md5',","                    outDir: 'optimized',","                    prefix: 'optimized'","                };","            }","","            try { // client","                window; // attempt to access window object; if server catch err &amp; use requirejs loader","                // use globals set by server render to simplePage.hbs, lazoShim, lazoPaths","                callback(null, augmentConf((LAZO.initConf.shim || {}), (LAZO.initConf.paths || {})), {","                    shim: LAZO.initConf.shim, paths: LAZO.initConf.paths","                });","            } catch (e) { // server","                var path = require('path');","                getLoader(options.basePath)(['json!' + path.resolve(options.baseUrl) + '/app/config.json'], function (config) {","                    callback(null, augmentConf((config.shim || {}), (config.paths || {})), config);","                }, function (err) {","                    callback(null, augmentConf({}, {}), { shim: '', paths: '' });","                });","            }","        },","","        server: function (options, callback) {","","            function augmentConf(shim, paths) {","                return {","                    shim: shim,","                    baseUrl: options.baseUrl,","                    context: 'application',","                    map: {","                        '*': {","                            's': options.basePath + '/lib/server/loader.js'","                        }","                    },","                    paths: augment(getPaths('server', options), paths)","                };","            }","","            var path = require('path');","            getLoader(options.basePath)(['json!' + path.resolve(options.baseUrl) + '/app/config.json'], function (config) {","                callback(null, augmentConf((config.shim || {}), (config.paths || {})), config);","            }, function (err) {","                callback(null, augmentConf({}, {}), { shim: '', paths: '' });","            });","        }","","    };","","    return {","        get: function (env, options, callback) {","            if (arguments.length === 2) {","                callback = arguments[1];","            }","            return configs[env](options, callback);","        }","    };","","","});"];
_$jscoverage['common/resolver/requireConfigure.js'][1]++;
define(["json!resolver/paths.json"], (function (paths) {
  _$jscoverage['common/resolver/requireConfigure.js'][3]++;
  var configs, loader;
  _$jscoverage['common/resolver/requireConfigure.js'][6]++;
  function getLoader(basePath) {
    _$jscoverage['common/resolver/requireConfigure.js'][7]++;
    if (loader) {
      _$jscoverage['common/resolver/requireConfigure.js'][8]++;
      return loader;
    }
    _$jscoverage['common/resolver/requireConfigure.js'][11]++;
    loader = requirejs.config({baseUrl: basePath, context: "configloader", paths: {"json": "lib/vendor/json", "text": "lib/vendor/text", "common": "lib/common"}});
    _$jscoverage['common/resolver/requireConfigure.js'][20]++;
    return loader;
}
  _$jscoverage['common/resolver/requireConfigure.js'][23]++;
  function resolvePath(path, env, options) {
    _$jscoverage['common/resolver/requireConfigure.js'][24]++;
    var basePath;
    _$jscoverage['common/resolver/requireConfigure.js'][26]++;
    if ((env === "server")) {
      _$jscoverage['common/resolver/requireConfigure.js'][27]++;
      path = ((options.basePath? (options.basePath + "/"): "") + path);
    }
    _$jscoverage['common/resolver/requireConfigure.js'][30]++;
    return path;
}
  _$jscoverage['common/resolver/requireConfigure.js'][33]++;
  function getPaths(env, options) {
    _$jscoverage['common/resolver/requireConfigure.js'][34]++;
    var _paths = JSON.parse(JSON.stringify(paths)), needle = "/{env}/", replace = ("/" + env + "/");
    _$jscoverage['common/resolver/requireConfigure.js'][38]++;
    for (var k in _paths.common) {
      _$jscoverage['common/resolver/requireConfigure.js'][39]++;
      _paths.common[k] = resolvePath(_paths.common[k].replace(needle, replace), env, options);
}
    _$jscoverage['common/resolver/requireConfigure.js'][41]++;
    for (k in _paths[env]) {
      _$jscoverage['common/resolver/requireConfigure.js'][42]++;
      _paths.common[k] = resolvePath(_paths[env][k], env, options);
}
    _$jscoverage['common/resolver/requireConfigure.js'][45]++;
    return _paths.common;
}
  _$jscoverage['common/resolver/requireConfigure.js'][48]++;
  function augment(receiver, giver) {
    _$jscoverage['common/resolver/requireConfigure.js'][49]++;
    for (var key in giver) {
      _$jscoverage['common/resolver/requireConfigure.js'][50]++;
      receiver[key] = giver[key];
}
    _$jscoverage['common/resolver/requireConfigure.js'][53]++;
    return receiver;
}
  _$jscoverage['common/resolver/requireConfigure.js'][56]++;
  configs = {client: (function (options, callback) {
  _$jscoverage['common/resolver/requireConfigure.js'][60]++;
  function augmentConf(shim, paths) {
    _$jscoverage['common/resolver/requireConfigure.js'][61]++;
    return ({baseUrl: "/", map: {"*": {"l": "/lib/client/loader.js"}}, paths: augment(getPaths("client", options), paths), shim: augment({"handlebars": {exports: "Handlebars"}}, shim), inlineText: true, keepBuildDir: true, removeCombined: false, skipDirOptimize: true, crypto: "md5", outDir: "optimized", prefix: "optimized"});
}
  _$jscoverage['common/resolver/requireConfigure.js'][84]++;
  try {
    _$jscoverage['common/resolver/requireConfigure.js'][85]++;
    window;
    _$jscoverage['common/resolver/requireConfigure.js'][87]++;
    callback(null, augmentConf((LAZO.initConf.shim || {}), (LAZO.initConf.paths || {})), {shim: LAZO.initConf.shim, paths: LAZO.initConf.paths});
  }
  catch (e) {
    _$jscoverage['common/resolver/requireConfigure.js'][91]++;
    var path = require("path");
    _$jscoverage['common/resolver/requireConfigure.js'][92]++;
    (getLoader(options.basePath))([("json!" + path.resolve(options.baseUrl) + "/app/config.json")], (function (config) {
  _$jscoverage['common/resolver/requireConfigure.js'][93]++;
  callback(null, augmentConf((config.shim || {}), (config.paths || {})), config);
}), (function (err) {
  _$jscoverage['common/resolver/requireConfigure.js'][95]++;
  callback(null, augmentConf({}, {}), {shim: "", paths: ""});
}));
  }
}), server: (function (options, callback) {
  _$jscoverage['common/resolver/requireConfigure.js'][102]++;
  function augmentConf(shim, paths) {
    _$jscoverage['common/resolver/requireConfigure.js'][103]++;
    return ({shim: shim, baseUrl: options.baseUrl, context: "application", map: {"*": {"s": (options.basePath + "/lib/server/loader.js")}}, paths: augment(getPaths("server", options), paths)});
}
  _$jscoverage['common/resolver/requireConfigure.js'][116]++;
  var path = require("path");
  _$jscoverage['common/resolver/requireConfigure.js'][117]++;
  (getLoader(options.basePath))([("json!" + path.resolve(options.baseUrl) + "/app/config.json")], (function (config) {
  _$jscoverage['common/resolver/requireConfigure.js'][118]++;
  callback(null, augmentConf((config.shim || {}), (config.paths || {})), config);
}), (function (err) {
  _$jscoverage['common/resolver/requireConfigure.js'][120]++;
  callback(null, augmentConf({}, {}), {shim: "", paths: ""});
}));
})};
  _$jscoverage['common/resolver/requireConfigure.js'][126]++;
  return ({get: (function (env, options, callback) {
  _$jscoverage['common/resolver/requireConfigure.js'][128]++;
  if ((arguments.length === 2)) {
    _$jscoverage['common/resolver/requireConfigure.js'][129]++;
    callback = arguments[1];
  }
  _$jscoverage['common/resolver/requireConfigure.js'][131]++;
  return (configs[env])(options, callback);
})});
}));
