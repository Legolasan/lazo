/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['common/context.js']) {
  _$jscoverage['common/context.js'] = [];
  _$jscoverage['common/context.js'][1] = 0;
  _$jscoverage['common/context.js'][3] = 0;
  _$jscoverage['common/context.js'][5] = 0;
  _$jscoverage['common/context.js'][6] = 0;
  _$jscoverage['common/context.js'][21] = 0;
  _$jscoverage['common/context.js'][23] = 0;
  _$jscoverage['common/context.js'][24] = 0;
  _$jscoverage['common/context.js'][25] = 0;
  _$jscoverage['common/context.js'][26] = 0;
  _$jscoverage['common/context.js'][27] = 0;
  _$jscoverage['common/context.js'][28] = 0;
  _$jscoverage['common/context.js'][31] = 0;
  _$jscoverage['common/context.js'][33] = 0;
  _$jscoverage['common/context.js'][35] = 0;
  _$jscoverage['common/context.js'][37] = 0;
  _$jscoverage['common/context.js'][38] = 0;
  _$jscoverage['common/context.js'][39] = 0;
  _$jscoverage['common/context.js'][40] = 0;
  _$jscoverage['common/context.js'][41] = 0;
  _$jscoverage['common/context.js'][45] = 0;
  _$jscoverage['common/context.js'][47] = 0;
  _$jscoverage['common/context.js'][48] = 0;
  _$jscoverage['common/context.js'][52] = 0;
  _$jscoverage['common/context.js'][56] = 0;
  _$jscoverage['common/context.js'][60] = 0;
  _$jscoverage['common/context.js'][61] = 0;
  _$jscoverage['common/context.js'][62] = 0;
  _$jscoverage['common/context.js'][64] = 0;
  _$jscoverage['common/context.js'][65] = 0;
  _$jscoverage['common/context.js'][70] = 0;
  _$jscoverage['common/context.js'][71] = 0;
  _$jscoverage['common/context.js'][72] = 0;
  _$jscoverage['common/context.js'][73] = 0;
  _$jscoverage['common/context.js'][75] = 0;
  _$jscoverage['common/context.js'][76] = 0;
  _$jscoverage['common/context.js'][77] = 0;
  _$jscoverage['common/context.js'][84] = 0;
  _$jscoverage['common/context.js'][85] = 0;
  _$jscoverage['common/context.js'][86] = 0;
  _$jscoverage['common/context.js'][88] = 0;
  _$jscoverage['common/context.js'][91] = 0;
  _$jscoverage['common/context.js'][92] = 0;
  _$jscoverage['common/context.js'][95] = 0;
  _$jscoverage['common/context.js'][96] = 0;
  _$jscoverage['common/context.js'][97] = 0;
  _$jscoverage['common/context.js'][100] = 0;
  _$jscoverage['common/context.js'][102] = 0;
  _$jscoverage['common/context.js'][103] = 0;
  _$jscoverage['common/context.js'][104] = 0;
  _$jscoverage['common/context.js'][106] = 0;
  _$jscoverage['common/context.js'][107] = 0;
  _$jscoverage['common/context.js'][112] = 0;
  _$jscoverage['common/context.js'][113] = 0;
  _$jscoverage['common/context.js'][114] = 0;
  _$jscoverage['common/context.js'][115] = 0;
  _$jscoverage['common/context.js'][120] = 0;
}
_$jscoverage['common/context.js'].source = ["define(['jquery', 'underscore'], function ($, _) {","","    'use strict';","","    var Context = function (options) {","        var defaults = {","            _rootCtx: {","                modelList: {},","                modelInstances: {},","                cookies: options ? options.cookies : {},","                data: options &amp;&amp; options.data ? options.data : {},","                pageTitle: options &amp;&amp; options.pageTitle ? options.pageTitle : LAZO.app.defaultTitle","            },","            assets: {},","            collections: {},","            models: {},","            params: {}","        };","","        // Create a copy and fill in default values","        options = _.defaults(_.extend({}, options), defaults);","","        this.assets = options.assets;","        this.collections = options.collections;","        this.models = options.models;","        this.params = _.omit(options.params, '_lazo');","        this.meta = options.meta;","        this.headers = options.headers;","        ","        // Root context","        this._rootCtx = options._rootCtx;","","        this._rootCtx.exclude = options.params.exclude;","","        if (LAZO.app.isServer &amp;&amp; options._rawReq) {","            // Do not serialize this!","            this._rawReq = options._rawReq;","            this.isXHR = options._rawReq.raw.req.headers['x-requested-with'] === 'XMLHttpRequest' ? true : false;","            this.location = options._rawReq.url;","        } else if (LAZO.app.isClient) {","            this.location = window.location;","        }","    };","","    Context.prototype = {","        setSharedData: function (key, val) {","            this._rootCtx.data[key] = val;","            return this;","        },","","        getSharedData: function (key) {","            return this._rootCtx.data[key];","        },","","        getCookie: function (name) {","            return this._rootCtx.cookies[name];","        },","        ","        setCookie: function (name, value, options) {","            if (LAZO.app.isServer) {","                this._rawReq.setState(name, value, options);","                this._rootCtx.cookies[name] = value;","            } else {","                $.cookie(name, value);","                this._rootCtx.cookies[name] = value;","            }","        },","","        clearCookie: function (name) {","            if (LAZO.app.isServer) {","                this._rawReq.clearState(name);","                this._rootCtx.cookies[name] = null;","                delete this._rootCtx.cookies[name];","            } else {","                $.removeCookie(name, value);","                this._rootCtx.cookies[name] = null;","                delete this._rootCtx.cookies[name];","            }","        }","","    };","    ","    // this is used for ctl.navigate","    Context.mergeRoot = function (receiver, giver) {","        for (var key in giver) {","            switch (key) {","                case 'dependencies':","                    break;","                case 'cookies':","                case 'data':","                    _.extend(receiver[key], giver[key]);","                    break;","                case 'modelList':","                case 'modelInstances':","                    for (var j in giver[key]) {","                        if (!receiver[key][j]) {","                            receiver[key][j] = giver[key][j];","                        }","                    }","                    break;","                case 'modules':","                    receiver[key] = receiver[key].concat(giver[key]);","                    receiver[key] = _.uniq(receiver[key]);","                    break;","                default:","                    receiver[key] = giver[key];","                    break;","            }","        }","    };","","    Context.mergeGlobalModels = function (newCtx, oldCtx) {","        for (var k in oldCtx.modelList) {","            if (newCtx.modelList[k]) {","                newCtx.modelInstances[k] = oldCtx.modelInstances[k];","            }","        }","    };","","    return Context;","});"];
_$jscoverage['common/context.js'][1]++;
define(["jquery", "underscore"], (function ($, _) {
  _$jscoverage['common/context.js'][3]++;
  "use strict";
  _$jscoverage['common/context.js'][5]++;
  var Context = (function (options) {
  _$jscoverage['common/context.js'][6]++;
  var defaults = {_rootCtx: {modelList: {}, modelInstances: {}, cookies: (options? options.cookies: {}), data: ((options && options.data)? options.data: {}), pageTitle: ((options && options.pageTitle)? options.pageTitle: LAZO.app.defaultTitle)}, assets: {}, collections: {}, models: {}, params: {}};
  _$jscoverage['common/context.js'][21]++;
  options = _.defaults(_.extend({}, options), defaults);
  _$jscoverage['common/context.js'][23]++;
  this.assets = options.assets;
  _$jscoverage['common/context.js'][24]++;
  this.collections = options.collections;
  _$jscoverage['common/context.js'][25]++;
  this.models = options.models;
  _$jscoverage['common/context.js'][26]++;
  this.params = _.omit(options.params, "_lazo");
  _$jscoverage['common/context.js'][27]++;
  this.meta = options.meta;
  _$jscoverage['common/context.js'][28]++;
  this.headers = options.headers;
  _$jscoverage['common/context.js'][31]++;
  this._rootCtx = options._rootCtx;
  _$jscoverage['common/context.js'][33]++;
  this._rootCtx.exclude = options.params.exclude;
  _$jscoverage['common/context.js'][35]++;
  if ((LAZO.app.isServer && options._rawReq)) {
    _$jscoverage['common/context.js'][37]++;
    this._rawReq = options._rawReq;
    _$jscoverage['common/context.js'][38]++;
    this.isXHR = ((options._rawReq.raw.req.headers["x-requested-with"] === "XMLHttpRequest")? true: false);
    _$jscoverage['common/context.js'][39]++;
    this.location = options._rawReq.url;
  }
  else {
    _$jscoverage['common/context.js'][40]++;
    if (LAZO.app.isClient) {
      _$jscoverage['common/context.js'][41]++;
      this.location = window.location;
    }
  }
});
  _$jscoverage['common/context.js'][45]++;
  Context.prototype = {setSharedData: (function (key, val) {
  _$jscoverage['common/context.js'][47]++;
  this._rootCtx.data[key] = val;
  _$jscoverage['common/context.js'][48]++;
  return this;
}), getSharedData: (function (key) {
  _$jscoverage['common/context.js'][52]++;
  return this._rootCtx.data[key];
}), getCookie: (function (name) {
  _$jscoverage['common/context.js'][56]++;
  return this._rootCtx.cookies[name];
}), setCookie: (function (name, value, options) {
  _$jscoverage['common/context.js'][60]++;
  if (LAZO.app.isServer) {
    _$jscoverage['common/context.js'][61]++;
    this._rawReq.setState(name, value, options);
    _$jscoverage['common/context.js'][62]++;
    this._rootCtx.cookies[name] = value;
  }
  else {
    _$jscoverage['common/context.js'][64]++;
    $.cookie(name, value);
    _$jscoverage['common/context.js'][65]++;
    this._rootCtx.cookies[name] = value;
  }
}), clearCookie: (function (name) {
  _$jscoverage['common/context.js'][70]++;
  if (LAZO.app.isServer) {
    _$jscoverage['common/context.js'][71]++;
    this._rawReq.clearState(name);
    _$jscoverage['common/context.js'][72]++;
    this._rootCtx.cookies[name] = null;
    _$jscoverage['common/context.js'][73]++;
    (delete this._rootCtx.cookies[name]);
  }
  else {
    _$jscoverage['common/context.js'][75]++;
    $.removeCookie(name, value);
    _$jscoverage['common/context.js'][76]++;
    this._rootCtx.cookies[name] = null;
    _$jscoverage['common/context.js'][77]++;
    (delete this._rootCtx.cookies[name]);
  }
})};
  _$jscoverage['common/context.js'][84]++;
  Context.mergeRoot = (function (receiver, giver) {
  _$jscoverage['common/context.js'][85]++;
  for (var key in giver) {
    _$jscoverage['common/context.js'][86]++;
    switch (key) {
    case "dependencies":
      _$jscoverage['common/context.js'][88]++;
      break;
    case "cookies":
    case "data":
      _$jscoverage['common/context.js'][91]++;
      _.extend(receiver[key], giver[key]);
      _$jscoverage['common/context.js'][92]++;
      break;
    case "modelList":
    case "modelInstances":
      _$jscoverage['common/context.js'][95]++;
      for (var j in giver[key]) {
        _$jscoverage['common/context.js'][96]++;
        if ((! receiver[key][j])) {
          _$jscoverage['common/context.js'][97]++;
          receiver[key][j] = giver[key][j];
        }
}
      _$jscoverage['common/context.js'][100]++;
      break;
    case "modules":
      _$jscoverage['common/context.js'][102]++;
      receiver[key] = receiver[key].concat(giver[key]);
      _$jscoverage['common/context.js'][103]++;
      receiver[key] = _.uniq(receiver[key]);
      _$jscoverage['common/context.js'][104]++;
      break;
    default:
      _$jscoverage['common/context.js'][106]++;
      receiver[key] = giver[key];
      _$jscoverage['common/context.js'][107]++;
      break;
    }
}
});
  _$jscoverage['common/context.js'][112]++;
  Context.mergeGlobalModels = (function (newCtx, oldCtx) {
  _$jscoverage['common/context.js'][113]++;
  for (var k in oldCtx.modelList) {
    _$jscoverage['common/context.js'][114]++;
    if (newCtx.modelList[k]) {
      _$jscoverage['common/context.js'][115]++;
      newCtx.modelInstances[k] = oldCtx.modelInstances[k];
    }
}
});
  _$jscoverage['common/context.js'][120]++;
  return Context;
}));
