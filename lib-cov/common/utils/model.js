/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['common/utils/model.js']) {
  _$jscoverage['common/utils/model.js'] = [];
  _$jscoverage['common/utils/model.js'][1] = 0;
  _$jscoverage['common/utils/model.js'][3] = 0;
  _$jscoverage['common/utils/model.js'][5] = 0;
  _$jscoverage['common/utils/model.js'][8] = 0;
  _$jscoverage['common/utils/model.js'][13] = 0;
  _$jscoverage['common/utils/model.js'][14] = 0;
  _$jscoverage['common/utils/model.js'][15] = 0;
  _$jscoverage['common/utils/model.js'][17] = 0;
  _$jscoverage['common/utils/model.js'][18] = 0;
  _$jscoverage['common/utils/model.js'][20] = 0;
  _$jscoverage['common/utils/model.js'][21] = 0;
  _$jscoverage['common/utils/model.js'][25] = 0;
  _$jscoverage['common/utils/model.js'][26] = 0;
  _$jscoverage['common/utils/model.js'][29] = 0;
  _$jscoverage['common/utils/model.js'][30] = 0;
  _$jscoverage['common/utils/model.js'][31] = 0;
  _$jscoverage['common/utils/model.js'][34] = 0;
  _$jscoverage['common/utils/model.js'][35] = 0;
  _$jscoverage['common/utils/model.js'][36] = 0;
  _$jscoverage['common/utils/model.js'][37] = 0;
  _$jscoverage['common/utils/model.js'][38] = 0;
  _$jscoverage['common/utils/model.js'][40] = 0;
  _$jscoverage['common/utils/model.js'][41] = 0;
  _$jscoverage['common/utils/model.js'][42] = 0;
  _$jscoverage['common/utils/model.js'][44] = 0;
  _$jscoverage['common/utils/model.js'][45] = 0;
  _$jscoverage['common/utils/model.js'][49] = 0;
  _$jscoverage['common/utils/model.js'][50] = 0;
  _$jscoverage['common/utils/model.js'][51] = 0;
  _$jscoverage['common/utils/model.js'][52] = 0;
  _$jscoverage['common/utils/model.js'][53] = 0;
  _$jscoverage['common/utils/model.js'][54] = 0;
  _$jscoverage['common/utils/model.js'][55] = 0;
  _$jscoverage['common/utils/model.js'][56] = 0;
  _$jscoverage['common/utils/model.js'][61] = 0;
  _$jscoverage['common/utils/model.js'][62] = 0;
  _$jscoverage['common/utils/model.js'][63] = 0;
  _$jscoverage['common/utils/model.js'][65] = 0;
  _$jscoverage['common/utils/model.js'][68] = 0;
  _$jscoverage['common/utils/model.js'][71] = 0;
  _$jscoverage['common/utils/model.js'][79] = 0;
  _$jscoverage['common/utils/model.js'][80] = 0;
  _$jscoverage['common/utils/model.js'][81] = 0;
  _$jscoverage['common/utils/model.js'][82] = 0;
  _$jscoverage['common/utils/model.js'][86] = 0;
  _$jscoverage['common/utils/model.js'][87] = 0;
  _$jscoverage['common/utils/model.js'][88] = 0;
  _$jscoverage['common/utils/model.js'][89] = 0;
  _$jscoverage['common/utils/model.js'][93] = 0;
  _$jscoverage['common/utils/model.js'][94] = 0;
  _$jscoverage['common/utils/model.js'][95] = 0;
  _$jscoverage['common/utils/model.js'][96] = 0;
  _$jscoverage['common/utils/model.js'][104] = 0;
  _$jscoverage['common/utils/model.js'][108] = 0;
  _$jscoverage['common/utils/model.js'][110] = 0;
  _$jscoverage['common/utils/model.js'][114] = 0;
  _$jscoverage['common/utils/model.js'][115] = 0;
  _$jscoverage['common/utils/model.js'][118] = 0;
  _$jscoverage['common/utils/model.js'][119] = 0;
  _$jscoverage['common/utils/model.js'][120] = 0;
  _$jscoverage['common/utils/model.js'][127] = 0;
  _$jscoverage['common/utils/model.js'][128] = 0;
  _$jscoverage['common/utils/model.js'][130] = 0;
  _$jscoverage['common/utils/model.js'][132] = 0;
  _$jscoverage['common/utils/model.js'][133] = 0;
  _$jscoverage['common/utils/model.js'][136] = 0;
  _$jscoverage['common/utils/model.js'][138] = 0;
  _$jscoverage['common/utils/model.js'][139] = 0;
  _$jscoverage['common/utils/model.js'][143] = 0;
  _$jscoverage['common/utils/model.js'][144] = 0;
  _$jscoverage['common/utils/model.js'][145] = 0;
  _$jscoverage['common/utils/model.js'][152] = 0;
  _$jscoverage['common/utils/model.js'][153] = 0;
  _$jscoverage['common/utils/model.js'][154] = 0;
  _$jscoverage['common/utils/model.js'][156] = 0;
  _$jscoverage['common/utils/model.js'][159] = 0;
  _$jscoverage['common/utils/model.js'][160] = 0;
  _$jscoverage['common/utils/model.js'][163] = 0;
  _$jscoverage['common/utils/model.js'][164] = 0;
  _$jscoverage['common/utils/model.js'][169] = 0;
}
_$jscoverage['common/utils/model.js'].source = ["define(['lazoModel', 'utils/modelLoader', 'utils/module'], function (LazoModel, modelLoader, module) {","","    'use strict';","","    return {","","        process: function (modelName, options, type) {","            var modelInstances = options.ctx._rootCtx.modelInstances,","                modelList = options.ctx._rootCtx.modelList,","                gid = LazoModel._getGlobalId(modelName, options.params),","                path = 'models/' + modelName + '/' + type;","","            function checkProcessing() {","                if (modelInstances[gid] === null) {","                    return;","                }","                else if (modelInstances[gid].processing) {","                    setTimeout(checkProcessing, 0);","                }","                else if (options.success) {","                    _.defer(options.success, modelInstances[gid]);","                }","            }","","            options.error = options.error || function (err) {","                throw err;","            }; // user did not define error bubble up 500","","            if (modelInstances[gid]) {","                checkProcessing();","                return;","            }","","            modelInstances[gid] = {};","            modelInstances[gid].processing = true;","            var _fetch = function (Model, _default) {","                var data = modelList[gid] &amp;&amp; modelList[gid].data ? modelList[gid].data : null;","                var m = new Model(data, {name: modelName, ctx: options.ctx, params: options.params, parse: data !== null});","","                m._default = _default;","                if (options.params &amp;&amp; type === 'model') {","                    m.id = _.result(options.params, m.idAttribute);","                }","                if (!_default) {","                    module.addPath(path, options.ctx);","                }","","                // if data in list don't make tunnel call","                if (modelList[gid]) {","                    m.cid = modelList[gid].cid;","                    m._default = _default;","                    if (modelList[gid].idMap) {","                        _.each(modelList[gid].idMap, function (elem) {","                            var modelItem = m.get(elem.id);","                            if (modelItem) {","                                modelItem.cid = elem.cid;","                            }","                        });","                    }","","                    modelInstances[gid] = m;","                    if (options.success) {","                        options.success(m);","                    }","                    return;","                }","                else {","                    m.fetch({","                        success: function (m) {","                            // add model meta info to modelList","                            var modelMeta = {","                                data: m._resp,","                                cid: m.cid,","                                id: m.id,","                                name: m.name,","                                params: options.params","                            };","","                            if (type === 'collection') {","                                modelMeta.idMap = [];","                                m.each(function (model) {","                                    modelMeta.idMap.push({cid: model.cid, id: model.id});","                                });","                            }","","                            m.ctx._rootCtx.modelList[gid] = modelMeta;","                            m.ctx._rootCtx.modelInstances[gid] = m;","                            if (options.success) {","                                return options.success(m);","                            }","                        },","                        error: function (model, response, opts) {","                            modelInstances[gid] = null;","                            LAZO.logger.log('error', '_processModel', 'Error loading model ' + modelName, response);","                            if (options.error) { // TODO: error handling","                                return options.error(model, response, opts);","                            }","                        }","                    });","                }","","            };","","            modelLoader(modelName, type, _fetch);","        },","","        create: function (name, attributes, options, type) {","            var _create = function (Model, _default) {","","                var modelInstances = options.ctx._rootCtx.modelInstances,","                    modelList = options.ctx._rootCtx.modelList,","                    gid = LazoModel._getGlobalId(name, options.params);","","                if (modelInstances[gid]) {","                    options.success(modelInstances[gid]);","                }","","                var m = new Model((type === 'model' ? attributes : null), {name: name, ctx: options.ctx, params: options.params, parse: true});","                m._default = _default;","                var modelMeta = {","                    data: (type === 'model' ? attributes : null),","                    cid: m.cid,","                    id: m.id,","                    name: m.name,","                    params: options.params","                };","                m.ctx._rootCtx.modelList[gid] = modelMeta;","                m.ctx._rootCtx.modelInstances[gid] = m;","","                if (type === 'model') {","","                    if (options.persist == false) {","                        options.success(m);","                    }","                    else {","                        m.save({}, {","                            success: function (model) {","                                if (options.success) {","                                    options.success(model);","                                }","                            },","                            error: function (model, xhr, opts) {","                                LAZO.logger.log('error', '_createModel', 'Error creating model ' + name, xhr);","                                if (options.error) {","                                    return options.error(model, xhr, opts);","                                }","                            }","                        });","                    }","                }","                else {","                    if (!_.isArray(attributes)) {","                        if (options.error) {","                            options.error(m, 'attributes must be an array', options);","                        }","                        return;","                    }","","                    _.each(attributes, function (modelData) {","                        m.create(modelData);","                    });","","                    if (options.success) {","                        options.success(m);","                    }","                }","            };","","            modelLoader(name, type, _create);","        }","","    };","","});"];
_$jscoverage['common/utils/model.js'][1]++;
define(["lazoModel", "utils/modelLoader", "utils/module"], (function (LazoModel, modelLoader, module) {
  _$jscoverage['common/utils/model.js'][3]++;
  "use strict";
  _$jscoverage['common/utils/model.js'][5]++;
  return ({process: (function (modelName, options, type) {
  _$jscoverage['common/utils/model.js'][8]++;
  var modelInstances = options.ctx._rootCtx.modelInstances, modelList = options.ctx._rootCtx.modelList, gid = LazoModel._getGlobalId(modelName, options.params), path = ("models/" + modelName + "/" + type);
  _$jscoverage['common/utils/model.js'][13]++;
  function checkProcessing() {
    _$jscoverage['common/utils/model.js'][14]++;
    if ((modelInstances[gid] === null)) {
      _$jscoverage['common/utils/model.js'][15]++;
      return;
    }
    else {
      _$jscoverage['common/utils/model.js'][17]++;
      if (modelInstances[gid].processing) {
        _$jscoverage['common/utils/model.js'][18]++;
        setTimeout(checkProcessing, 0);
      }
      else {
        _$jscoverage['common/utils/model.js'][20]++;
        if (options.success) {
          _$jscoverage['common/utils/model.js'][21]++;
          _.defer(options.success, modelInstances[gid]);
        }
      }
    }
}
  _$jscoverage['common/utils/model.js'][25]++;
  options.error = (options.error || (function (err) {
  _$jscoverage['common/utils/model.js'][26]++;
  throw err;
}));
  _$jscoverage['common/utils/model.js'][29]++;
  if (modelInstances[gid]) {
    _$jscoverage['common/utils/model.js'][30]++;
    checkProcessing();
    _$jscoverage['common/utils/model.js'][31]++;
    return;
  }
  _$jscoverage['common/utils/model.js'][34]++;
  modelInstances[gid] = {};
  _$jscoverage['common/utils/model.js'][35]++;
  modelInstances[gid].processing = true;
  _$jscoverage['common/utils/model.js'][36]++;
  var _fetch = (function (Model, _default) {
  _$jscoverage['common/utils/model.js'][37]++;
  var data = ((modelList[gid] && modelList[gid].data)? modelList[gid].data: null);
  _$jscoverage['common/utils/model.js'][38]++;
  var m = new Model(data, {name: modelName, ctx: options.ctx, params: options.params, parse: (data !== null)});
  _$jscoverage['common/utils/model.js'][40]++;
  m._default = _default;
  _$jscoverage['common/utils/model.js'][41]++;
  if ((options.params && (type === "model"))) {
    _$jscoverage['common/utils/model.js'][42]++;
    m.id = _.result(options.params, m.idAttribute);
  }
  _$jscoverage['common/utils/model.js'][44]++;
  if ((! _default)) {
    _$jscoverage['common/utils/model.js'][45]++;
    module.addPath(path, options.ctx);
  }
  _$jscoverage['common/utils/model.js'][49]++;
  if (modelList[gid]) {
    _$jscoverage['common/utils/model.js'][50]++;
    m.cid = modelList[gid].cid;
    _$jscoverage['common/utils/model.js'][51]++;
    m._default = _default;
    _$jscoverage['common/utils/model.js'][52]++;
    if (modelList[gid].idMap) {
      _$jscoverage['common/utils/model.js'][53]++;
      _.each(modelList[gid].idMap, (function (elem) {
  _$jscoverage['common/utils/model.js'][54]++;
  var modelItem = m.get(elem.id);
  _$jscoverage['common/utils/model.js'][55]++;
  if (modelItem) {
    _$jscoverage['common/utils/model.js'][56]++;
    modelItem.cid = elem.cid;
  }
}));
    }
    _$jscoverage['common/utils/model.js'][61]++;
    modelInstances[gid] = m;
    _$jscoverage['common/utils/model.js'][62]++;
    if (options.success) {
      _$jscoverage['common/utils/model.js'][63]++;
      options.success(m);
    }
    _$jscoverage['common/utils/model.js'][65]++;
    return;
  }
  else {
    _$jscoverage['common/utils/model.js'][68]++;
    m.fetch({success: (function (m) {
  _$jscoverage['common/utils/model.js'][71]++;
  var modelMeta = {data: m._resp, cid: m.cid, id: m.id, name: m.name, params: options.params};
  _$jscoverage['common/utils/model.js'][79]++;
  if ((type === "collection")) {
    _$jscoverage['common/utils/model.js'][80]++;
    modelMeta.idMap = [];
    _$jscoverage['common/utils/model.js'][81]++;
    m.each((function (model) {
  _$jscoverage['common/utils/model.js'][82]++;
  modelMeta.idMap.push({cid: model.cid, id: model.id});
}));
  }
  _$jscoverage['common/utils/model.js'][86]++;
  m.ctx._rootCtx.modelList[gid] = modelMeta;
  _$jscoverage['common/utils/model.js'][87]++;
  m.ctx._rootCtx.modelInstances[gid] = m;
  _$jscoverage['common/utils/model.js'][88]++;
  if (options.success) {
    _$jscoverage['common/utils/model.js'][89]++;
    return options.success(m);
  }
}), error: (function (model, response, opts) {
  _$jscoverage['common/utils/model.js'][93]++;
  modelInstances[gid] = null;
  _$jscoverage['common/utils/model.js'][94]++;
  LAZO.logger.log("error", "_processModel", ("Error loading model " + modelName), response);
  _$jscoverage['common/utils/model.js'][95]++;
  if (options.error) {
    _$jscoverage['common/utils/model.js'][96]++;
    return options.error(model, response, opts);
  }
})});
  }
});
  _$jscoverage['common/utils/model.js'][104]++;
  modelLoader(modelName, type, _fetch);
}), create: (function (name, attributes, options, type) {
  _$jscoverage['common/utils/model.js'][108]++;
  var _create = (function (Model, _default) {
  _$jscoverage['common/utils/model.js'][110]++;
  var modelInstances = options.ctx._rootCtx.modelInstances, modelList = options.ctx._rootCtx.modelList, gid = LazoModel._getGlobalId(name, options.params);
  _$jscoverage['common/utils/model.js'][114]++;
  if (modelInstances[gid]) {
    _$jscoverage['common/utils/model.js'][115]++;
    options.success(modelInstances[gid]);
  }
  _$jscoverage['common/utils/model.js'][118]++;
  var m = new Model(((type === "model")? attributes: null), {name: name, ctx: options.ctx, params: options.params, parse: true});
  _$jscoverage['common/utils/model.js'][119]++;
  m._default = _default;
  _$jscoverage['common/utils/model.js'][120]++;
  var modelMeta = {data: ((type === "model")? attributes: null), cid: m.cid, id: m.id, name: m.name, params: options.params};
  _$jscoverage['common/utils/model.js'][127]++;
  m.ctx._rootCtx.modelList[gid] = modelMeta;
  _$jscoverage['common/utils/model.js'][128]++;
  m.ctx._rootCtx.modelInstances[gid] = m;
  _$jscoverage['common/utils/model.js'][130]++;
  if ((type === "model")) {
    _$jscoverage['common/utils/model.js'][132]++;
    if ((options.persist == false)) {
      _$jscoverage['common/utils/model.js'][133]++;
      options.success(m);
    }
    else {
      _$jscoverage['common/utils/model.js'][136]++;
      m.save({}, {success: (function (model) {
  _$jscoverage['common/utils/model.js'][138]++;
  if (options.success) {
    _$jscoverage['common/utils/model.js'][139]++;
    options.success(model);
  }
}), error: (function (model, xhr, opts) {
  _$jscoverage['common/utils/model.js'][143]++;
  LAZO.logger.log("error", "_createModel", ("Error creating model " + name), xhr);
  _$jscoverage['common/utils/model.js'][144]++;
  if (options.error) {
    _$jscoverage['common/utils/model.js'][145]++;
    return options.error(model, xhr, opts);
  }
})});
    }
  }
  else {
    _$jscoverage['common/utils/model.js'][152]++;
    if ((! _.isArray(attributes))) {
      _$jscoverage['common/utils/model.js'][153]++;
      if (options.error) {
        _$jscoverage['common/utils/model.js'][154]++;
        options.error(m, "attributes must be an array", options);
      }
      _$jscoverage['common/utils/model.js'][156]++;
      return;
    }
    _$jscoverage['common/utils/model.js'][159]++;
    _.each(attributes, (function (modelData) {
  _$jscoverage['common/utils/model.js'][160]++;
  m.create(modelData);
}));
    _$jscoverage['common/utils/model.js'][163]++;
    if (options.success) {
      _$jscoverage['common/utils/model.js'][164]++;
      options.success(m);
    }
  }
});
  _$jscoverage['common/utils/model.js'][169]++;
  modelLoader(name, type, _create);
})});
}));
