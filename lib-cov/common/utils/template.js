/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['common/utils/template.js']) {
  _$jscoverage['common/utils/template.js'] = [];
  _$jscoverage['common/utils/template.js'][1] = 0;
  _$jscoverage['common/utils/template.js'][3] = 0;
  _$jscoverage['common/utils/template.js'][5] = 0;
  _$jscoverage['common/utils/template.js'][12] = 0;
  _$jscoverage['common/utils/template.js'][21] = 0;
  _$jscoverage['common/utils/template.js'][22] = 0;
  _$jscoverage['common/utils/template.js'][23] = 0;
  _$jscoverage['common/utils/template.js'][26] = 0;
  _$jscoverage['common/utils/template.js'][28] = 0;
  _$jscoverage['common/utils/template.js'][32] = 0;
  _$jscoverage['common/utils/template.js'][35] = 0;
  _$jscoverage['common/utils/template.js'][39] = 0;
  _$jscoverage['common/utils/template.js'][40] = 0;
  _$jscoverage['common/utils/template.js'][41] = 0;
  _$jscoverage['common/utils/template.js'][46] = 0;
  _$jscoverage['common/utils/template.js'][50] = 0;
  _$jscoverage['common/utils/template.js'][51] = 0;
  _$jscoverage['common/utils/template.js'][55] = 0;
  _$jscoverage['common/utils/template.js'][56] = 0;
  _$jscoverage['common/utils/template.js'][60] = 0;
  _$jscoverage['common/utils/template.js'][64] = 0;
  _$jscoverage['common/utils/template.js'][68] = 0;
  _$jscoverage['common/utils/template.js'][72] = 0;
  _$jscoverage['common/utils/template.js'][73] = 0;
  _$jscoverage['common/utils/template.js'][74] = 0;
  _$jscoverage['common/utils/template.js'][77] = 0;
  _$jscoverage['common/utils/template.js'][81] = 0;
  _$jscoverage['common/utils/template.js'][84] = 0;
  _$jscoverage['common/utils/template.js'][86] = 0;
  _$jscoverage['common/utils/template.js'][87] = 0;
  _$jscoverage['common/utils/template.js'][89] = 0;
  _$jscoverage['common/utils/template.js'][90] = 0;
  _$jscoverage['common/utils/template.js'][91] = 0;
  _$jscoverage['common/utils/template.js'][93] = 0;
  _$jscoverage['common/utils/template.js'][99] = 0;
  _$jscoverage['common/utils/template.js'][101] = 0;
  _$jscoverage['common/utils/template.js'][102] = 0;
  _$jscoverage['common/utils/template.js'][104] = 0;
  _$jscoverage['common/utils/template.js'][107] = 0;
}
_$jscoverage['common/utils/template.js'].source = ["define(['utils/handlebarsEngine'], function (handlebarsEngine) {","","    'use strict';","","    var defaultExt = {","","        handlebars: 'hbs',","        micro: 'mt'","","    };","","    var defaultTemplateEngineName = 'handlebars',","        _engines = {","            handlebars: {","                extension: 'hbs',","                handler: handlebarsEngine,","                exp: 'Handlebars'","            }","        };","","    function resolveEnginePath(engineDef) {","        if (engineDef.path) {","            return engineDef.path;","        }","","        switch (engineDef.name) {","            case 'micro':","                return 'underscore';","        }","    }","","    return {","","        getDefaultExt: function (engineName) {","            return this.getTemplateExt() || defaultExt[engineName];","        },","","        setTemplateExt: function (engineName, ext) {","            var engineDef = this.getTemplateEngineDef(engineName);","            if (engineDef) {","                engineDef.extension = ext;","            }","        },","","        registerTemplateEngine: function (name, extension, handler, exp) {","            return (_engines[name] = { extension: extension, handler: handler, exp: exp });","        },","","        getTemplateEngine: function (engineName) {","            var engine = _engines[engineName];","            return engine ? engine.handler : undefined;","        },","","        getTemplateExt: function (engineName) {","            var engineDef = this.getTemplateEngineDef(engineName);","            return engineDef ? engineDef.extension : undefined;","        },","","        getTemplateEngineDef: function (engineName) {","            return _engines[engineName];","        },","","        getDefaultTemplateEngine: function () {","            return this.getTemplateEngine(defaultTemplateEngineName);","        },","","        getDefaultTemplateEngineName: function () {","            return defaultTemplateEngineName;","        },","","        setDefaultTemplateEngine: function (engineName) {","            var engine = _templateEngines[engineName];","            if (!engine) {","                throw new Error('Invalid template engine name, ' + engineName);","            }","","            defaultTemplateEngineName = engineName;","        },","","        loadTemplateEngine: function (engineDef, options) {","            var engine,","                self = this;","","            options.error = options.error || function (err) { throw err; };","","            if ((engine = this.getTemplateEngine(engineDef.name))) {","                options.success(engine);","            } else {","                LAZO.require([resolveEnginePath(engineDef)], function (engine) {","                    self.registerTemplateEngine(engineDef.name, engineDef.extension, engineDef.handler(engine), engineDef.exp);","                    options.success(self.getTemplateEngine(engineDef.name));","                }, function (err) {","                    options.error(err);","                });","            }","        },","","        engHandlerMaker: function (engineName) {","            switch (engineName) {","                case 'micro':","                    return function (engine) {","                        return {","                            compile: function (template) {","                                return _.template(template);","                            },","                            execute: function (compiledTemplate, data) {","                                return compiledTemplate(data);","                            }","                        };","                    };","            }","        }","","    };","","});"];
_$jscoverage['common/utils/template.js'][1]++;
define(["utils/handlebarsEngine"], (function (handlebarsEngine) {
  _$jscoverage['common/utils/template.js'][3]++;
  "use strict";
  _$jscoverage['common/utils/template.js'][5]++;
  var defaultExt = {handlebars: "hbs", micro: "mt"};
  _$jscoverage['common/utils/template.js'][12]++;
  var defaultTemplateEngineName = "handlebars", _engines = {handlebars: {extension: "hbs", handler: handlebarsEngine, exp: "Handlebars"}};
  _$jscoverage['common/utils/template.js'][21]++;
  function resolveEnginePath(engineDef) {
    _$jscoverage['common/utils/template.js'][22]++;
    if (engineDef.path) {
      _$jscoverage['common/utils/template.js'][23]++;
      return engineDef.path;
    }
    _$jscoverage['common/utils/template.js'][26]++;
    switch (engineDef.name) {
    case "micro":
      _$jscoverage['common/utils/template.js'][28]++;
      return "underscore";
    }
}
  _$jscoverage['common/utils/template.js'][32]++;
  return ({getDefaultExt: (function (engineName) {
  _$jscoverage['common/utils/template.js'][35]++;
  return (this.getTemplateExt() || defaultExt[engineName]);
}), setTemplateExt: (function (engineName, ext) {
  _$jscoverage['common/utils/template.js'][39]++;
  var engineDef = this.getTemplateEngineDef(engineName);
  _$jscoverage['common/utils/template.js'][40]++;
  if (engineDef) {
    _$jscoverage['common/utils/template.js'][41]++;
    engineDef.extension = ext;
  }
}), registerTemplateEngine: (function (name, extension, handler, exp) {
  _$jscoverage['common/utils/template.js'][46]++;
  return (_engines[name] = {extension: extension, handler: handler, exp: exp});
}), getTemplateEngine: (function (engineName) {
  _$jscoverage['common/utils/template.js'][50]++;
  var engine = _engines[engineName];
  _$jscoverage['common/utils/template.js'][51]++;
  return (engine? engine.handler: undefined);
}), getTemplateExt: (function (engineName) {
  _$jscoverage['common/utils/template.js'][55]++;
  var engineDef = this.getTemplateEngineDef(engineName);
  _$jscoverage['common/utils/template.js'][56]++;
  return (engineDef? engineDef.extension: undefined);
}), getTemplateEngineDef: (function (engineName) {
  _$jscoverage['common/utils/template.js'][60]++;
  return _engines[engineName];
}), getDefaultTemplateEngine: (function () {
  _$jscoverage['common/utils/template.js'][64]++;
  return this.getTemplateEngine(defaultTemplateEngineName);
}), getDefaultTemplateEngineName: (function () {
  _$jscoverage['common/utils/template.js'][68]++;
  return defaultTemplateEngineName;
}), setDefaultTemplateEngine: (function (engineName) {
  _$jscoverage['common/utils/template.js'][72]++;
  var engine = _templateEngines[engineName];
  _$jscoverage['common/utils/template.js'][73]++;
  if ((! engine)) {
    _$jscoverage['common/utils/template.js'][74]++;
    throw new Error(("Invalid template engine name, " + engineName));
  }
  _$jscoverage['common/utils/template.js'][77]++;
  defaultTemplateEngineName = engineName;
}), loadTemplateEngine: (function (engineDef, options) {
  _$jscoverage['common/utils/template.js'][81]++;
  var engine, self = this;
  _$jscoverage['common/utils/template.js'][84]++;
  options.error = (options.error || (function (err) {
  _$jscoverage['common/utils/template.js'][84]++;
  throw err;
}));
  _$jscoverage['common/utils/template.js'][86]++;
  if ((engine = this.getTemplateEngine(engineDef.name))) {
    _$jscoverage['common/utils/template.js'][87]++;
    options.success(engine);
  }
  else {
    _$jscoverage['common/utils/template.js'][89]++;
    LAZO.require([resolveEnginePath(engineDef)], (function (engine) {
  _$jscoverage['common/utils/template.js'][90]++;
  self.registerTemplateEngine(engineDef.name, engineDef.extension, engineDef.handler(engine), engineDef.exp);
  _$jscoverage['common/utils/template.js'][91]++;
  options.success(self.getTemplateEngine(engineDef.name));
}), (function (err) {
  _$jscoverage['common/utils/template.js'][93]++;
  options.error(err);
}));
  }
}), engHandlerMaker: (function (engineName) {
  _$jscoverage['common/utils/template.js'][99]++;
  switch (engineName) {
  case "micro":
    _$jscoverage['common/utils/template.js'][101]++;
    return (function (engine) {
  _$jscoverage['common/utils/template.js'][102]++;
  return ({compile: (function (template) {
  _$jscoverage['common/utils/template.js'][104]++;
  return _.template(template);
}), execute: (function (compiledTemplate, data) {
  _$jscoverage['common/utils/template.js'][107]++;
  return compiledTemplate(data);
})});
});
  }
})});
}));
