/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['common/renderer.js']) {
  _$jscoverage['common/renderer.js'] = [];
  _$jscoverage['common/renderer.js'][1] = 0;
  _$jscoverage['common/renderer.js'][3] = 0;
  _$jscoverage['common/renderer.js'][5] = 0;
  _$jscoverage['common/renderer.js'][9] = 0;
  _$jscoverage['common/renderer.js'][10] = 0;
  _$jscoverage['common/renderer.js'][15] = 0;
  _$jscoverage['common/renderer.js'][23] = 0;
  _$jscoverage['common/renderer.js'][25] = 0;
  _$jscoverage['common/renderer.js'][26] = 0;
  _$jscoverage['common/renderer.js'][28] = 0;
  _$jscoverage['common/renderer.js'][29] = 0;
  _$jscoverage['common/renderer.js'][30] = 0;
  _$jscoverage['common/renderer.js'][32] = 0;
  _$jscoverage['common/renderer.js'][33] = 0;
  _$jscoverage['common/renderer.js'][36] = 0;
  _$jscoverage['common/renderer.js'][37] = 0;
  _$jscoverage['common/renderer.js'][41] = 0;
  _$jscoverage['common/renderer.js'][42] = 0;
  _$jscoverage['common/renderer.js'][44] = 0;
  _$jscoverage['common/renderer.js'][45] = 0;
  _$jscoverage['common/renderer.js'][48] = 0;
  _$jscoverage['common/renderer.js'][49] = 0;
  _$jscoverage['common/renderer.js'][50] = 0;
  _$jscoverage['common/renderer.js'][52] = 0;
  _$jscoverage['common/renderer.js'][53] = 0;
  _$jscoverage['common/renderer.js'][54] = 0;
  _$jscoverage['common/renderer.js'][57] = 0;
  _$jscoverage['common/renderer.js'][58] = 0;
  _$jscoverage['common/renderer.js'][62] = 0;
  _$jscoverage['common/renderer.js'][65] = 0;
  _$jscoverage['common/renderer.js'][67] = 0;
  _$jscoverage['common/renderer.js'][68] = 0;
  _$jscoverage['common/renderer.js'][69] = 0;
  _$jscoverage['common/renderer.js'][72] = 0;
  _$jscoverage['common/renderer.js'][76] = 0;
  _$jscoverage['common/renderer.js'][79] = 0;
  _$jscoverage['common/renderer.js'][80] = 0;
  _$jscoverage['common/renderer.js'][81] = 0;
  _$jscoverage['common/renderer.js'][82] = 0;
  _$jscoverage['common/renderer.js'][86] = 0;
  _$jscoverage['common/renderer.js'][90] = 0;
  _$jscoverage['common/renderer.js'][91] = 0;
  _$jscoverage['common/renderer.js'][95] = 0;
  _$jscoverage['common/renderer.js'][99] = 0;
  _$jscoverage['common/renderer.js'][100] = 0;
  _$jscoverage['common/renderer.js'][102] = 0;
  _$jscoverage['common/renderer.js'][103] = 0;
  _$jscoverage['common/renderer.js'][106] = 0;
  _$jscoverage['common/renderer.js'][107] = 0;
  _$jscoverage['common/renderer.js'][108] = 0;
  _$jscoverage['common/renderer.js'][112] = 0;
  _$jscoverage['common/renderer.js'][115] = 0;
  _$jscoverage['common/renderer.js'][116] = 0;
  _$jscoverage['common/renderer.js'][117] = 0;
  _$jscoverage['common/renderer.js'][118] = 0;
  _$jscoverage['common/renderer.js'][119] = 0;
  _$jscoverage['common/renderer.js'][123] = 0;
  _$jscoverage['common/renderer.js'][125] = 0;
  _$jscoverage['common/renderer.js'][128] = 0;
  _$jscoverage['common/renderer.js'][132] = 0;
  _$jscoverage['common/renderer.js'][133] = 0;
  _$jscoverage['common/renderer.js'][138] = 0;
  _$jscoverage['common/renderer.js'][141] = 0;
  _$jscoverage['common/renderer.js'][142] = 0;
  _$jscoverage['common/renderer.js'][144] = 0;
  _$jscoverage['common/renderer.js'][145] = 0;
  _$jscoverage['common/renderer.js'][151] = 0;
  _$jscoverage['common/renderer.js'][156] = 0;
  _$jscoverage['common/renderer.js'][159] = 0;
  _$jscoverage['common/renderer.js'][160] = 0;
  _$jscoverage['common/renderer.js'][163] = 0;
  _$jscoverage['common/renderer.js'][167] = 0;
  _$jscoverage['common/renderer.js'][168] = 0;
  _$jscoverage['common/renderer.js'][170] = 0;
  _$jscoverage['common/renderer.js'][171] = 0;
  _$jscoverage['common/renderer.js'][173] = 0;
  _$jscoverage['common/renderer.js'][174] = 0;
  _$jscoverage['common/renderer.js'][187] = 0;
  _$jscoverage['common/renderer.js'][195] = 0;
  _$jscoverage['common/renderer.js'][196] = 0;
  _$jscoverage['common/renderer.js'][197] = 0;
  _$jscoverage['common/renderer.js'][198] = 0;
  _$jscoverage['common/renderer.js'][199] = 0;
  _$jscoverage['common/renderer.js'][202] = 0;
  _$jscoverage['common/renderer.js'][203] = 0;
  _$jscoverage['common/renderer.js'][206] = 0;
  _$jscoverage['common/renderer.js'][207] = 0;
  _$jscoverage['common/renderer.js'][210] = 0;
  _$jscoverage['common/renderer.js'][213] = 0;
  _$jscoverage['common/renderer.js'][214] = 0;
  _$jscoverage['common/renderer.js'][215] = 0;
  _$jscoverage['common/renderer.js'][218] = 0;
  _$jscoverage['common/renderer.js'][219] = 0;
  _$jscoverage['common/renderer.js'][220] = 0;
  _$jscoverage['common/renderer.js'][225] = 0;
  _$jscoverage['common/renderer.js'][227] = 0;
  _$jscoverage['common/renderer.js'][229] = 0;
  _$jscoverage['common/renderer.js'][230] = 0;
  _$jscoverage['common/renderer.js'][231] = 0;
  _$jscoverage['common/renderer.js'][233] = 0;
  _$jscoverage['common/renderer.js'][235] = 0;
  _$jscoverage['common/renderer.js'][236] = 0;
  _$jscoverage['common/renderer.js'][237] = 0;
  _$jscoverage['common/renderer.js'][239] = 0;
  _$jscoverage['common/renderer.js'][242] = 0;
  _$jscoverage['common/renderer.js'][247] = 0;
  _$jscoverage['common/renderer.js'][250] = 0;
  _$jscoverage['common/renderer.js'][251] = 0;
  _$jscoverage['common/renderer.js'][252] = 0;
  _$jscoverage['common/renderer.js'][254] = 0;
  _$jscoverage['common/renderer.js'][258] = 0;
  _$jscoverage['common/renderer.js'][261] = 0;
  _$jscoverage['common/renderer.js'][266] = 0;
  _$jscoverage['common/renderer.js'][270] = 0;
  _$jscoverage['common/renderer.js'][271] = 0;
  _$jscoverage['common/renderer.js'][274] = 0;
  _$jscoverage['common/renderer.js'][277] = 0;
  _$jscoverage['common/renderer.js'][279] = 0;
  _$jscoverage['common/renderer.js'][280] = 0;
  _$jscoverage['common/renderer.js'][281] = 0;
  _$jscoverage['common/renderer.js'][282] = 0;
  _$jscoverage['common/renderer.js'][283] = 0;
  _$jscoverage['common/renderer.js'][287] = 0;
  _$jscoverage['common/renderer.js'][289] = 0;
  _$jscoverage['common/renderer.js'][294] = 0;
  _$jscoverage['common/renderer.js'][296] = 0;
  _$jscoverage['common/renderer.js'][297] = 0;
  _$jscoverage['common/renderer.js'][298] = 0;
  _$jscoverage['common/renderer.js'][299] = 0;
  _$jscoverage['common/renderer.js'][300] = 0;
  _$jscoverage['common/renderer.js'][301] = 0;
  _$jscoverage['common/renderer.js'][303] = 0;
  _$jscoverage['common/renderer.js'][306] = 0;
}
_$jscoverage['common/renderer.js'].source = ["define(['underscore'], function (_) {","","    'use strict';","","    return {","","        // Matches an HTML tag in a string of HTML based on an attribute and value.","        getInsertIndex: function (attr, val, html) {","            var regex = new RegExp('&lt;[^&lt;]*' + attr + '+=[\"||\\']' + val + '[\"||\\']+.*?&gt;');","            return html.match(regex);","        },","","        // Gets the HTML based on a rendering directive or a view branch in the directive.","        getHtml: function (directive, key, nodeType) {","            var rootNode,","                self = this,","                html,","                buffer = '',","                isRootNodeContainer = nodeType === 'container',","                retVal,","                match;","","            switch (nodeType) {","                case 'view':","                    rootNode = this.findView(directive, key).parent;","                    break;","                case 'container':","                    rootNode = this.findContainer(directive, key);","                    buffer = '&lt;div ' + this._attrs.compContainerName + '=\"' + key + '\"&gt;&lt;/div&gt;'; // create wrapper; removed before return","                    break;","                default:","                    rootNode = directive;","                    break;","            }","","            function processNode(node, htmlBuffer, nodeKey) {","                var children,","                    nodeType = self._getNodeType(node),","                    viewNode;","","                if (!nodeKey) { // this condition only occurs on the first pass when a view or container is re-rendered on the client","                    htmlBuffer = self._getNodeHtml(node, htmlBuffer);","                }","                if (isRootNodeContainer &amp;&amp; nodeKey) { // container re-render","                    children = node;","                }","","                if (children || (children = self._getChildren(node)).length) {","                    if (isRootNodeContainer &amp;&amp; nodeKey) { // reverse nodes on first pass for container re-render","                        children.reverse();","                    }","                    if (nodeType === 'component' &amp;&amp; children.length &gt; 1) {","                        viewNode = children.reverse().pop(); // need to reverse component order rendering and get view node","                        children.unshift(viewNode); // ensure view is rendered first","                    }","","                    _.each(children, function (child) {","                        htmlBuffer = processNode(child, htmlBuffer);","                    });","                }","","                return htmlBuffer;","            }","","            retVal = processNode(_.extend(rootNode, { parent: this.getParent(rootNode) }), buffer, key);","","            if (isRootNodeContainer) { // the wrapper was programmatically constructed, so it is safe to unwrap it","                match = this.getInsertIndex(this._attrs.compContainerName, key, retVal);","                retVal = retVal.substr(match[0].length, (retVal.length - (match[0].length + 6)));","            }","","            return retVal;","        },","","        attachViews: function (rootNode) {","            var views = this.getList('view', rootNode), // if rootNode is !specified then use last rendered stack","                self = this;","","            _.each(views, function (view) {","                self.attachView(view, $('[' + self._attrs.viewId + '=\"' + view.cid + '\"]')[0]);","                if (_.isFunction(view.attachItemViews)) {","                    view.attachItemViews();","                }","            });","","            return this;","        },","","        attachView: function (view, el) {","            view.setElement(el);","            view.afterRender();","        },","","        getList: function (nodeType, rootNode) {","            var self = this,","                retVal,","                nodes = [];","","            function flatten(nodeType, node, nodes) {","                var children;","","                if (node &amp;&amp; nodeType === self._getNodeType(node)) {","                    nodes.push(node);","                }","","                if ((children = self._getChildren(node)).length) {","                    _.each(children, function (child) {","                        flatten(nodeType, child, nodes);","                    });","                }","","                return nodes;","            }","","            if (nodeType === 'container') {","                _.each(flatten('component', rootNode, []), function (component) {","                    if (component.children) {","                        _.each(component.children, function (container) {","                            nodes.push(_.extend(container, { parent: component }));","                        });","                    }","                });","                return nodes;","            } else {","                retVal = flatten(nodeType, rootNode, []);","            }","","            return retVal;","        },","","        findView: function (rootNode, viewKey) {","            return _.find(this.getList('view', rootNode), function (view) {","                return view.cid === viewKey;","            });","        },","","        findContainer: function (rootNode, containerKey) {","            var containers = this.getList('container', rootNode),","                parentComponentChildren;","","            for (var k in containers) {","                parentComponentChildren = containers[k].parent.children;","","                if (containerKey in parentComponentChildren) {","                    return parentComponentChildren[containerKey];","                }","            }","        },","","        getParent: function (node) {","            return node.parent;","        },","","        // Clean up view DOM bindings and event listeners.","        cleanup: function (rootNode, viewKey) {","            var views = this.getList('view', this.findView(rootNode, viewKey)),","                self = this;","","            _.each(views, function (view) {","                self.cleanupView(view);","            });","","            return this;","        },","","        cleanupView: function (view) {","            if (_.isFunction(view.onRemove)) {","                view.onRemove();","            }","            if (_.isFunction(view._onRemove)) {","                view._onRemove();","            }","            view.stopListening();","            view.undelegateEvents();","        },","","        // Data attribute keys for related HTML tags.","        _attrs: {","            cmpName: 'lazo-cmp-name',","            cmpId: 'lazo-cmp-id',","            compContainerName: 'lazo-cmp-container',","            viewId: 'lazo-view-id'","        },","","        // Inserts a node's html into an HTML string based on its position in the rendering directive.","        _insertNodeHtml: function (node, html) {","            var htmlOpen,","                htmlClose,","                match,","                i = 0,","                siblings,","                nodeType = this._getNodeType(node),","                errMsg;","","            if (nodeType === 'component') {","                if ((siblings = this._getComponentSiblings(node))) {","                    while (!match &amp;&amp; siblings.nodes[i]) { // find index of last cmp added to parent container","                        match = this.getInsertIndex(this._attrs.cmpId, siblings.nodes[i].name, html);","                        i++;","                    }","                }","                if (!match) {","                    match = this.getInsertIndex(this._attrs.compContainerName, siblings.container, html);","                }","            } else { // view","                if (!html.length) { // a view was re-rendered on the client, so it does not have any wrapping html","                    return node.html;","                }","","                match = this.getInsertIndex(this._attrs.cmpId, node.parent.cid, html, 1);","            }","","            if (!match) {","                errMsg = nodeType === 'component' ? ('component ' + node.name) : ('view ' + (node.name || node.cid));","                throw 'The parent node for ' + errMsg + ' was not found.';","            }","","            htmlOpen = html.substr(0, match.index + match[0].length);","            htmlClose = html.substr(match.index + match[0].length);","            return htmlOpen + node.html + htmlClose;","        },","","        // Gets the HTML string representation of a node.","        _getNodeHtml: function (node, html) {","            switch (this._getNodeType(node)) {","                case 'container':","                    return html; // parent node should contain this markup","                case 'component':","                    node.html = '&lt;div ' + this._attrs.cmpName + '=\"' + node.name + '\" ' + this._attrs.cmpId + '=\"' + node.cid + '\"&gt;&lt;/div&gt;';","                    if (!node.parent) { // root component","                        return node.html;","                    }","                    break;","                case 'view':","                    node.html = node.getHtml(); // TODO: possibly only getInnerHtml for root","                    if (node.root) { // get html for a view branch","                        return node.html;","                    }","                    break;","            }","","            return this._insertNodeHtml(node, html);","        },","","        // Gets the siblings of a component including the component passed.","        _getComponentSiblings: function (component) {","            var children = component.parent.children,","                siblings;","","            for (var key in children) {","                if ((siblings = _.find(children[key], function (cmp) {","                    return cmp.cid === component.cid;","                }))) {","                    siblings = {","                        container: key,","                        nodes: children[key]","                    };","                    break;","                }","            }","            return siblings;","        },","","        // Gets the children of a node.","        _getChildren: function (node) {","            var nodes = [],","                self = this,","                childrenKey,","                nodeType = this._getNodeType(node);","            if (!_.size(node)) {","                return nodes;","            }","","            switch (nodeType) {","                case 'view':","                case 'container':","                    return nodes; // just return an empty array","                case 'component':","                    nodes.push(_.extend(node.currentView, { parent: node }));","                    if (node.children) {","                        _.each(node.children, function (container) {","                            nodes = nodes.concat(_.map(container, function (childComponent) {","                                return _.extend(childComponent, { parent: node });","                            }));","                        });","                    }","                    return nodes;","                default:","                    return nodes;","            }","        },","","        _getNodeType: function (node) {","            var ret;","","            if (!node) {","                ret = null;","            } else if (node.currentView) {","                ret = 'component';","            } else if (node.setElement) {","                ret = 'view';","            } else {","                ret = 'container';","            }","","            return ret;","        }","","    };","","});"];
_$jscoverage['common/renderer.js'][1]++;
define(["underscore"], (function (_) {
  _$jscoverage['common/renderer.js'][3]++;
  "use strict";
  _$jscoverage['common/renderer.js'][5]++;
  return ({getInsertIndex: (function (attr, val, html) {
  _$jscoverage['common/renderer.js'][9]++;
  var regex = new RegExp(("<[^<]*" + attr + "+=[\"||']" + val + "[\"||']+.*?>"));
  _$jscoverage['common/renderer.js'][10]++;
  return html.match(regex);
}), getHtml: (function (directive, key, nodeType) {
  _$jscoverage['common/renderer.js'][15]++;
  var rootNode, self = this, html, buffer = "", isRootNodeContainer = (nodeType === "container"), retVal, match;
  _$jscoverage['common/renderer.js'][23]++;
  switch (nodeType) {
  case "view":
    _$jscoverage['common/renderer.js'][25]++;
    rootNode = this.findView(directive, key).parent;
    _$jscoverage['common/renderer.js'][26]++;
    break;
  case "container":
    _$jscoverage['common/renderer.js'][28]++;
    rootNode = this.findContainer(directive, key);
    _$jscoverage['common/renderer.js'][29]++;
    buffer = ("<div " + this._attrs.compContainerName + "=\"" + key + "\"></div>");
    _$jscoverage['common/renderer.js'][30]++;
    break;
  default:
    _$jscoverage['common/renderer.js'][32]++;
    rootNode = directive;
    _$jscoverage['common/renderer.js'][33]++;
    break;
  }
  _$jscoverage['common/renderer.js'][36]++;
  function processNode(node, htmlBuffer, nodeKey) {
    _$jscoverage['common/renderer.js'][37]++;
    var children, nodeType = self._getNodeType(node), viewNode;
    _$jscoverage['common/renderer.js'][41]++;
    if ((! nodeKey)) {
      _$jscoverage['common/renderer.js'][42]++;
      htmlBuffer = self._getNodeHtml(node, htmlBuffer);
    }
    _$jscoverage['common/renderer.js'][44]++;
    if ((isRootNodeContainer && nodeKey)) {
      _$jscoverage['common/renderer.js'][45]++;
      children = node;
    }
    _$jscoverage['common/renderer.js'][48]++;
    if ((children || (children = self._getChildren(node)).length)) {
      _$jscoverage['common/renderer.js'][49]++;
      if ((isRootNodeContainer && nodeKey)) {
        _$jscoverage['common/renderer.js'][50]++;
        children.reverse();
      }
      _$jscoverage['common/renderer.js'][52]++;
      if (((nodeType === "component") && (children.length > 1))) {
        _$jscoverage['common/renderer.js'][53]++;
        viewNode = children.reverse().pop();
        _$jscoverage['common/renderer.js'][54]++;
        children.unshift(viewNode);
      }
      _$jscoverage['common/renderer.js'][57]++;
      _.each(children, (function (child) {
  _$jscoverage['common/renderer.js'][58]++;
  htmlBuffer = processNode(child, htmlBuffer);
}));
    }
    _$jscoverage['common/renderer.js'][62]++;
    return htmlBuffer;
}
  _$jscoverage['common/renderer.js'][65]++;
  retVal = processNode(_.extend(rootNode, {parent: this.getParent(rootNode)}), buffer, key);
  _$jscoverage['common/renderer.js'][67]++;
  if (isRootNodeContainer) {
    _$jscoverage['common/renderer.js'][68]++;
    match = this.getInsertIndex(this._attrs.compContainerName, key, retVal);
    _$jscoverage['common/renderer.js'][69]++;
    retVal = retVal.substr(match[0].length, (retVal.length - (match[0].length + 6)));
  }
  _$jscoverage['common/renderer.js'][72]++;
  return retVal;
}), attachViews: (function (rootNode) {
  _$jscoverage['common/renderer.js'][76]++;
  var views = this.getList("view", rootNode), self = this;
  _$jscoverage['common/renderer.js'][79]++;
  _.each(views, (function (view) {
  _$jscoverage['common/renderer.js'][80]++;
  self.attachView(view, $(("[" + self._attrs.viewId + "=\"" + view.cid + "\"]"))[0]);
  _$jscoverage['common/renderer.js'][81]++;
  if (_.isFunction(view.attachItemViews)) {
    _$jscoverage['common/renderer.js'][82]++;
    view.attachItemViews();
  }
}));
  _$jscoverage['common/renderer.js'][86]++;
  return this;
}), attachView: (function (view, el) {
  _$jscoverage['common/renderer.js'][90]++;
  view.setElement(el);
  _$jscoverage['common/renderer.js'][91]++;
  view.afterRender();
}), getList: (function (nodeType, rootNode) {
  _$jscoverage['common/renderer.js'][95]++;
  var self = this, retVal, nodes = [];
  _$jscoverage['common/renderer.js'][99]++;
  function flatten(nodeType, node, nodes) {
    _$jscoverage['common/renderer.js'][100]++;
    var children;
    _$jscoverage['common/renderer.js'][102]++;
    if ((node && (nodeType === self._getNodeType(node)))) {
      _$jscoverage['common/renderer.js'][103]++;
      nodes.push(node);
    }
    _$jscoverage['common/renderer.js'][106]++;
    if ((children = self._getChildren(node)).length) {
      _$jscoverage['common/renderer.js'][107]++;
      _.each(children, (function (child) {
  _$jscoverage['common/renderer.js'][108]++;
  flatten(nodeType, child, nodes);
}));
    }
    _$jscoverage['common/renderer.js'][112]++;
    return nodes;
}
  _$jscoverage['common/renderer.js'][115]++;
  if ((nodeType === "container")) {
    _$jscoverage['common/renderer.js'][116]++;
    _.each(flatten("component", rootNode, []), (function (component) {
  _$jscoverage['common/renderer.js'][117]++;
  if (component.children) {
    _$jscoverage['common/renderer.js'][118]++;
    _.each(component.children, (function (container) {
  _$jscoverage['common/renderer.js'][119]++;
  nodes.push(_.extend(container, {parent: component}));
}));
  }
}));
    _$jscoverage['common/renderer.js'][123]++;
    return nodes;
  }
  else {
    _$jscoverage['common/renderer.js'][125]++;
    retVal = flatten(nodeType, rootNode, []);
  }
  _$jscoverage['common/renderer.js'][128]++;
  return retVal;
}), findView: (function (rootNode, viewKey) {
  _$jscoverage['common/renderer.js'][132]++;
  return _.find(this.getList("view", rootNode), (function (view) {
  _$jscoverage['common/renderer.js'][133]++;
  return (view.cid === viewKey);
}));
}), findContainer: (function (rootNode, containerKey) {
  _$jscoverage['common/renderer.js'][138]++;
  var containers = this.getList("container", rootNode), parentComponentChildren;
  _$jscoverage['common/renderer.js'][141]++;
  for (var k in containers) {
    _$jscoverage['common/renderer.js'][142]++;
    parentComponentChildren = containers[k].parent.children;
    _$jscoverage['common/renderer.js'][144]++;
    if ((containerKey in parentComponentChildren)) {
      _$jscoverage['common/renderer.js'][145]++;
      return parentComponentChildren[containerKey];
    }
}
}), getParent: (function (node) {
  _$jscoverage['common/renderer.js'][151]++;
  return node.parent;
}), cleanup: (function (rootNode, viewKey) {
  _$jscoverage['common/renderer.js'][156]++;
  var views = this.getList("view", this.findView(rootNode, viewKey)), self = this;
  _$jscoverage['common/renderer.js'][159]++;
  _.each(views, (function (view) {
  _$jscoverage['common/renderer.js'][160]++;
  self.cleanupView(view);
}));
  _$jscoverage['common/renderer.js'][163]++;
  return this;
}), cleanupView: (function (view) {
  _$jscoverage['common/renderer.js'][167]++;
  if (_.isFunction(view.onRemove)) {
    _$jscoverage['common/renderer.js'][168]++;
    view.onRemove();
  }
  _$jscoverage['common/renderer.js'][170]++;
  if (_.isFunction(view._onRemove)) {
    _$jscoverage['common/renderer.js'][171]++;
    view._onRemove();
  }
  _$jscoverage['common/renderer.js'][173]++;
  view.stopListening();
  _$jscoverage['common/renderer.js'][174]++;
  view.undelegateEvents();
}), _attrs: {cmpName: "lazo-cmp-name", cmpId: "lazo-cmp-id", compContainerName: "lazo-cmp-container", viewId: "lazo-view-id"}, _insertNodeHtml: (function (node, html) {
  _$jscoverage['common/renderer.js'][187]++;
  var htmlOpen, htmlClose, match, i = 0, siblings, nodeType = this._getNodeType(node), errMsg;
  _$jscoverage['common/renderer.js'][195]++;
  if ((nodeType === "component")) {
    _$jscoverage['common/renderer.js'][196]++;
    if ((siblings = this._getComponentSiblings(node))) {
      _$jscoverage['common/renderer.js'][197]++;
      while (((! match) && siblings.nodes[i])) {
        _$jscoverage['common/renderer.js'][198]++;
        match = this.getInsertIndex(this._attrs.cmpId, siblings.nodes[i].name, html);
        _$jscoverage['common/renderer.js'][199]++;
        (i++);
}
    }
    _$jscoverage['common/renderer.js'][202]++;
    if ((! match)) {
      _$jscoverage['common/renderer.js'][203]++;
      match = this.getInsertIndex(this._attrs.compContainerName, siblings.container, html);
    }
  }
  else {
    _$jscoverage['common/renderer.js'][206]++;
    if ((! html.length)) {
      _$jscoverage['common/renderer.js'][207]++;
      return node.html;
    }
    _$jscoverage['common/renderer.js'][210]++;
    match = this.getInsertIndex(this._attrs.cmpId, node.parent.cid, html, 1);
  }
  _$jscoverage['common/renderer.js'][213]++;
  if ((! match)) {
    _$jscoverage['common/renderer.js'][214]++;
    errMsg = ((nodeType === "component")? ("component " + node.name): ("view " + (node.name || node.cid)));
    _$jscoverage['common/renderer.js'][215]++;
    throw ("The parent node for " + errMsg + " was not found.");
  }
  _$jscoverage['common/renderer.js'][218]++;
  htmlOpen = html.substr(0, (match.index + match[0].length));
  _$jscoverage['common/renderer.js'][219]++;
  htmlClose = html.substr((match.index + match[0].length));
  _$jscoverage['common/renderer.js'][220]++;
  return (htmlOpen + node.html + htmlClose);
}), _getNodeHtml: (function (node, html) {
  _$jscoverage['common/renderer.js'][225]++;
  switch (this._getNodeType(node)) {
  case "container":
    _$jscoverage['common/renderer.js'][227]++;
    return html;
  case "component":
    _$jscoverage['common/renderer.js'][229]++;
    node.html = ("<div " + this._attrs.cmpName + "=\"" + node.name + "\" " + this._attrs.cmpId + "=\"" + node.cid + "\"></div>");
    _$jscoverage['common/renderer.js'][230]++;
    if ((! node.parent)) {
      _$jscoverage['common/renderer.js'][231]++;
      return node.html;
    }
    _$jscoverage['common/renderer.js'][233]++;
    break;
  case "view":
    _$jscoverage['common/renderer.js'][235]++;
    node.html = node.getHtml();
    _$jscoverage['common/renderer.js'][236]++;
    if (node.root) {
      _$jscoverage['common/renderer.js'][237]++;
      return node.html;
    }
    _$jscoverage['common/renderer.js'][239]++;
    break;
  }
  _$jscoverage['common/renderer.js'][242]++;
  return this._insertNodeHtml(node, html);
}), _getComponentSiblings: (function (component) {
  _$jscoverage['common/renderer.js'][247]++;
  var children = component.parent.children, siblings;
  _$jscoverage['common/renderer.js'][250]++;
  for (var key in children) {
    _$jscoverage['common/renderer.js'][251]++;
    if ((siblings = _.find(children[key], (function (cmp) {
  _$jscoverage['common/renderer.js'][252]++;
  return (cmp.cid === component.cid);
})))) {
      _$jscoverage['common/renderer.js'][254]++;
      siblings = {container: key, nodes: children[key]};
      _$jscoverage['common/renderer.js'][258]++;
      break;
    }
}
  _$jscoverage['common/renderer.js'][261]++;
  return siblings;
}), _getChildren: (function (node) {
  _$jscoverage['common/renderer.js'][266]++;
  var nodes = [], self = this, childrenKey, nodeType = this._getNodeType(node);
  _$jscoverage['common/renderer.js'][270]++;
  if ((! _.size(node))) {
    _$jscoverage['common/renderer.js'][271]++;
    return nodes;
  }
  _$jscoverage['common/renderer.js'][274]++;
  switch (nodeType) {
  case "view":
  case "container":
    _$jscoverage['common/renderer.js'][277]++;
    return nodes;
  case "component":
    _$jscoverage['common/renderer.js'][279]++;
    nodes.push(_.extend(node.currentView, {parent: node}));
    _$jscoverage['common/renderer.js'][280]++;
    if (node.children) {
      _$jscoverage['common/renderer.js'][281]++;
      _.each(node.children, (function (container) {
  _$jscoverage['common/renderer.js'][282]++;
  nodes = nodes.concat(_.map(container, (function (childComponent) {
  _$jscoverage['common/renderer.js'][283]++;
  return _.extend(childComponent, {parent: node});
})));
}));
    }
    _$jscoverage['common/renderer.js'][287]++;
    return nodes;
  default:
    _$jscoverage['common/renderer.js'][289]++;
    return nodes;
  }
}), _getNodeType: (function (node) {
  _$jscoverage['common/renderer.js'][294]++;
  var ret;
  _$jscoverage['common/renderer.js'][296]++;
  if ((! node)) {
    _$jscoverage['common/renderer.js'][297]++;
    ret = null;
  }
  else {
    _$jscoverage['common/renderer.js'][298]++;
    if (node.currentView) {
      _$jscoverage['common/renderer.js'][299]++;
      ret = "component";
    }
    else {
      _$jscoverage['common/renderer.js'][300]++;
      if (node.setElement) {
        _$jscoverage['common/renderer.js'][301]++;
        ret = "view";
      }
      else {
        _$jscoverage['common/renderer.js'][303]++;
        ret = "container";
      }
    }
  }
  _$jscoverage['common/renderer.js'][306]++;
  return ret;
})});
}));
