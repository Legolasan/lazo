/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['client/proxy.js']) {
  _$jscoverage['client/proxy.js'] = [];
  _$jscoverage['client/proxy.js'][1] = 0;
  _$jscoverage['client/proxy.js'][2] = 0;
  _$jscoverage['client/proxy.js'][4] = 0;
  _$jscoverage['client/proxy.js'][7] = 0;
  _$jscoverage['client/proxy.js'][11] = 0;
  _$jscoverage['client/proxy.js'][15] = 0;
  _$jscoverage['client/proxy.js'][18] = 0;
  _$jscoverage['client/proxy.js'][19] = 0;
  _$jscoverage['client/proxy.js'][20] = 0;
  _$jscoverage['client/proxy.js'][21] = 0;
  _$jscoverage['client/proxy.js'][26] = 0;
  _$jscoverage['client/proxy.js'][31] = 0;
  _$jscoverage['client/proxy.js'][32] = 0;
  _$jscoverage['client/proxy.js'][33] = 0;
  _$jscoverage['client/proxy.js'][34] = 0;
  _$jscoverage['client/proxy.js'][37] = 0;
  _$jscoverage['client/proxy.js'][38] = 0;
  _$jscoverage['client/proxy.js'][43] = 0;
  _$jscoverage['client/proxy.js'][44] = 0;
  _$jscoverage['client/proxy.js'][48] = 0;
  _$jscoverage['client/proxy.js'][57] = 0;
  _$jscoverage['client/proxy.js'][63] = 0;
  _$jscoverage['client/proxy.js'][64] = 0;
  _$jscoverage['client/proxy.js'][67] = 0;
  _$jscoverage['client/proxy.js'][72] = 0;
  _$jscoverage['client/proxy.js'][73] = 0;
  _$jscoverage['client/proxy.js'][76] = 0;
  _$jscoverage['client/proxy.js'][78] = 0;
  _$jscoverage['client/proxy.js'][79] = 0;
  _$jscoverage['client/proxy.js'][80] = 0;
  _$jscoverage['client/proxy.js'][85] = 0;
  _$jscoverage['client/proxy.js'][86] = 0;
  _$jscoverage['client/proxy.js'][88] = 0;
  _$jscoverage['client/proxy.js'][91] = 0;
  _$jscoverage['client/proxy.js'][92] = 0;
  _$jscoverage['client/proxy.js'][93] = 0;
  _$jscoverage['client/proxy.js'][94] = 0;
  _$jscoverage['client/proxy.js'][99] = 0;
  _$jscoverage['client/proxy.js'][100] = 0;
  _$jscoverage['client/proxy.js'][101] = 0;
  _$jscoverage['client/proxy.js'][102] = 0;
  _$jscoverage['client/proxy.js'][105] = 0;
  _$jscoverage['client/proxy.js'][106] = 0;
  _$jscoverage['client/proxy.js'][111] = 0;
  _$jscoverage['client/proxy.js'][112] = 0;
  _$jscoverage['client/proxy.js'][116] = 0;
  _$jscoverage['client/proxy.js'][125] = 0;
  _$jscoverage['client/proxy.js'][134] = 0;
  _$jscoverage['client/proxy.js'][135] = 0;
  _$jscoverage['client/proxy.js'][138] = 0;
  _$jscoverage['client/proxy.js'][141] = 0;
  _$jscoverage['client/proxy.js'][143] = 0;
  _$jscoverage['client/proxy.js'][148] = 0;
}
_$jscoverage['client/proxy.js'].source = ["define(['base', 'resolver/model', 'backbone'], function (Base, helpers, Backbone) {","    'use strict';","","    var Proxy = Base.extend({","","        constructor: function(ctx) {","            this.ctx = ctx;","        },","","        sync: function(method, options) {","            var self = this,","                model = this,","                type = helpers.methodMap[method];","","            options = _(options).clone();","","            // Replace options.error with a wrapper.","            var error = options.error;","            options.error = function (jqXHR) {","                if (error) {","                    var resp = {","                        statusCode: jqXHR.status,","                        headers: jqXHR.getAllResponseHeaders(),","                        body: jqXHR.responseText","                    };","                    error(resp);","                }","            };","","            // Replace options.success with a wrapper.","            var success = options.success;","            options.success = function (resp, textStatus, jqXHR) {","                if (!resp || !resp.data) {","                    return options.error(jqXHR);","                }","","                if (success &amp;&amp; resp) {","                    success(resp.data);","                }","            };","","","            if (!this.name) {","                return error({Error: 'This model has no name set.  Cannot call the server'});","            }","","            // Default JSON-request options.","            var params = {","                type:'POST',","                url:'/tunnel',","                dataType:'json',","                contentType:'application/json',","                processData: false","            };","","            // assemble the data for the request","            var data = {","                method: type,","                crumb: self.ctx._rootCtx.cookies.crumb,","                params: this.params","            };","","            if (this instanceof Backbone.Model) {","                data.model = this.name;","            }","            else {","                data.collection = this.name;","            }","","            // include the model in the data bindings for create, update or patch type requests","            //  note that the model attributes will overwrite any bindings if they are named the same","            if (model &amp;&amp; (method === 'create' || method === 'update' || method === 'patch' || method === 'delete')) {","                data.attributes = model.toJSON(options);","            }","","            params.data = JSON.stringify(data);","","            var xhr = $.ajax(_.extend(params, options));","            model.trigger('request', model, xhr, options);","            return xhr;","","        },","","        callSyncher: function(fname, args, options) {","            var self = this;","            var model = this.toJSON();","","            options = _(options).clone();","","            // Replace options.error with a wrapper.","            var error = options.error;","            options.error = function (xhr) {","                if (error) {","                    error(xhr);","                }","            };","","            // Replace options.success with a wrapper.","            var success = options.success;","            options.success = function (resp, textStatus, jqXHR) {","                if (!resp) {","                    return options.error(jqXHR);","                }","","                if (success &amp;&amp; resp) {","                    success(resp);","                }","            };","","","            if (!fname) {","                return options.error({Error: 'Method/function to call not set.'});","            }","","            // Default JSON-request options.","            var params = {","                type:'POST',","                url:'/tunnel',","                dataType:'json',","                contentType:'application/json',","                processData: false","            };","","            // assemble the data for the request","            var data = {","                method: 'NONCRUD',","                crumb: self.ctx._rootCtx.cookies.crumb,","                params: this.params,","                attributes: model,","                fname: fname,","                args:args","            };","","            if (this instanceof Backbone.Model) {","                data.model = this.name;","            }","            else {","                data.collection = this.name;","            }","","            params.data = JSON.stringify(data);","","            var xhr = $.ajax(_.extend(params, options));","        }","","    });","","    return Proxy;","});"];
_$jscoverage['client/proxy.js'][1]++;
define(["base", "resolver/model", "backbone"], (function (Base, helpers, Backbone) {
  _$jscoverage['client/proxy.js'][2]++;
  "use strict";
  _$jscoverage['client/proxy.js'][4]++;
  var Proxy = Base.extend({constructor: (function (ctx) {
  _$jscoverage['client/proxy.js'][7]++;
  this.ctx = ctx;
}), sync: (function (method, options) {
  _$jscoverage['client/proxy.js'][11]++;
  var self = this, model = this, type = helpers.methodMap[method];
  _$jscoverage['client/proxy.js'][15]++;
  options = _(options).clone();
  _$jscoverage['client/proxy.js'][18]++;
  var error = options.error;
  _$jscoverage['client/proxy.js'][19]++;
  options.error = (function (jqXHR) {
  _$jscoverage['client/proxy.js'][20]++;
  if (error) {
    _$jscoverage['client/proxy.js'][21]++;
    var resp = {statusCode: jqXHR.status, headers: jqXHR.getAllResponseHeaders(), body: jqXHR.responseText};
    _$jscoverage['client/proxy.js'][26]++;
    error(resp);
  }
});
  _$jscoverage['client/proxy.js'][31]++;
  var success = options.success;
  _$jscoverage['client/proxy.js'][32]++;
  options.success = (function (resp, textStatus, jqXHR) {
  _$jscoverage['client/proxy.js'][33]++;
  if (((! resp) || (! resp.data))) {
    _$jscoverage['client/proxy.js'][34]++;
    return options.error(jqXHR);
  }
  _$jscoverage['client/proxy.js'][37]++;
  if ((success && resp)) {
    _$jscoverage['client/proxy.js'][38]++;
    success(resp.data);
  }
});
  _$jscoverage['client/proxy.js'][43]++;
  if ((! this.name)) {
    _$jscoverage['client/proxy.js'][44]++;
    return error({Error: "This model has no name set.  Cannot call the server"});
  }
  _$jscoverage['client/proxy.js'][48]++;
  var params = {type: "POST", url: "/tunnel", dataType: "json", contentType: "application/json", processData: false};
  _$jscoverage['client/proxy.js'][57]++;
  var data = {method: type, crumb: self.ctx._rootCtx.cookies.crumb, params: this.params};
  _$jscoverage['client/proxy.js'][63]++;
  if ((this instanceof Backbone.Model)) {
    _$jscoverage['client/proxy.js'][64]++;
    data.model = this.name;
  }
  else {
    _$jscoverage['client/proxy.js'][67]++;
    data.collection = this.name;
  }
  _$jscoverage['client/proxy.js'][72]++;
  if ((model && ((method === "create") || (method === "update") || (method === "patch") || (method === "delete")))) {
    _$jscoverage['client/proxy.js'][73]++;
    data.attributes = model.toJSON(options);
  }
  _$jscoverage['client/proxy.js'][76]++;
  params.data = JSON.stringify(data);
  _$jscoverage['client/proxy.js'][78]++;
  var xhr = $.ajax(_.extend(params, options));
  _$jscoverage['client/proxy.js'][79]++;
  model.trigger("request", model, xhr, options);
  _$jscoverage['client/proxy.js'][80]++;
  return xhr;
}), callSyncher: (function (fname, args, options) {
  _$jscoverage['client/proxy.js'][85]++;
  var self = this;
  _$jscoverage['client/proxy.js'][86]++;
  var model = this.toJSON();
  _$jscoverage['client/proxy.js'][88]++;
  options = _(options).clone();
  _$jscoverage['client/proxy.js'][91]++;
  var error = options.error;
  _$jscoverage['client/proxy.js'][92]++;
  options.error = (function (xhr) {
  _$jscoverage['client/proxy.js'][93]++;
  if (error) {
    _$jscoverage['client/proxy.js'][94]++;
    error(xhr);
  }
});
  _$jscoverage['client/proxy.js'][99]++;
  var success = options.success;
  _$jscoverage['client/proxy.js'][100]++;
  options.success = (function (resp, textStatus, jqXHR) {
  _$jscoverage['client/proxy.js'][101]++;
  if ((! resp)) {
    _$jscoverage['client/proxy.js'][102]++;
    return options.error(jqXHR);
  }
  _$jscoverage['client/proxy.js'][105]++;
  if ((success && resp)) {
    _$jscoverage['client/proxy.js'][106]++;
    success(resp);
  }
});
  _$jscoverage['client/proxy.js'][111]++;
  if ((! fname)) {
    _$jscoverage['client/proxy.js'][112]++;
    return options.error({Error: "Method/function to call not set."});
  }
  _$jscoverage['client/proxy.js'][116]++;
  var params = {type: "POST", url: "/tunnel", dataType: "json", contentType: "application/json", processData: false};
  _$jscoverage['client/proxy.js'][125]++;
  var data = {method: "NONCRUD", crumb: self.ctx._rootCtx.cookies.crumb, params: this.params, attributes: model, fname: fname, args: args};
  _$jscoverage['client/proxy.js'][134]++;
  if ((this instanceof Backbone.Model)) {
    _$jscoverage['client/proxy.js'][135]++;
    data.model = this.name;
  }
  else {
    _$jscoverage['client/proxy.js'][138]++;
    data.collection = this.name;
  }
  _$jscoverage['client/proxy.js'][141]++;
  params.data = JSON.stringify(data);
  _$jscoverage['client/proxy.js'][143]++;
  var xhr = $.ajax(_.extend(params, options));
})});
  _$jscoverage['client/proxy.js'][148]++;
  return Proxy;
}));
