/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['client/rehydrate/view.js']) {
  _$jscoverage['client/rehydrate/view.js'] = [];
  _$jscoverage['client/rehydrate/view.js'][1] = 0;
  _$jscoverage['client/rehydrate/view.js'][4] = 0;
  _$jscoverage['client/rehydrate/view.js'][7] = 0;
  _$jscoverage['client/rehydrate/view.js'][8] = 0;
  _$jscoverage['client/rehydrate/view.js'][9] = 0;
  _$jscoverage['client/rehydrate/view.js'][16] = 0;
  _$jscoverage['client/rehydrate/view.js'][22] = 0;
  _$jscoverage['client/rehydrate/view.js'][23] = 0;
  _$jscoverage['client/rehydrate/view.js'][24] = 0;
  _$jscoverage['client/rehydrate/view.js'][25] = 0;
  _$jscoverage['client/rehydrate/view.js'][28] = 0;
  _$jscoverage['client/rehydrate/view.js'][29] = 0;
  _$jscoverage['client/rehydrate/view.js'][30] = 0;
  _$jscoverage['client/rehydrate/view.js'][31] = 0;
  _$jscoverage['client/rehydrate/view.js'][33] = 0;
  _$jscoverage['client/rehydrate/view.js'][37] = 0;
  _$jscoverage['client/rehydrate/view.js'][42] = 0;
  _$jscoverage['client/rehydrate/view.js'][43] = 0;
  _$jscoverage['client/rehydrate/view.js'][49] = 0;
  _$jscoverage['client/rehydrate/view.js'][50] = 0;
  _$jscoverage['client/rehydrate/view.js'][54] = 0;
  _$jscoverage['client/rehydrate/view.js'][55] = 0;
  _$jscoverage['client/rehydrate/view.js'][56] = 0;
  _$jscoverage['client/rehydrate/view.js'][60] = 0;
  _$jscoverage['client/rehydrate/view.js'][61] = 0;
  _$jscoverage['client/rehydrate/view.js'][62] = 0;
  _$jscoverage['client/rehydrate/view.js'][63] = 0;
  _$jscoverage['client/rehydrate/view.js'][64] = 0;
  _$jscoverage['client/rehydrate/view.js'][65] = 0;
  _$jscoverage['client/rehydrate/view.js'][69] = 0;
  _$jscoverage['client/rehydrate/view.js'][70] = 0;
  _$jscoverage['client/rehydrate/view.js'][71] = 0;
  _$jscoverage['client/rehydrate/view.js'][72] = 0;
  _$jscoverage['client/rehydrate/view.js'][73] = 0;
  _$jscoverage['client/rehydrate/view.js'][76] = 0;
  _$jscoverage['client/rehydrate/view.js'][77] = 0;
  _$jscoverage['client/rehydrate/view.js'][78] = 0;
  _$jscoverage['client/rehydrate/view.js'][81] = 0;
  _$jscoverage['client/rehydrate/view.js'][85] = 0;
  _$jscoverage['client/rehydrate/view.js'][86] = 0;
  _$jscoverage['client/rehydrate/view.js'][87] = 0;
  _$jscoverage['client/rehydrate/view.js'][90] = 0;
  _$jscoverage['client/rehydrate/view.js'][91] = 0;
  _$jscoverage['client/rehydrate/view.js'][92] = 0;
  _$jscoverage['client/rehydrate/view.js'][94] = 0;
  _$jscoverage['client/rehydrate/view.js'][98] = 0;
  _$jscoverage['client/rehydrate/view.js'][99] = 0;
  _$jscoverage['client/rehydrate/view.js'][103] = 0;
  _$jscoverage['client/rehydrate/view.js'][104] = 0;
  _$jscoverage['client/rehydrate/view.js'][106] = 0;
  _$jscoverage['client/rehydrate/view.js'][107] = 0;
  _$jscoverage['client/rehydrate/view.js'][108] = 0;
  _$jscoverage['client/rehydrate/view.js'][109] = 0;
  _$jscoverage['client/rehydrate/view.js'][110] = 0;
  _$jscoverage['client/rehydrate/view.js'][112] = 0;
  _$jscoverage['client/rehydrate/view.js'][117] = 0;
  _$jscoverage['client/rehydrate/view.js'][118] = 0;
  _$jscoverage['client/rehydrate/view.js'][119] = 0;
  _$jscoverage['client/rehydrate/view.js'][120] = 0;
  _$jscoverage['client/rehydrate/view.js'][121] = 0;
  _$jscoverage['client/rehydrate/view.js'][122] = 0;
  _$jscoverage['client/rehydrate/view.js'][124] = 0;
  _$jscoverage['client/rehydrate/view.js'][125] = 0;
}
_$jscoverage['client/rehydrate/view.js'].source = ["define(['lazoView', 'lazoCollectionView', 'async', 'resolver/file', 'utils/module', 'utils/template'],","    function (LazoView, LazoCollectionView, async, file, module, template) {","","    'use strict';","","    // loads template engine into the engine defs hash if has not already been defined","    function resolveTemplateEngine(view, callback) {","        var engineName = view.prototype.templateEngine || LAZO.app.getDefaultTemplateEngineName();","        template.loadTemplateEngine({","            name: engineName,","            handler: template.engHandlerMaker(engineName),","            exp: null,","            extension: template.getDefaultExt(engineName)","        }, {","            success: function () {","                callback(null, view);","            }","        });","    }","","    // TODO: load precompiled templates","    function createLoader(modulePath, type, isBase) {","        return function (callback) {","            if (isBase) {","                return callback(null, LazoView);","            }","","            modulePath = type === 'template' ? 'text!' + modulePath : modulePath;","            LAZO.require([modulePath], function (module) {","                if (type === 'view') {","                   resolveTemplateEngine(module, callback);","                } else {","                    callback(null, module);","                }","","            }, function (err) {","                return callback(new Error('rehydrate createLoader LAZO.require failed for ' + modulePath + ' : ' + err.message), null);","            });","        };","    }","","    return function (ctl, cmpDef, callback) {","        var viewDef,","            tasks = {},","            itemDefs,","            modulePath,","            i;","","        if (!(viewDef = cmpDef.currentView)) {","            return callback();","        }","","        // TODO: change viewDef.ref to viewDef.path","        tasks[viewDef.name + '_view'] = createLoader(viewDef.ref, 'view', viewDef.isBase);","        if (viewDef.hasTemplate) {","            tasks[viewDef.name + '_template'] = createLoader(viewDef.templatePath, 'template');","        }","","        // collection item view constructors","        itemDefs = viewDef._itemEmptyViewConstructors;","        i = itemDefs ? itemDefs.length : 0;","        while (i) {","            i--;","            modulePath = file.getPath(itemDefs[i], ctl.name, 'view');","            tasks[itemDefs[i] + '_view'] = createLoader(modulePath, 'view');","        }","","        // collection item view templates; TODO: load precompiled templates","        itemDefs = viewDef._itemEmptyViewTemplates;","        i = itemDefs ? itemDefs.length : 0;","        while (i) {","            i--;","            tasks[itemDefs[i].name + '_template'] = createLoader(itemDefs[i].path, 'template');","        }","","        async.parallel(tasks, function (err, modules) {","            if (err) {","                return options.error(err);","            }","","            var view,","                interval,","                widgetTasks = [];","","            function loadWidgets(widgetTasks, callback) { // modelRehydrate module callback","                if (!widgetTasks.length) {","                    return callback(null);","                }","","                async.parallel(widgetTasks, function (err, w) {","                    if (err) {","                        return callback(err);","                    }","                    return callback(null);","                });","            }","","            function addItemViewsTemplates(modules, view, viewDef, widgetTasks) {","                var index,","                    isView,","                    moduleName;","","                for (var key in modules) {","                    if (key !== viewDef.name + '_view' &amp;&amp;","                        key !== file.getTemplateName(view) + '_template') {","                        index = key.indexOf('_view');","                        isView = index !== -1;","                        index = isView ? index : key.indexOf('_template');","                        if (isView) {","                            module.addLoadWidgetFuncs(modules[key].prototype, ctl.ctx, widgetTasks);","                        }","                        view[isView ? '_itemEmptyViewConstructors' : '_itemEmptyViewTemplates'][key.substr(0, index)] = modules[key];","                    }","                }","            }","","            ctl.currentView = view = ctl._createView(modules[viewDef.name + '_view'], viewDef);","            ctl.currentView.template = view._templateEngine.compile(modules[viewDef.name + '_template']);","            if (viewDef._itemEmptyViewConstructors) {","                view._itemEmptyViewConstructors = {};","                view._itemEmptyViewTemplates = {};","                addItemViewsTemplates(modules, view, viewDef, widgetTasks);","            }","            module.addLoadWidgetFuncs(view, ctl.ctx, widgetTasks);","            loadWidgets(widgetTasks, callback);","        });","    };","","});"];
_$jscoverage['client/rehydrate/view.js'][1]++;
define(["lazoView", "lazoCollectionView", "async", "resolver/file", "utils/module", "utils/template"], (function (LazoView, LazoCollectionView, async, file, module, template) {
  _$jscoverage['client/rehydrate/view.js'][4]++;
  "use strict";
  _$jscoverage['client/rehydrate/view.js'][7]++;
  function resolveTemplateEngine(view, callback) {
    _$jscoverage['client/rehydrate/view.js'][8]++;
    var engineName = (view.prototype.templateEngine || LAZO.app.getDefaultTemplateEngineName());
    _$jscoverage['client/rehydrate/view.js'][9]++;
    template.loadTemplateEngine({name: engineName, handler: template.engHandlerMaker(engineName), exp: null, extension: template.getDefaultExt(engineName)}, {success: (function () {
  _$jscoverage['client/rehydrate/view.js'][16]++;
  callback(null, view);
})});
}
  _$jscoverage['client/rehydrate/view.js'][22]++;
  function createLoader(modulePath, type, isBase) {
    _$jscoverage['client/rehydrate/view.js'][23]++;
    return (function (callback) {
  _$jscoverage['client/rehydrate/view.js'][24]++;
  if (isBase) {
    _$jscoverage['client/rehydrate/view.js'][25]++;
    return callback(null, LazoView);
  }
  _$jscoverage['client/rehydrate/view.js'][28]++;
  modulePath = ((type === "template")? ("text!" + modulePath): modulePath);
  _$jscoverage['client/rehydrate/view.js'][29]++;
  LAZO.require([modulePath], (function (module) {
  _$jscoverage['client/rehydrate/view.js'][30]++;
  if ((type === "view")) {
    _$jscoverage['client/rehydrate/view.js'][31]++;
    resolveTemplateEngine(module, callback);
  }
  else {
    _$jscoverage['client/rehydrate/view.js'][33]++;
    callback(null, module);
  }
}), (function (err) {
  _$jscoverage['client/rehydrate/view.js'][37]++;
  return callback(new Error(("rehydrate createLoader LAZO.require failed for " + modulePath + " : " + err.message)), null);
}));
});
}
  _$jscoverage['client/rehydrate/view.js'][42]++;
  return (function (ctl, cmpDef, callback) {
  _$jscoverage['client/rehydrate/view.js'][43]++;
  var viewDef, tasks = {}, itemDefs, modulePath, i;
  _$jscoverage['client/rehydrate/view.js'][49]++;
  if ((! (viewDef = cmpDef.currentView))) {
    _$jscoverage['client/rehydrate/view.js'][50]++;
    return callback();
  }
  _$jscoverage['client/rehydrate/view.js'][54]++;
  tasks[(viewDef.name + "_view")] = createLoader(viewDef.ref, "view", viewDef.isBase);
  _$jscoverage['client/rehydrate/view.js'][55]++;
  if (viewDef.hasTemplate) {
    _$jscoverage['client/rehydrate/view.js'][56]++;
    tasks[(viewDef.name + "_template")] = createLoader(viewDef.templatePath, "template");
  }
  _$jscoverage['client/rehydrate/view.js'][60]++;
  itemDefs = viewDef._itemEmptyViewConstructors;
  _$jscoverage['client/rehydrate/view.js'][61]++;
  i = (itemDefs? itemDefs.length: 0);
  _$jscoverage['client/rehydrate/view.js'][62]++;
  while (i) {
    _$jscoverage['client/rehydrate/view.js'][63]++;
    (i--);
    _$jscoverage['client/rehydrate/view.js'][64]++;
    modulePath = file.getPath(itemDefs[i], ctl.name, "view");
    _$jscoverage['client/rehydrate/view.js'][65]++;
    tasks[(itemDefs[i] + "_view")] = createLoader(modulePath, "view");
}
  _$jscoverage['client/rehydrate/view.js'][69]++;
  itemDefs = viewDef._itemEmptyViewTemplates;
  _$jscoverage['client/rehydrate/view.js'][70]++;
  i = (itemDefs? itemDefs.length: 0);
  _$jscoverage['client/rehydrate/view.js'][71]++;
  while (i) {
    _$jscoverage['client/rehydrate/view.js'][72]++;
    (i--);
    _$jscoverage['client/rehydrate/view.js'][73]++;
    tasks[(itemDefs[i].name + "_template")] = createLoader(itemDefs[i].path, "template");
}
  _$jscoverage['client/rehydrate/view.js'][76]++;
  async.parallel(tasks, (function (err, modules) {
  _$jscoverage['client/rehydrate/view.js'][77]++;
  if (err) {
    _$jscoverage['client/rehydrate/view.js'][78]++;
    return options.error(err);
  }
  _$jscoverage['client/rehydrate/view.js'][81]++;
  var view, interval, widgetTasks = [];
  _$jscoverage['client/rehydrate/view.js'][85]++;
  function loadWidgets(widgetTasks, callback) {
    _$jscoverage['client/rehydrate/view.js'][86]++;
    if ((! widgetTasks.length)) {
      _$jscoverage['client/rehydrate/view.js'][87]++;
      return callback(null);
    }
    _$jscoverage['client/rehydrate/view.js'][90]++;
    async.parallel(widgetTasks, (function (err, w) {
  _$jscoverage['client/rehydrate/view.js'][91]++;
  if (err) {
    _$jscoverage['client/rehydrate/view.js'][92]++;
    return callback(err);
  }
  _$jscoverage['client/rehydrate/view.js'][94]++;
  return callback(null);
}));
}
  _$jscoverage['client/rehydrate/view.js'][98]++;
  function addItemViewsTemplates(modules, view, viewDef, widgetTasks) {
    _$jscoverage['client/rehydrate/view.js'][99]++;
    var index, isView, moduleName;
    _$jscoverage['client/rehydrate/view.js'][103]++;
    for (var key in modules) {
      _$jscoverage['client/rehydrate/view.js'][104]++;
      if (((key !== (viewDef.name + "_view")) && (key !== (file.getTemplateName(view) + "_template")))) {
        _$jscoverage['client/rehydrate/view.js'][106]++;
        index = key.indexOf("_view");
        _$jscoverage['client/rehydrate/view.js'][107]++;
        isView = (index !== -1);
        _$jscoverage['client/rehydrate/view.js'][108]++;
        index = (isView? index: key.indexOf("_template"));
        _$jscoverage['client/rehydrate/view.js'][109]++;
        if (isView) {
          _$jscoverage['client/rehydrate/view.js'][110]++;
          module.addLoadWidgetFuncs(modules[key].prototype, ctl.ctx, widgetTasks);
        }
        _$jscoverage['client/rehydrate/view.js'][112]++;
        view[(isView? "_itemEmptyViewConstructors": "_itemEmptyViewTemplates")][key.substr(0, index)] = modules[key];
      }
}
}
  _$jscoverage['client/rehydrate/view.js'][117]++;
  ctl.currentView = (view = ctl._createView(modules[(viewDef.name + "_view")], viewDef));
  _$jscoverage['client/rehydrate/view.js'][118]++;
  ctl.currentView.template = view._templateEngine.compile(modules[(viewDef.name + "_template")]);
  _$jscoverage['client/rehydrate/view.js'][119]++;
  if (viewDef._itemEmptyViewConstructors) {
    _$jscoverage['client/rehydrate/view.js'][120]++;
    view._itemEmptyViewConstructors = {};
    _$jscoverage['client/rehydrate/view.js'][121]++;
    view._itemEmptyViewTemplates = {};
    _$jscoverage['client/rehydrate/view.js'][122]++;
    addItemViewsTemplates(modules, view, viewDef, widgetTasks);
  }
  _$jscoverage['client/rehydrate/view.js'][124]++;
  module.addLoadWidgetFuncs(view, ctl.ctx, widgetTasks);
  _$jscoverage['client/rehydrate/view.js'][125]++;
  loadWidgets(widgetTasks, callback);
}));
});
}));
