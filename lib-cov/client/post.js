/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['client/post.js']) {
  _$jscoverage['client/post.js'] = [];
  _$jscoverage['client/post.js'][1] = 0;
  _$jscoverage['client/post.js'][4] = 0;
  _$jscoverage['client/post.js'][6] = 0;
  _$jscoverage['client/post.js'][7] = 0;
  _$jscoverage['client/post.js'][11] = 0;
  _$jscoverage['client/post.js'][12] = 0;
  _$jscoverage['client/post.js'][13] = 0;
  _$jscoverage['client/post.js'][14] = 0;
  _$jscoverage['client/post.js'][15] = 0;
  _$jscoverage['client/post.js'][16] = 0;
  _$jscoverage['client/post.js'][17] = 0;
  _$jscoverage['client/post.js'][18] = 0;
  _$jscoverage['client/post.js'][19] = 0;
  _$jscoverage['client/post.js'][20] = 0;
  _$jscoverage['client/post.js'][23] = 0;
  _$jscoverage['client/post.js'][24] = 0;
  _$jscoverage['client/post.js'][27] = 0;
  _$jscoverage['client/post.js'][32] = 0;
  _$jscoverage['client/post.js'][33] = 0;
  _$jscoverage['client/post.js'][47] = 0;
  _$jscoverage['client/post.js'][48] = 0;
  _$jscoverage['client/post.js'][52] = 0;
  _$jscoverage['client/post.js'][53] = 0;
  _$jscoverage['client/post.js'][54] = 0;
  _$jscoverage['client/post.js'][57] = 0;
  _$jscoverage['client/post.js'][65] = 0;
  _$jscoverage['client/post.js'][67] = 0;
  _$jscoverage['client/post.js'][70] = 0;
  _$jscoverage['client/post.js'][71] = 0;
  _$jscoverage['client/post.js'][74] = 0;
  _$jscoverage['client/post.js'][75] = 0;
  _$jscoverage['client/post.js'][76] = 0;
  _$jscoverage['client/post.js'][77] = 0;
  _$jscoverage['client/post.js'][80] = 0;
  _$jscoverage['client/post.js'][81] = 0;
  _$jscoverage['client/post.js'][82] = 0;
  _$jscoverage['client/post.js'][85] = 0;
  _$jscoverage['client/post.js'][86] = 0;
  _$jscoverage['client/post.js'][87] = 0;
  _$jscoverage['client/post.js'][90] = 0;
  _$jscoverage['client/post.js'][91] = 0;
  _$jscoverage['client/post.js'][92] = 0;
  _$jscoverage['client/post.js'][95] = 0;
  _$jscoverage['client/post.js'][96] = 0;
  _$jscoverage['client/post.js'][97] = 0;
  _$jscoverage['client/post.js'][98] = 0;
  _$jscoverage['client/post.js'][99] = 0;
  _$jscoverage['client/post.js'][100] = 0;
  _$jscoverage['client/post.js'][101] = 0;
  _$jscoverage['client/post.js'][102] = 0;
}
_$jscoverage['client/post.js'].source = ["define(['jquery', 'underscore', 'rehydrate/main', 'lib/client/state', 'utils/document', 'lib/client/prime', 'renderer', 'context'],","    function ($, _, rehydrate, state, doc, prime, renderer, Context) {","","    'use strict';","","    function destroy(ctl) {","        var children = ctl.children || {},","            components = renderer.getList('component', ctl),","            i = components.length;","","        while (i) {","            i--;","            try {","                renderer.cleanupView(components[i].currentView);","                components[i].currentView.remove();","                components[i]._getEl().remove();","                for (var key in components[i]) {","                    if (key === 'currentView') {","                        components[i][key].el = null;","                        components[i][key].$el = null;","                    }","","                    components[i][key] = null;","                    delete components[i][key];","                }","            } catch (e) {","                LAZO.logger.log(e);","            }","        }","    }","","    return function (eventData) {","        $.ajax({","            type: 'POST',","            url: window.location, // this is updated during the push state","            dataType:'json',","            contentType:'application/json',","            processData: false,","            data: JSON.stringify({","                _lazo: {","                    exclude: _.uniq(requirejs.getLoadedModuleNames()),","                    layout: LAZO.layout","                },","                crumb: LAZO.app._getCrumb(),","            }),","            error: function (jqXHR, textStatus, errorThrown) {","                LAZO.error.render(JSON.parse(jqXHR.responseText));","                LAZO.app.trigger('navigate:application:error', eventData);","            },","            success: function (response) {","                ","                if (response.redirect) {","                    window.location = response.redirect;","                    return;","                }","                ","                var rootCtx = response.root,","                    cmpDef = response.component,","                    css,","                    // either layout has been removed, added, changed, or there was and is not a layout","                    hasRootCtlChanged = LAZO.layout !== response.layout || (!LAZO.layout &amp;&amp; !response.layout),","                    modules = rootCtx.dependencies.modules ? rootCtx.dependencies.modules : rootCtx.modules,","                    wait = rootCtx.dependencies.modules ? true : false;","","                LAZO.app.trigger('navigate:application:response', eventData);","","                rootCtx.dependencies.css = hasRootCtlChanged ? rootCtx.dependencies.css :","                    _.union(LAZO.ctl.ctx._rootCtx.dependencies.css, rootCtx.dependencies.css);","","                if (hasRootCtlChanged) {","                    LAZO.layout = response.layout;","                }","","                LAZO.crumb = rootCtx.cookies.crumb; // reset crumb","                state.set(cmpDef, rootCtx); // push state object to history","                css = state.getAddRemoveLinks(); // get add, remove css","                prime(css.add, 'css', false); // prefetch css","                // if rootCtx.dependencies.modules then combo handled and we need to wait on response","                // else prefetch modules so that they are loading in parallel while rehydrate runs","                prime(modules, 'js', wait, function (err) {","                    if (err) {","                        return; // TODO: throw error","                    }","","                    Context.mergeGlobalModels(rootCtx, LAZO.ctl.ctx._rootCtx);","                    rehydrate(cmpDef, rootCtx, function (ctl) {","                        var $target = $('body'),","                            html = renderer.getHtml(ctl);","","                        destroy(LAZO.ctl); // clean up previous root controller","                        delete LAZO.ctl;","                        LAZO.ctl = ctl; // assign new controller","","                        // keep dimensions, but hide content so that new css updating does not cause any display issues","                        $target.css({ 'visibility': 'hidden' });","                        doc.updateCss(css.add, css.remove, function () {","                            $target.html(html);","                            setTimeout(function () {","                                $target.css({ 'visibility': 'visible'} );","                                renderer.attachViews(ctl);","                                doc.setTitle(LAZO.ctl.ctx._rootCtx.pageTitle);","                                LAZO.app.trigger('navigate:application:complete', eventData);","                            }, 0);","                        });","                    });","                });","            }","        });","    };","","});"];
_$jscoverage['client/post.js'][1]++;
define(["jquery", "underscore", "rehydrate/main", "lib/client/state", "utils/document", "lib/client/prime", "renderer", "context"], (function ($, _, rehydrate, state, doc, prime, renderer, Context) {
  _$jscoverage['client/post.js'][4]++;
  "use strict";
  _$jscoverage['client/post.js'][6]++;
  function destroy(ctl) {
    _$jscoverage['client/post.js'][7]++;
    var children = (ctl.children || {}), components = renderer.getList("component", ctl), i = components.length;
    _$jscoverage['client/post.js'][11]++;
    while (i) {
      _$jscoverage['client/post.js'][12]++;
      (i--);
      _$jscoverage['client/post.js'][13]++;
      try {
        _$jscoverage['client/post.js'][14]++;
        renderer.cleanupView(components[i].currentView);
        _$jscoverage['client/post.js'][15]++;
        components[i].currentView.remove();
        _$jscoverage['client/post.js'][16]++;
        components[i]._getEl().remove();
        _$jscoverage['client/post.js'][17]++;
        for (var key in components[i]) {
          _$jscoverage['client/post.js'][18]++;
          if ((key === "currentView")) {
            _$jscoverage['client/post.js'][19]++;
            components[i][key].el = null;
            _$jscoverage['client/post.js'][20]++;
            components[i][key].$el = null;
          }
          _$jscoverage['client/post.js'][23]++;
          components[i][key] = null;
          _$jscoverage['client/post.js'][24]++;
          (delete components[i][key]);
}
      }
      catch (e) {
        _$jscoverage['client/post.js'][27]++;
        LAZO.logger.log(e);
      }
}
}
  _$jscoverage['client/post.js'][32]++;
  return (function (eventData) {
  _$jscoverage['client/post.js'][33]++;
  $.ajax({type: "POST", url: window.location, dataType: "json", contentType: "application/json", processData: false, data: JSON.stringify({_lazo: {exclude: _.uniq(requirejs.getLoadedModuleNames()), layout: LAZO.layout}, crumb: LAZO.app._getCrumb()}), error: (function (jqXHR, textStatus, errorThrown) {
  _$jscoverage['client/post.js'][47]++;
  LAZO.error.render(JSON.parse(jqXHR.responseText));
  _$jscoverage['client/post.js'][48]++;
  LAZO.app.trigger("navigate:application:error", eventData);
}), success: (function (response) {
  _$jscoverage['client/post.js'][52]++;
  if (response.redirect) {
    _$jscoverage['client/post.js'][53]++;
    window.location = response.redirect;
    _$jscoverage['client/post.js'][54]++;
    return;
  }
  _$jscoverage['client/post.js'][57]++;
  var rootCtx = response.root, cmpDef = response.component, css, hasRootCtlChanged = ((LAZO.layout !== response.layout) || ((! LAZO.layout) && (! response.layout))), modules = (rootCtx.dependencies.modules? rootCtx.dependencies.modules: rootCtx.modules), wait = (rootCtx.dependencies.modules? true: false);
  _$jscoverage['client/post.js'][65]++;
  LAZO.app.trigger("navigate:application:response", eventData);
  _$jscoverage['client/post.js'][67]++;
  rootCtx.dependencies.css = (hasRootCtlChanged? rootCtx.dependencies.css: _.union(LAZO.ctl.ctx._rootCtx.dependencies.css, rootCtx.dependencies.css));
  _$jscoverage['client/post.js'][70]++;
  if (hasRootCtlChanged) {
    _$jscoverage['client/post.js'][71]++;
    LAZO.layout = response.layout;
  }
  _$jscoverage['client/post.js'][74]++;
  LAZO.crumb = rootCtx.cookies.crumb;
  _$jscoverage['client/post.js'][75]++;
  state.set(cmpDef, rootCtx);
  _$jscoverage['client/post.js'][76]++;
  css = state.getAddRemoveLinks();
  _$jscoverage['client/post.js'][77]++;
  prime(css.add, "css", false);
  _$jscoverage['client/post.js'][80]++;
  prime(modules, "js", wait, (function (err) {
  _$jscoverage['client/post.js'][81]++;
  if (err) {
    _$jscoverage['client/post.js'][82]++;
    return;
  }
  _$jscoverage['client/post.js'][85]++;
  Context.mergeGlobalModels(rootCtx, LAZO.ctl.ctx._rootCtx);
  _$jscoverage['client/post.js'][86]++;
  rehydrate(cmpDef, rootCtx, (function (ctl) {
  _$jscoverage['client/post.js'][87]++;
  var $target = $("body"), html = renderer.getHtml(ctl);
  _$jscoverage['client/post.js'][90]++;
  destroy(LAZO.ctl);
  _$jscoverage['client/post.js'][91]++;
  (delete LAZO.ctl);
  _$jscoverage['client/post.js'][92]++;
  LAZO.ctl = ctl;
  _$jscoverage['client/post.js'][95]++;
  $target.css({"visibility": "hidden"});
  _$jscoverage['client/post.js'][96]++;
  doc.updateCss(css.add, css.remove, (function () {
  _$jscoverage['client/post.js'][97]++;
  $target.html(html);
  _$jscoverage['client/post.js'][98]++;
  setTimeout((function () {
  _$jscoverage['client/post.js'][99]++;
  $target.css({"visibility": "visible"});
  _$jscoverage['client/post.js'][100]++;
  renderer.attachViews(ctl);
  _$jscoverage['client/post.js'][101]++;
  doc.setTitle(LAZO.ctl.ctx._rootCtx.pageTitle);
  _$jscoverage['client/post.js'][102]++;
  LAZO.app.trigger("navigate:application:complete", eventData);
}), 0);
}));
}));
}));
})});
});
}));
