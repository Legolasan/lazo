/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['server/jitc/css.js']) {
  _$jscoverage['server/jitc/css.js'] = [];
  _$jscoverage['server/jitc/css.js'][1] = 0;
  _$jscoverage['server/jitc/css.js'][3] = 0;
  _$jscoverage['server/jitc/css.js'][5] = 0;
  _$jscoverage['server/jitc/css.js'][10] = 0;
  _$jscoverage['server/jitc/css.js'][11] = 0;
  _$jscoverage['server/jitc/css.js'][14] = 0;
  _$jscoverage['server/jitc/css.js'][15] = 0;
  _$jscoverage['server/jitc/css.js'][19] = 0;
  _$jscoverage['server/jitc/css.js'][22] = 0;
  _$jscoverage['server/jitc/css.js'][28] = 0;
  _$jscoverage['server/jitc/css.js'][29] = 0;
  _$jscoverage['server/jitc/css.js'][32] = 0;
  _$jscoverage['server/jitc/css.js'][33] = 0;
  _$jscoverage['server/jitc/css.js'][35] = 0;
  _$jscoverage['server/jitc/css.js'][36] = 0;
  _$jscoverage['server/jitc/css.js'][38] = 0;
  _$jscoverage['server/jitc/css.js'][39] = 0;
  _$jscoverage['server/jitc/css.js'][40] = 0;
  _$jscoverage['server/jitc/css.js'][41] = 0;
  _$jscoverage['server/jitc/css.js'][42] = 0;
  _$jscoverage['server/jitc/css.js'][45] = 0;
  _$jscoverage['server/jitc/css.js'][46] = 0;
  _$jscoverage['server/jitc/css.js'][47] = 0;
  _$jscoverage['server/jitc/css.js'][50] = 0;
  _$jscoverage['server/jitc/css.js'][51] = 0;
  _$jscoverage['server/jitc/css.js'][57] = 0;
  _$jscoverage['server/jitc/css.js'][58] = 0;
  _$jscoverage['server/jitc/css.js'][61] = 0;
  _$jscoverage['server/jitc/css.js'][62] = 0;
  _$jscoverage['server/jitc/css.js'][66] = 0;
  _$jscoverage['server/jitc/css.js'][67] = 0;
  _$jscoverage['server/jitc/css.js'][68] = 0;
  _$jscoverage['server/jitc/css.js'][70] = 0;
  _$jscoverage['server/jitc/css.js'][71] = 0;
  _$jscoverage['server/jitc/css.js'][74] = 0;
  _$jscoverage['server/jitc/css.js'][75] = 0;
  _$jscoverage['server/jitc/css.js'][79] = 0;
  _$jscoverage['server/jitc/css.js'][80] = 0;
  _$jscoverage['server/jitc/css.js'][82] = 0;
  _$jscoverage['server/jitc/css.js'][83] = 0;
  _$jscoverage['server/jitc/css.js'][84] = 0;
  _$jscoverage['server/jitc/css.js'][85] = 0;
  _$jscoverage['server/jitc/css.js'][86] = 0;
  _$jscoverage['server/jitc/css.js'][88] = 0;
  _$jscoverage['server/jitc/css.js'][91] = 0;
  _$jscoverage['server/jitc/css.js'][92] = 0;
  _$jscoverage['server/jitc/css.js'][93] = 0;
  _$jscoverage['server/jitc/css.js'][94] = 0;
  _$jscoverage['server/jitc/css.js'][96] = 0;
}
_$jscoverage['server/jitc/css.js'].source = ["define(['underscore', 'async'], function (_, async) {","","    'use strict';","","    var crypto = require('crypto'),","        fs = require('fs'),","        path = require('path'),","        cleanCss = require('clean-css');","","    function createUrls(files, options) { // replace fully qualified path with url for browser","        var prefix = options.prefix ? path.normalize(options.prefix + '/') : '',","            basePath = options.basePath;","","        return _.map(files, function (file) {","            return path.normalize(prefix + file.replace(basePath, ''));","        });","    }","","    return {","","        bundle: function (options, callback) {","            var md5 = crypto.createHash('md5'),","                minifiedFileName = (options.outFileName ? options.outFileName : md5.update(options.files.join(''), 'utf8').digest('hex')) + '.css',","                outPath = path.normalize(options.basePath + '/' + options.outDir),","                minifiedFilePath = path.normalize(outPath + '/' + minifiedFileName),","                tasks = [];","","            function resolvePath(file) {","                return path.normalize(options.basePath + '/' + file);","            }","","            fs.exists(minifiedFilePath, function (exists) {","                var files;","","                if (exists &amp;&amp; !options.overwrite) {","                    return callback(null, createUrls([minifiedFilePath], options));","                } else {","                    files = options.files;","                    for (var i = 0; i &lt; files.length; i++) {","                        (function (i) {","                            tasks.push(function (callback) {","                                var filePath = resolvePath(files[i]),","                                    retVal = {};","","                                fs.readFile(filePath, 'utf8', function (err, css) {","                                    if (err) {","                                        return callback(err);","                                    }","","                                    retVal[filePath] = css;","                                    callback(null, [filePath, css]);","                                });","                            });","                        })(i);","                    }","","                    async.parallel(tasks, function (err, css) {","                        var cssStr,","                            urlRegex = /(?:\\@import)?\\s*url\\(\\s*(['\"]?)(\\S+)\\1\\s*\\)/g;","","                        if (err) {","                            return callback(err);","                        }","","                        // set image urls to absolute paths","                        for (var i = 0; i &lt; css.length; i++) {","                            css[i][1] = css[i][1].replace(urlRegex, function (match, quote, img, offset, str) {","                                var absoluteUrl;","","                                if (img.substr(0, 1) === '/') { // already using absolute path","                                    return str;","                                }","","                                absoluteUrl = path.resolve(path.dirname(css[i][0]), img).replace(options.basePath, '');","                                return match.replace(img, absoluteUrl);","                            });","                        }","","                        cssStr = cleanCss.process(css.map(function (def) {","                            return def[1];","                        }).join(' '));","                        fs.exists(outPath, function (exists) {","                            if (exists) {","                                fs.writeFile(minifiedFilePath, cssStr, 'utf8', function (err) {","                                    if (err) {","                                        return callback(err);","                                    }","                                    callback(null, createUrls([minifiedFilePath], options));","                                });","                            } else {","                                fs.mkdir(outPath, function () {","                                    fs.writeFile(minifiedFilePath, cssStr, 'utf8', function (err) {","                                        if (err) {","                                            return callback(err);","                                        }","                                        callback(null, createUrls([minifiedFilePath], options));","                                    });","                                });","                            }","                        });","                    });","                }","            });","        }","","    };","","});"];
_$jscoverage['server/jitc/css.js'][1]++;
define(["underscore", "async"], (function (_, async) {
  _$jscoverage['server/jitc/css.js'][3]++;
  "use strict";
  _$jscoverage['server/jitc/css.js'][5]++;
  var crypto = require("crypto"), fs = require("fs"), path = require("path"), cleanCss = require("clean-css");
  _$jscoverage['server/jitc/css.js'][10]++;
  function createUrls(files, options) {
    _$jscoverage['server/jitc/css.js'][11]++;
    var prefix = (options.prefix? path.normalize((options.prefix + "/")): ""), basePath = options.basePath;
    _$jscoverage['server/jitc/css.js'][14]++;
    return _.map(files, (function (file) {
  _$jscoverage['server/jitc/css.js'][15]++;
  return path.normalize((prefix + file.replace(basePath, "")));
}));
}
  _$jscoverage['server/jitc/css.js'][19]++;
  return ({bundle: (function (options, callback) {
  _$jscoverage['server/jitc/css.js'][22]++;
  var md5 = crypto.createHash("md5"), minifiedFileName = ((options.outFileName? options.outFileName: md5.update(options.files.join(""), "utf8").digest("hex")) + ".css"), outPath = path.normalize((options.basePath + "/" + options.outDir)), minifiedFilePath = path.normalize((outPath + "/" + minifiedFileName)), tasks = [];
  _$jscoverage['server/jitc/css.js'][28]++;
  function resolvePath(file) {
    _$jscoverage['server/jitc/css.js'][29]++;
    return path.normalize((options.basePath + "/" + file));
}
  _$jscoverage['server/jitc/css.js'][32]++;
  fs.exists(minifiedFilePath, (function (exists) {
  _$jscoverage['server/jitc/css.js'][33]++;
  var files;
  _$jscoverage['server/jitc/css.js'][35]++;
  if ((exists && (! options.overwrite))) {
    _$jscoverage['server/jitc/css.js'][36]++;
    return callback(null, createUrls([minifiedFilePath], options));
  }
  else {
    _$jscoverage['server/jitc/css.js'][38]++;
    files = options.files;
    _$jscoverage['server/jitc/css.js'][39]++;
    for (var i = 0; (i < files.length); (i++)) {
      _$jscoverage['server/jitc/css.js'][40]++;
      (function (i) {
  _$jscoverage['server/jitc/css.js'][41]++;
  tasks.push((function (callback) {
  _$jscoverage['server/jitc/css.js'][42]++;
  var filePath = resolvePath(files[i]), retVal = {};
  _$jscoverage['server/jitc/css.js'][45]++;
  fs.readFile(filePath, "utf8", (function (err, css) {
  _$jscoverage['server/jitc/css.js'][46]++;
  if (err) {
    _$jscoverage['server/jitc/css.js'][47]++;
    return callback(err);
  }
  _$jscoverage['server/jitc/css.js'][50]++;
  retVal[filePath] = css;
  _$jscoverage['server/jitc/css.js'][51]++;
  callback(null, [filePath, css]);
}));
}));
})(i);
}
    _$jscoverage['server/jitc/css.js'][57]++;
    async.parallel(tasks, (function (err, css) {
  _$jscoverage['server/jitc/css.js'][58]++;
  var cssStr, urlRegex = /(?:\@import)?\s*url\(\s*(['"]?)(\S+)\1\s*\)/g;
  _$jscoverage['server/jitc/css.js'][61]++;
  if (err) {
    _$jscoverage['server/jitc/css.js'][62]++;
    return callback(err);
  }
  _$jscoverage['server/jitc/css.js'][66]++;
  for (var i = 0; (i < css.length); (i++)) {
    _$jscoverage['server/jitc/css.js'][67]++;
    css[i][1] = css[i][1].replace(urlRegex, (function (match, quote, img, offset, str) {
  _$jscoverage['server/jitc/css.js'][68]++;
  var absoluteUrl;
  _$jscoverage['server/jitc/css.js'][70]++;
  if ((img.substr(0, 1) === "/")) {
    _$jscoverage['server/jitc/css.js'][71]++;
    return str;
  }
  _$jscoverage['server/jitc/css.js'][74]++;
  absoluteUrl = path.resolve(path.dirname(css[i][0]), img).replace(options.basePath, "");
  _$jscoverage['server/jitc/css.js'][75]++;
  return match.replace(img, absoluteUrl);
}));
}
  _$jscoverage['server/jitc/css.js'][79]++;
  cssStr = cleanCss.process(css.map((function (def) {
  _$jscoverage['server/jitc/css.js'][80]++;
  return def[1];
})).join(" "));
  _$jscoverage['server/jitc/css.js'][82]++;
  fs.exists(outPath, (function (exists) {
  _$jscoverage['server/jitc/css.js'][83]++;
  if (exists) {
    _$jscoverage['server/jitc/css.js'][84]++;
    fs.writeFile(minifiedFilePath, cssStr, "utf8", (function (err) {
  _$jscoverage['server/jitc/css.js'][85]++;
  if (err) {
    _$jscoverage['server/jitc/css.js'][86]++;
    return callback(err);
  }
  _$jscoverage['server/jitc/css.js'][88]++;
  callback(null, createUrls([minifiedFilePath], options));
}));
  }
  else {
    _$jscoverage['server/jitc/css.js'][91]++;
    fs.mkdir(outPath, (function () {
  _$jscoverage['server/jitc/css.js'][92]++;
  fs.writeFile(minifiedFilePath, cssStr, "utf8", (function (err) {
  _$jscoverage['server/jitc/css.js'][93]++;
  if (err) {
    _$jscoverage['server/jitc/css.js'][94]++;
    return callback(err);
  }
  _$jscoverage['server/jitc/css.js'][96]++;
  callback(null, createUrls([minifiedFilePath], options));
}));
}));
  }
}));
}));
  }
}));
})});
}));
