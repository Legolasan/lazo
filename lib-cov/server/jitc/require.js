/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['server/jitc/require.js']) {
  _$jscoverage['server/jitc/require.js'] = [];
  _$jscoverage['server/jitc/require.js'][1] = 0;
  _$jscoverage['server/jitc/require.js'][3] = 0;
  _$jscoverage['server/jitc/require.js'][5] = 0;
  _$jscoverage['server/jitc/require.js'][9] = 0;
  _$jscoverage['server/jitc/require.js'][12] = 0;
  _$jscoverage['server/jitc/require.js'][13] = 0;
  _$jscoverage['server/jitc/require.js'][14] = 0;
  _$jscoverage['server/jitc/require.js'][17] = 0;
  _$jscoverage['server/jitc/require.js'][18] = 0;
  _$jscoverage['server/jitc/require.js'][20] = 0;
  _$jscoverage['server/jitc/require.js'][21] = 0;
  _$jscoverage['server/jitc/require.js'][22] = 0;
  _$jscoverage['server/jitc/require.js'][27] = 0;
  _$jscoverage['server/jitc/require.js'][28] = 0;
  _$jscoverage['server/jitc/require.js'][31] = 0;
  _$jscoverage['server/jitc/require.js'][47] = 0;
  _$jscoverage['server/jitc/require.js'][51] = 0;
  _$jscoverage['server/jitc/require.js'][52] = 0;
  _$jscoverage['server/jitc/require.js'][55] = 0;
  _$jscoverage['server/jitc/require.js'][56] = 0;
  _$jscoverage['server/jitc/require.js'][57] = 0;
  _$jscoverage['server/jitc/require.js'][59] = 0;
  _$jscoverage['server/jitc/require.js'][60] = 0;
  _$jscoverage['server/jitc/require.js'][62] = 0;
  _$jscoverage['server/jitc/require.js'][63] = 0;
  _$jscoverage['server/jitc/require.js'][64] = 0;
  _$jscoverage['server/jitc/require.js'][67] = 0;
}
_$jscoverage['server/jitc/require.js'].source = ["define(['resolver/requireConfigure'], function (requireConf) {","","    'use strict';","","    var crypto = require('crypto'),","        fs = require('fs'),","        path = require('path');","","    return {","","        configure: function (include, baseUrl, out) {","            function isAppPath(path) {","                var appPaths = LAZO.contexts.app &amp;&amp; LAZO.contexts.app.paths;","                return appPaths[path] ? true : false;","            }","","            function getPaths() {","                var paths = _.clone(LAZO.contexts.server.paths);","","                for (var key in paths) {","                    if (key !== 'text' &amp;&amp; key !== 'json' &amp;&amp; !isAppPath(key)) {","                       paths[key] = 'empty:';","                    }","                }","","                // set the loader to the client implementation; it cannot be set in a map because it uses the baseUrl","                paths['l'] = LAZO.BASE_PATH + '/lib/client/loader';","                return paths;","            }","","            return {","                baseUrl: baseUrl,","                include: include,","                stubModules : ['text', 'json', 'l'],","                paths: getPaths(),","                inlineText: true,","                keepBuildDir: true,","                removeCombined: false,","                skipDirOptimize: true,","                outDir: out,","                prefix: out,","                shim: (LAZO.contexts.app &amp;&amp; LAZO.contexts.app.shim) || {}","            };","        },","","        bundle: function (options, callback) {","            var md5 = crypto.createHash('md5'),","                comboFileName = options.outFileName || md5.update(options.include.join(''), 'utf8').digest('hex'),","                comboFilePath = path.normalize(options.baseUrl + '/' + options.outDir + '/' + comboFileName + '.js');","","            if (!options.include.length) {","                return callback(null, []);","            }","","            options.out = comboFilePath;","            fs.exists(comboFilePath, function (exists) {","                var retVal = [path.normalize((options.prefix ? options.prefix + '/' : '') + comboFileName)];","","                if (exists &amp;&amp; !options.overwrite) {","                    return callback(null, retVal);","                } else {","                    try {","                        requirejs.optimize(options, function (buildTxt) {","                            callback(null, retVal);","                        });","                    } catch (err) {","                        callback(err, null);","                    }","                }","            });","        }","","    };","","});"];
_$jscoverage['server/jitc/require.js'][1]++;
define(["resolver/requireConfigure"], (function (requireConf) {
  _$jscoverage['server/jitc/require.js'][3]++;
  "use strict";
  _$jscoverage['server/jitc/require.js'][5]++;
  var crypto = require("crypto"), fs = require("fs"), path = require("path");
  _$jscoverage['server/jitc/require.js'][9]++;
  return ({configure: (function (include, baseUrl, out) {
  _$jscoverage['server/jitc/require.js'][12]++;
  function isAppPath(path) {
    _$jscoverage['server/jitc/require.js'][13]++;
    var appPaths = (LAZO.contexts.app && LAZO.contexts.app.paths);
    _$jscoverage['server/jitc/require.js'][14]++;
    return (appPaths[path]? true: false);
}
  _$jscoverage['server/jitc/require.js'][17]++;
  function getPaths() {
    _$jscoverage['server/jitc/require.js'][18]++;
    var paths = _.clone(LAZO.contexts.server.paths);
    _$jscoverage['server/jitc/require.js'][20]++;
    for (var key in paths) {
      _$jscoverage['server/jitc/require.js'][21]++;
      if (((key !== "text") && (key !== "json") && (! isAppPath(key)))) {
        _$jscoverage['server/jitc/require.js'][22]++;
        paths[key] = "empty:";
      }
}
    _$jscoverage['server/jitc/require.js'][27]++;
    paths.l = (LAZO.BASE_PATH + "/lib/client/loader");
    _$jscoverage['server/jitc/require.js'][28]++;
    return paths;
}
  _$jscoverage['server/jitc/require.js'][31]++;
  return ({baseUrl: baseUrl, include: include, stubModules: ["text", "json", "l"], paths: getPaths(), inlineText: true, keepBuildDir: true, removeCombined: false, skipDirOptimize: true, outDir: out, prefix: out, shim: ((LAZO.contexts.app && LAZO.contexts.app.shim) || {})});
}), bundle: (function (options, callback) {
  _$jscoverage['server/jitc/require.js'][47]++;
  var md5 = crypto.createHash("md5"), comboFileName = (options.outFileName || md5.update(options.include.join(""), "utf8").digest("hex")), comboFilePath = path.normalize((options.baseUrl + "/" + options.outDir + "/" + comboFileName + ".js"));
  _$jscoverage['server/jitc/require.js'][51]++;
  if ((! options.include.length)) {
    _$jscoverage['server/jitc/require.js'][52]++;
    return callback(null, []);
  }
  _$jscoverage['server/jitc/require.js'][55]++;
  options.out = comboFilePath;
  _$jscoverage['server/jitc/require.js'][56]++;
  fs.exists(comboFilePath, (function (exists) {
  _$jscoverage['server/jitc/require.js'][57]++;
  var retVal = [path.normalize(((options.prefix? (options.prefix + "/"): "") + comboFileName))];
  _$jscoverage['server/jitc/require.js'][59]++;
  if ((exists && (! options.overwrite))) {
    _$jscoverage['server/jitc/require.js'][60]++;
    return callback(null, retVal);
  }
  else {
    _$jscoverage['server/jitc/require.js'][62]++;
    try {
      _$jscoverage['server/jitc/require.js'][63]++;
      requirejs.optimize(options, (function (buildTxt) {
  _$jscoverage['server/jitc/require.js'][64]++;
  callback(null, retVal);
}));
    }
    catch (err) {
      _$jscoverage['server/jitc/require.js'][67]++;
      callback(err, null);
    }
  }
}));
})});
}));
