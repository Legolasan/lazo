/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['server/app.js']) {
  _$jscoverage['server/app.js'] = [];
  _$jscoverage['server/app.js'][2] = 0;
  _$jscoverage['server/app.js'][9] = 0;
  _$jscoverage['server/app.js'][20] = 0;
  _$jscoverage['server/app.js'][35] = 0;
  _$jscoverage['server/app.js'][37] = 0;
  _$jscoverage['server/app.js'][39] = 0;
  _$jscoverage['server/app.js'][44] = 0;
  _$jscoverage['server/app.js'][45] = 0;
  _$jscoverage['server/app.js'][46] = 0;
  _$jscoverage['server/app.js'][48] = 0;
  _$jscoverage['server/app.js'][50] = 0;
  _$jscoverage['server/app.js'][51] = 0;
  _$jscoverage['server/app.js'][52] = 0;
  _$jscoverage['server/app.js'][54] = 0;
  _$jscoverage['server/app.js'][56] = 0;
  _$jscoverage['server/app.js'][57] = 0;
  _$jscoverage['server/app.js'][58] = 0;
  _$jscoverage['server/app.js'][59] = 0;
  _$jscoverage['server/app.js'][62] = 0;
  _$jscoverage['server/app.js'][65] = 0;
  _$jscoverage['server/app.js'][66] = 0;
  _$jscoverage['server/app.js'][74] = 0;
  _$jscoverage['server/app.js'][75] = 0;
  _$jscoverage['server/app.js'][77] = 0;
  _$jscoverage['server/app.js'][78] = 0;
  _$jscoverage['server/app.js'][79] = 0;
  _$jscoverage['server/app.js'][80] = 0;
  _$jscoverage['server/app.js'][82] = 0;
  _$jscoverage['server/app.js'][85] = 0;
  _$jscoverage['server/app.js'][87] = 0;
  _$jscoverage['server/app.js'][90] = 0;
  _$jscoverage['server/app.js'][91] = 0;
  _$jscoverage['server/app.js'][93] = 0;
  _$jscoverage['server/app.js'][94] = 0;
  _$jscoverage['server/app.js'][95] = 0;
  _$jscoverage['server/app.js'][97] = 0;
  _$jscoverage['server/app.js'][98] = 0;
  _$jscoverage['server/app.js'][99] = 0;
  _$jscoverage['server/app.js'][104] = 0;
  _$jscoverage['server/app.js'][105] = 0;
  _$jscoverage['server/app.js'][108] = 0;
  _$jscoverage['server/app.js'][109] = 0;
  _$jscoverage['server/app.js'][113] = 0;
  _$jscoverage['server/app.js'][118] = 0;
  _$jscoverage['server/app.js'][120] = 0;
  _$jscoverage['server/app.js'][124] = 0;
  _$jscoverage['server/app.js'][125] = 0;
  _$jscoverage['server/app.js'][126] = 0;
  _$jscoverage['server/app.js'][127] = 0;
  _$jscoverage['server/app.js'][130] = 0;
  _$jscoverage['server/app.js'][131] = 0;
}
_$jscoverage['server/app.js'].source = ["// TODO: add lib combo handling","var fs = require('fs'),","    path = require('path'),","    requirejs = require('requirejs'),","    logger = require('./logger'),","    http = require('http'),","    bootstrap;","","global.LAZO = {","    logger: logger,","    BASE_PATH: process.env.BASE_PATH,","    BASE_REPO_DIR: process.env.BASE_REPO_DIR,","    FILE_REPO_DIR: process.env.FILE_REPO_DIR,","    SHARED_REPO_DIR: process.env.SHARED_REPO_DIR,","    FILE_REPO_PATH: path.resolve(process.env.FILE_REPO_DIR),","    PORT: process.env.PORT ? parseInt(process.env.PORT, 10) : 8080,","    CLUSTER: process.env.CLUSTER === '1' ? true : false","};","","bootstrap = requirejs.config({","    baseUrl: LAZO.BASE_PATH,","    context: 'bootstrap',","    paths: {","        'json': 'lib/vendor/json',","        'text': 'lib/vendor/text',","        'common': 'lib/common',","        'base': 'lib/common/base',","        'asnyc': 'lib/common/async',","        'resolver': 'lib/common/resolver'","    }","});","","// load requireConfigure directly as opposed to resolver/main because resolver","// sub modules have need requirejs to be configured prior to being loaded","bootstrap(['resolver/requireConfigure'], function (requireConfigure) {","","    'use strict';","","    var options = {","        basePath: LAZO.BASE_PATH,","        baseUrl: LAZO.FILE_REPO_DIR","    };","","    requireConfigure.get('server', options, function (err, conf, appConfExtensions) {","        if (err) {","            throw new Error(err);","        }","        var serverConf = conf;","","        requireConfigure.get('client', options, function (err, conf) {","            if (err) {","                throw new Error(err);","            }","            var clientConf = conf;","","            function addPaths(serverConf) {","                var customBundlerPath = path.normalize(LAZO.FILE_REPO_DIR + '/app/server/bundle.js');","                if (fs.existsSync(customBundlerPath)) {","                    serverConf.paths.bundler = path.resolve(path.normalize(LAZO.FILE_REPO_DIR + '/app/server/bundle')); // use absolute path","                }","","                return serverConf;","            }","","            LAZO.require = requirejs.config(addPaths(serverConf));","            LAZO.contexts = {","                request: JSON.parse(JSON.stringify(clientConf)), // request combo handling","                lib: JSON.parse(JSON.stringify(clientConf)), // lib combo handling","                server: JSON.parse(JSON.stringify(serverConf)), // paths are used for generating combo handled file","                app: appConfExtensions // application defined shims and paths; used to set globals for client config","            };","","            // these are needed by dependencies of lazoApp","            LAZO.isServer = true;","            LAZO.isClient = false;","            // these cannot be loaded until the requirejs app config has been set","            LAZO.require(['app/application', 'config'], function (LazoApp, config) {","                LAZO.app = new LazoApp();","                LAZO.app.isServer = LAZO.isServer;","                LAZO.app.isClient = LAZO.isClient;","","                LAZO.config = config;","","                // these are dependent on the","                LAZO.require(['server', 'jitc/main', 'resolver/file', 'error'], function (server, jitc, file, err) {","","                    LAZO.error = err;","","                    // process appArgs command line argument into application.args","                    var args = process.argv.filter(function (elem) {","                        return elem.indexOf('-appArgs') !== -1;","                    });","                    if (args.length) {","                        LAZO.app.args = {};","                        var appArgs = args[0].split('='),","                            args = appArgs[1].split(';');","                        for (var i = 0, il = args.length; i &lt; il; i++) {","                            var arg = args[i].split(':');","                            LAZO.app.args[arg[0]] = arg[1];","                        }","                    }","","                    // read in ssl server config","                    try {","                        LAZO.options = JSON.parse(fs.readFileSync(path.resolve(path.normalize(LAZO.FILE_REPO_DIR + '/config/serverConfig.json'))));","                    }","                    catch (error) {","                        LAZO.options = {};","                        LAZO.logger.log('warn', 'initialize', 'could not load server-config');","                    }","","                    // manually setup server config, TODO: should be refactored to be read in from serverConfig.json","                    LAZO.options.server = {","                        port: LAZO.PORT,","                        maxSockets: 500","                    }","                    ","                    http.globalAgent.maxSockets = LAZO.options.server.maxSockets;","                        ","                    LAZO.app.initialize(function () {","                        // var bundles = 0,","                        //     bundleConf;","","                        LAZO.app.js = LAZO.app.js || [];","                        file.getErrorTemplatePaths(function (err, errHandlers) {","                            if (err) {","                                throw err;","                            }","","                            LAZO.errorTemplates = errHandlers;","                            server.initialize(errHandlers);","                        });","                    });","                });","            });","        });","    });","","});"];
_$jscoverage['server/app.js'][2]++;
var fs = require("fs"), path = require("path"), requirejs = require("requirejs"), logger = require("./logger"), http = require("http"), bootstrap;
_$jscoverage['server/app.js'][9]++;
global.LAZO = {logger: logger, BASE_PATH: process.env.BASE_PATH, BASE_REPO_DIR: process.env.BASE_REPO_DIR, FILE_REPO_DIR: process.env.FILE_REPO_DIR, SHARED_REPO_DIR: process.env.SHARED_REPO_DIR, FILE_REPO_PATH: path.resolve(process.env.FILE_REPO_DIR), PORT: (process.env.PORT? parseInt(process.env.PORT, 10): 8080), CLUSTER: ((process.env.CLUSTER === "1")? true: false)};
_$jscoverage['server/app.js'][20]++;
bootstrap = requirejs.config({baseUrl: LAZO.BASE_PATH, context: "bootstrap", paths: {"json": "lib/vendor/json", "text": "lib/vendor/text", "common": "lib/common", "base": "lib/common/base", "asnyc": "lib/common/async", "resolver": "lib/common/resolver"}});
_$jscoverage['server/app.js'][35]++;
bootstrap(["resolver/requireConfigure"], (function (requireConfigure) {
  _$jscoverage['server/app.js'][37]++;
  "use strict";
  _$jscoverage['server/app.js'][39]++;
  var options = {basePath: LAZO.BASE_PATH, baseUrl: LAZO.FILE_REPO_DIR};
  _$jscoverage['server/app.js'][44]++;
  requireConfigure.get("server", options, (function (err, conf, appConfExtensions) {
  _$jscoverage['server/app.js'][45]++;
  if (err) {
    _$jscoverage['server/app.js'][46]++;
    throw new Error(err);
  }
  _$jscoverage['server/app.js'][48]++;
  var serverConf = conf;
  _$jscoverage['server/app.js'][50]++;
  requireConfigure.get("client", options, (function (err, conf) {
  _$jscoverage['server/app.js'][51]++;
  if (err) {
    _$jscoverage['server/app.js'][52]++;
    throw new Error(err);
  }
  _$jscoverage['server/app.js'][54]++;
  var clientConf = conf;
  _$jscoverage['server/app.js'][56]++;
  function addPaths(serverConf) {
    _$jscoverage['server/app.js'][57]++;
    var customBundlerPath = path.normalize((LAZO.FILE_REPO_DIR + "/app/server/bundle.js"));
    _$jscoverage['server/app.js'][58]++;
    if (fs.existsSync(customBundlerPath)) {
      _$jscoverage['server/app.js'][59]++;
      serverConf.paths.bundler = path.resolve(path.normalize((LAZO.FILE_REPO_DIR + "/app/server/bundle")));
    }
    _$jscoverage['server/app.js'][62]++;
    return serverConf;
}
  _$jscoverage['server/app.js'][65]++;
  LAZO.require = requirejs.config(addPaths(serverConf));
  _$jscoverage['server/app.js'][66]++;
  LAZO.contexts = {request: JSON.parse(JSON.stringify(clientConf)), lib: JSON.parse(JSON.stringify(clientConf)), server: JSON.parse(JSON.stringify(serverConf)), app: appConfExtensions};
  _$jscoverage['server/app.js'][74]++;
  LAZO.isServer = true;
  _$jscoverage['server/app.js'][75]++;
  LAZO.isClient = false;
  _$jscoverage['server/app.js'][77]++;
  LAZO.require(["app/application", "config"], (function (LazoApp, config) {
  _$jscoverage['server/app.js'][78]++;
  LAZO.app = new LazoApp();
  _$jscoverage['server/app.js'][79]++;
  LAZO.app.isServer = LAZO.isServer;
  _$jscoverage['server/app.js'][80]++;
  LAZO.app.isClient = LAZO.isClient;
  _$jscoverage['server/app.js'][82]++;
  LAZO.config = config;
  _$jscoverage['server/app.js'][85]++;
  LAZO.require(["server", "jitc/main", "resolver/file", "error"], (function (server, jitc, file, err) {
  _$jscoverage['server/app.js'][87]++;
  LAZO.error = err;
  _$jscoverage['server/app.js'][90]++;
  var args = process.argv.filter((function (elem) {
  _$jscoverage['server/app.js'][91]++;
  return (elem.indexOf("-appArgs") !== -1);
}));
  _$jscoverage['server/app.js'][93]++;
  if (args.length) {
    _$jscoverage['server/app.js'][94]++;
    LAZO.app.args = {};
    _$jscoverage['server/app.js'][95]++;
    var appArgs = args[0].split("="), args = appArgs[1].split(";");
    _$jscoverage['server/app.js'][97]++;
    for (var i = 0, il = args.length; (i < il); (i++)) {
      _$jscoverage['server/app.js'][98]++;
      var arg = args[i].split(":");
      _$jscoverage['server/app.js'][99]++;
      LAZO.app.args[arg[0]] = arg[1];
}
  }
  _$jscoverage['server/app.js'][104]++;
  try {
    _$jscoverage['server/app.js'][105]++;
    LAZO.options = JSON.parse(fs.readFileSync(path.resolve(path.normalize((LAZO.FILE_REPO_DIR + "/config/serverConfig.json")))));
  }
  catch (error) {
    _$jscoverage['server/app.js'][108]++;
    LAZO.options = {};
    _$jscoverage['server/app.js'][109]++;
    LAZO.logger.log("warn", "initialize", "could not load server-config");
  }
  _$jscoverage['server/app.js'][113]++;
  LAZO.options.server = {port: LAZO.PORT, maxSockets: 500};
  _$jscoverage['server/app.js'][118]++;
  http.globalAgent.maxSockets = LAZO.options.server.maxSockets;
  _$jscoverage['server/app.js'][120]++;
  LAZO.app.initialize((function () {
  _$jscoverage['server/app.js'][124]++;
  LAZO.app.js = (LAZO.app.js || []);
  _$jscoverage['server/app.js'][125]++;
  file.getErrorTemplatePaths((function (err, errHandlers) {
  _$jscoverage['server/app.js'][126]++;
  if (err) {
    _$jscoverage['server/app.js'][127]++;
    throw err;
  }
  _$jscoverage['server/app.js'][130]++;
  LAZO.errorTemplates = errHandlers;
  _$jscoverage['server/app.js'][131]++;
  server.initialize(errHandlers);
}));
}));
}));
}));
}));
}));
}));
