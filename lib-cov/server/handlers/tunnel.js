/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['server/handlers/tunnel.js']) {
  _$jscoverage['server/handlers/tunnel.js'] = [];
  _$jscoverage['server/handlers/tunnel.js'][1] = 0;
  _$jscoverage['server/handlers/tunnel.js'][3] = 0;
  _$jscoverage['server/handlers/tunnel.js'][5] = 0;
  _$jscoverage['server/handlers/tunnel.js'][6] = 0;
  _$jscoverage['server/handlers/tunnel.js'][7] = 0;
  _$jscoverage['server/handlers/tunnel.js'][8] = 0;
  _$jscoverage['server/handlers/tunnel.js'][9] = 0;
  _$jscoverage['server/handlers/tunnel.js'][12] = 0;
  _$jscoverage['server/handlers/tunnel.js'][13] = 0;
  _$jscoverage['server/handlers/tunnel.js'][14] = 0;
  _$jscoverage['server/handlers/tunnel.js'][16] = 0;
  _$jscoverage['server/handlers/tunnel.js'][17] = 0;
  _$jscoverage['server/handlers/tunnel.js'][18] = 0;
  _$jscoverage['server/handlers/tunnel.js'][20] = 0;
  _$jscoverage['server/handlers/tunnel.js'][21] = 0;
  _$jscoverage['server/handlers/tunnel.js'][22] = 0;
  _$jscoverage['server/handlers/tunnel.js'][24] = 0;
  _$jscoverage['server/handlers/tunnel.js'][30] = 0;
  _$jscoverage['server/handlers/tunnel.js'][33] = 0;
  _$jscoverage['server/handlers/tunnel.js'][34] = 0;
  _$jscoverage['server/handlers/tunnel.js'][40] = 0;
  _$jscoverage['server/handlers/tunnel.js'][41] = 0;
  _$jscoverage['server/handlers/tunnel.js'][44] = 0;
  _$jscoverage['server/handlers/tunnel.js'][45] = 0;
  _$jscoverage['server/handlers/tunnel.js'][46] = 0;
  _$jscoverage['server/handlers/tunnel.js'][48] = 0;
  _$jscoverage['server/handlers/tunnel.js'][49] = 0;
  _$jscoverage['server/handlers/tunnel.js'][50] = 0;
  _$jscoverage['server/handlers/tunnel.js'][53] = 0;
  _$jscoverage['server/handlers/tunnel.js'][54] = 0;
  _$jscoverage['server/handlers/tunnel.js'][62] = 0;
  _$jscoverage['server/handlers/tunnel.js'][63] = 0;
  _$jscoverage['server/handlers/tunnel.js'][65] = 0;
  _$jscoverage['server/handlers/tunnel.js'][68] = 0;
  _$jscoverage['server/handlers/tunnel.js'][72] = 0;
  _$jscoverage['server/handlers/tunnel.js'][73] = 0;
  _$jscoverage['server/handlers/tunnel.js'][75] = 0;
  _$jscoverage['server/handlers/tunnel.js'][77] = 0;
  _$jscoverage['server/handlers/tunnel.js'][80] = 0;
  _$jscoverage['server/handlers/tunnel.js'][85] = 0;
  _$jscoverage['server/handlers/tunnel.js'][88] = 0;
  _$jscoverage['server/handlers/tunnel.js'][91] = 0;
  _$jscoverage['server/handlers/tunnel.js'][97] = 0;
  _$jscoverage['server/handlers/tunnel.js'][100] = 0;
  _$jscoverage['server/handlers/tunnel.js'][101] = 0;
  _$jscoverage['server/handlers/tunnel.js'][102] = 0;
}
_$jscoverage['server/handlers/tunnel.js'].source = ["define(['utils/modelLoader', 'context'], function (modelLoader, Context) {","","    'use strict';","","    return function (req) {","        var handleTunnelError = function (req, response) {","            var respText = response.body || response.error || '';","            var resp = req.reply(respText);","            resp.code(response.statusCode || 500);","        };","","        var method = req.payload.method;","        if (method === 'GET') {","            var loadFunc,","                loadName;","            if (req.payload.model) {","                loadFunc = LAZO.app.loadModel;","                loadName = req.payload.model;","            }","            else if (req.payload.collection) {","                loadFunc = LAZO.app.loadCollection;","                loadName = req.payload.collection;","            }","            loadFunc.call(LAZO.app,","                loadName,","                {","                    ctx: new Context(),","                    params: req.payload.params,","                    success: function (model) {","                        req.reply({ gmid: model._getGlobalId(), data: model.toJSON() });","                    },","                    error: function (model, response, options) {","                        LAZO.logger.log('error', 'tunnel load ' + loadName, 'Error processing request', response);","                        handleTunnelError(req, response);","                    }","                }","            );","","        }","        else if (method === 'POST' || method === 'PUT' || method === 'DELETE' || method === 'NONCRUD') {","            var type,","                modelName,","                payload = req.payload;","            if (payload.model) {","                type = 'model';","                modelName = payload.model;","            }","            else if (payload.collection) {","                type = 'collection';","                modelName = payload.collection;","            }","","            var _handleModel = function (Model) {","                var m = new Model(payload.attributes,","                    {","                        name: modelName,","                        ctx: new Context(),","                        params: payload.params,","                        parse: true","                    });","","                if (method === 'DELETE') {","                    m.destroy({","                        success: function (model, response, options) {","                            req.reply({ gmid: model._getGlobalId(), data: model.toJSON() });","                        },","                        error: function (model, response, options) {","                            handleTunnelError(req, response);","                        }","                    });","                }","                else if (method === 'NONCRUD') {","                    var fname = payload.fname,","                        args = payload.args;","                    m.call(fname, args, {","                        success: function (response) {","                            req.reply(response);","                        },","                        error: function(response) {","                            handleTunnelError(req, response);","                        }","                    });","                }","                else {","                    m.save({},","                        {","                            success: function (model, response, options) {","                                req.reply({ gmid: model._getGlobalId(), data: model.toJSON() });","                            },","                            error: function(model, response, options) {","                                handleTunnelError(req, response);","                            }","                        });","                }","            };","","            modelLoader(modelName, type, _handleModel);","","        } else {","            LAZO.logger.log('error', 'tunnel', 'Error processing request method: ' + method);","            var resp = req.reply({ error: 'Error processing request method: ' + method });","            resp.code(500);","        }","    };","","});"];
_$jscoverage['server/handlers/tunnel.js'][1]++;
define(["utils/modelLoader", "context"], (function (modelLoader, Context) {
  _$jscoverage['server/handlers/tunnel.js'][3]++;
  "use strict";
  _$jscoverage['server/handlers/tunnel.js'][5]++;
  return (function (req) {
  _$jscoverage['server/handlers/tunnel.js'][6]++;
  var handleTunnelError = (function (req, response) {
  _$jscoverage['server/handlers/tunnel.js'][7]++;
  var respText = (response.body || response.error || "");
  _$jscoverage['server/handlers/tunnel.js'][8]++;
  var resp = req.reply(respText);
  _$jscoverage['server/handlers/tunnel.js'][9]++;
  resp.code((response.statusCode || 500));
});
  _$jscoverage['server/handlers/tunnel.js'][12]++;
  var method = req.payload.method;
  _$jscoverage['server/handlers/tunnel.js'][13]++;
  if ((method === "GET")) {
    _$jscoverage['server/handlers/tunnel.js'][14]++;
    var loadFunc, loadName;
    _$jscoverage['server/handlers/tunnel.js'][16]++;
    if (req.payload.model) {
      _$jscoverage['server/handlers/tunnel.js'][17]++;
      loadFunc = LAZO.app.loadModel;
      _$jscoverage['server/handlers/tunnel.js'][18]++;
      loadName = req.payload.model;
    }
    else {
      _$jscoverage['server/handlers/tunnel.js'][20]++;
      if (req.payload.collection) {
        _$jscoverage['server/handlers/tunnel.js'][21]++;
        loadFunc = LAZO.app.loadCollection;
        _$jscoverage['server/handlers/tunnel.js'][22]++;
        loadName = req.payload.collection;
      }
    }
    _$jscoverage['server/handlers/tunnel.js'][24]++;
    loadFunc.call(LAZO.app, loadName, {ctx: new Context(), params: req.payload.params, success: (function (model) {
  _$jscoverage['server/handlers/tunnel.js'][30]++;
  req.reply({gmid: model._getGlobalId(), data: model.toJSON()});
}), error: (function (model, response, options) {
  _$jscoverage['server/handlers/tunnel.js'][33]++;
  LAZO.logger.log("error", ("tunnel load " + loadName), "Error processing request", response);
  _$jscoverage['server/handlers/tunnel.js'][34]++;
  handleTunnelError(req, response);
})});
  }
  else {
    _$jscoverage['server/handlers/tunnel.js'][40]++;
    if (((method === "POST") || (method === "PUT") || (method === "DELETE") || (method === "NONCRUD"))) {
      _$jscoverage['server/handlers/tunnel.js'][41]++;
      var type, modelName, payload = req.payload;
      _$jscoverage['server/handlers/tunnel.js'][44]++;
      if (payload.model) {
        _$jscoverage['server/handlers/tunnel.js'][45]++;
        type = "model";
        _$jscoverage['server/handlers/tunnel.js'][46]++;
        modelName = payload.model;
      }
      else {
        _$jscoverage['server/handlers/tunnel.js'][48]++;
        if (payload.collection) {
          _$jscoverage['server/handlers/tunnel.js'][49]++;
          type = "collection";
          _$jscoverage['server/handlers/tunnel.js'][50]++;
          modelName = payload.collection;
        }
      }
      _$jscoverage['server/handlers/tunnel.js'][53]++;
      var _handleModel = (function (Model) {
  _$jscoverage['server/handlers/tunnel.js'][54]++;
  var m = new Model(payload.attributes, {name: modelName, ctx: new Context(), params: payload.params, parse: true});
  _$jscoverage['server/handlers/tunnel.js'][62]++;
  if ((method === "DELETE")) {
    _$jscoverage['server/handlers/tunnel.js'][63]++;
    m.destroy({success: (function (model, response, options) {
  _$jscoverage['server/handlers/tunnel.js'][65]++;
  req.reply({gmid: model._getGlobalId(), data: model.toJSON()});
}), error: (function (model, response, options) {
  _$jscoverage['server/handlers/tunnel.js'][68]++;
  handleTunnelError(req, response);
})});
  }
  else {
    _$jscoverage['server/handlers/tunnel.js'][72]++;
    if ((method === "NONCRUD")) {
      _$jscoverage['server/handlers/tunnel.js'][73]++;
      var fname = payload.fname, args = payload.args;
      _$jscoverage['server/handlers/tunnel.js'][75]++;
      m.call(fname, args, {success: (function (response) {
  _$jscoverage['server/handlers/tunnel.js'][77]++;
  req.reply(response);
}), error: (function (response) {
  _$jscoverage['server/handlers/tunnel.js'][80]++;
  handleTunnelError(req, response);
})});
    }
    else {
      _$jscoverage['server/handlers/tunnel.js'][85]++;
      m.save({}, {success: (function (model, response, options) {
  _$jscoverage['server/handlers/tunnel.js'][88]++;
  req.reply({gmid: model._getGlobalId(), data: model.toJSON()});
}), error: (function (model, response, options) {
  _$jscoverage['server/handlers/tunnel.js'][91]++;
  handleTunnelError(req, response);
})});
    }
  }
});
      _$jscoverage['server/handlers/tunnel.js'][97]++;
      modelLoader(modelName, type, _handleModel);
    }
    else {
      _$jscoverage['server/handlers/tunnel.js'][100]++;
      LAZO.logger.log("error", "tunnel", ("Error processing request method: " + method));
      _$jscoverage['server/handlers/tunnel.js'][101]++;
      var resp = req.reply({error: ("Error processing request method: " + method)});
      _$jscoverage['server/handlers/tunnel.js'][102]++;
      resp.code(500);
    }
  }
});
}));
