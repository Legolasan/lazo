/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['server/handlers/app/main.js']) {
  _$jscoverage['server/handlers/app/main.js'] = [];
  _$jscoverage['server/handlers/app/main.js'][1] = 0;
  _$jscoverage['server/handlers/app/main.js'][3] = 0;
  _$jscoverage['server/handlers/app/main.js'][4] = 0;
  _$jscoverage['server/handlers/app/main.js'][14] = 0;
  _$jscoverage['server/handlers/app/main.js'][15] = 0;
  _$jscoverage['server/handlers/app/main.js'][16] = 0;
  _$jscoverage['server/handlers/app/main.js'][19] = 0;
  _$jscoverage['server/handlers/app/main.js'][21] = 0;
  _$jscoverage['server/handlers/app/main.js'][22] = 0;
  _$jscoverage['server/handlers/app/main.js'][23] = 0;
  _$jscoverage['server/handlers/app/main.js'][26] = 0;
}
_$jscoverage['server/handlers/app/main.js'].source = ["define(['handlers/utils', 'handlers/app/processor'], function (utils, processor) {","","    return function (request, route, svr) {","        var payload = request.payload,","            params = {","                params: utils.getParams(request),","                cookies: utils.getCookies(request),","                _rawReq: request,","                svr: svr,","                headers: utils.getHeaders(request),","                url: utils.getParsedUrl(request)","            };","","        if (payload &amp;&amp; payload._lazo) {","            params.exlcude = payload._lazo.exclude;","            params.layout = payload._lazo.layout;","        }","","        processor.reply(route, params, {","            error: function (err) {","                err = err instanceof Error ? err : new Error(err);","                LAZO.logger.log('error', 'processor.reply', 'Error processing request, ' + err, err);","                throw err; // hapi domain catches error","            },","            success: function (response) {","                request.reply(response);","            }","        });","","    };","","});"];
_$jscoverage['server/handlers/app/main.js'][1]++;
define(["handlers/utils", "handlers/app/processor"], (function (utils, processor) {
  _$jscoverage['server/handlers/app/main.js'][3]++;
  return (function (request, route, svr) {
  _$jscoverage['server/handlers/app/main.js'][4]++;
  var payload = request.payload, params = {params: utils.getParams(request), cookies: utils.getCookies(request), _rawReq: request, svr: svr, headers: utils.getHeaders(request), url: utils.getParsedUrl(request)};
  _$jscoverage['server/handlers/app/main.js'][14]++;
  if ((payload && payload._lazo)) {
    _$jscoverage['server/handlers/app/main.js'][15]++;
    params.exlcude = payload._lazo.exclude;
    _$jscoverage['server/handlers/app/main.js'][16]++;
    params.layout = payload._lazo.layout;
  }
  _$jscoverage['server/handlers/app/main.js'][19]++;
  processor.reply(route, params, {error: (function (err) {
  _$jscoverage['server/handlers/app/main.js'][21]++;
  err = ((err instanceof Error)? err: new Error(err));
  _$jscoverage['server/handlers/app/main.js'][22]++;
  LAZO.logger.log("error", "processor.reply", ("Error processing request, " + err), err);
  _$jscoverage['server/handlers/app/main.js'][23]++;
  throw err;
}), success: (function (response) {
  _$jscoverage['server/handlers/app/main.js'][26]++;
  request.reply(response);
})});
});
}));
