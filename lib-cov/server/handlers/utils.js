/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['server/handlers/utils.js']) {
  _$jscoverage['server/handlers/utils.js'] = [];
  _$jscoverage['server/handlers/utils.js'][1] = 0;
  _$jscoverage['server/handlers/utils.js'][3] = 0;
  _$jscoverage['server/handlers/utils.js'][5] = 0;
  _$jscoverage['server/handlers/utils.js'][8] = 0;
  _$jscoverage['server/handlers/utils.js'][13] = 0;
  _$jscoverage['server/handlers/utils.js'][14] = 0;
  _$jscoverage['server/handlers/utils.js'][15] = 0;
  _$jscoverage['server/handlers/utils.js'][18] = 0;
  _$jscoverage['server/handlers/utils.js'][19] = 0;
  _$jscoverage['server/handlers/utils.js'][20] = 0;
  _$jscoverage['server/handlers/utils.js'][24] = 0;
  _$jscoverage['server/handlers/utils.js'][28] = 0;
  _$jscoverage['server/handlers/utils.js'][30] = 0;
  _$jscoverage['server/handlers/utils.js'][31] = 0;
  _$jscoverage['server/handlers/utils.js'][34] = 0;
  _$jscoverage['server/handlers/utils.js'][35] = 0;
  _$jscoverage['server/handlers/utils.js'][38] = 0;
  _$jscoverage['server/handlers/utils.js'][42] = 0;
  _$jscoverage['server/handlers/utils.js'][43] = 0;
  _$jscoverage['server/handlers/utils.js'][44] = 0;
  _$jscoverage['server/handlers/utils.js'][45] = 0;
  _$jscoverage['server/handlers/utils.js'][48] = 0;
  _$jscoverage['server/handlers/utils.js'][49] = 0;
  _$jscoverage['server/handlers/utils.js'][52] = 0;
  _$jscoverage['server/handlers/utils.js'][59] = 0;
  _$jscoverage['server/handlers/utils.js'][61] = 0;
  _$jscoverage['server/handlers/utils.js'][62] = 0;
  _$jscoverage['server/handlers/utils.js'][64] = 0;
  _$jscoverage['server/handlers/utils.js'][65] = 0;
  _$jscoverage['server/handlers/utils.js'][66] = 0;
  _$jscoverage['server/handlers/utils.js'][68] = 0;
  _$jscoverage['server/handlers/utils.js'][69] = 0;
  _$jscoverage['server/handlers/utils.js'][70] = 0;
  _$jscoverage['server/handlers/utils.js'][76] = 0;
  _$jscoverage['server/handlers/utils.js'][84] = 0;
  _$jscoverage['server/handlers/utils.js'][88] = 0;
}
_$jscoverage['server/handlers/utils.js'].source = ["define(['underscore'], function (_) {","","    'use strict';","","    return {","","        getParams: function (request) {","            var params = {},","                reqParams,","                qryParams,","                key;","","            if ((reqParams = _.extend(request.params, request.payload ? request.payload : {}))) {","                for (key in reqParams) {","                    params[key] = reqParams[key];","                }","            }","            if ((qryParams = request.query)) {","                for (key in qryParams) {","                    params[key] = qryParams[key];","                }","            }","","            return params;","        },","","        getCookies: function (request) {","            var cookies = {},","                state;","            if (!(state = request.state)) {","                return cookies;","            }","","            for (var key in state) {","                cookies[key] = decodeURIComponent(state[key]);","            }","","            return cookies;","        },","","        getAssets: function (cmpName, ctx, options) {","            if (!_.isEmpty(ctx._assets)) {","                var map = ctx._assets;","                delete ctx._assets;","                return options.success(map);","            }","","            if (LAZO.app.isClient) {","                return options.success(window.rootCtx ? window.rootCtx.assets : {});","            }","","            LAZO.app.assets.map(cmpName, ctx, {","                success: options.success,","                error: options.error","            });","        },","","        setAssets: function (component, assets) {","            var self = this;","","            component.ctx.assets = component.ctx.assets || {};","            _.extend(component.ctx.assets, assets[component.name]);","","            component.ctx.app = component.ctx.app || {};","            component.ctx.app.assets = component.ctx.app.assets || {};","            _.extend(component.ctx.app.assets, assets.app);","","            _.each(component.children, function (children) {","                _.each(children, function (child) {","                    self.setAssets(child, assets);","                });","            });","        },","","        getRootCtxForReply: function (ctx, assets) {","            return _.extend(_.omit(ctx._rootCtx, 'modelInstances'), {","                dependencies: ctx._rootCtx.dependencies,","                assets: assets,","                modelInstances: {}","            });","        },","        ","        getHeaders: function (request) {","            return request.raw.req.headers;    ","        },","        ","        getParsedUrl: function (request) {","            return request.url;    ","        }","","    };","","});"];
_$jscoverage['server/handlers/utils.js'][1]++;
define(["underscore"], (function (_) {
  _$jscoverage['server/handlers/utils.js'][3]++;
  "use strict";
  _$jscoverage['server/handlers/utils.js'][5]++;
  return ({getParams: (function (request) {
  _$jscoverage['server/handlers/utils.js'][8]++;
  var params = {}, reqParams, qryParams, key;
  _$jscoverage['server/handlers/utils.js'][13]++;
  if ((reqParams = _.extend(request.params, (request.payload? request.payload: {})))) {
    _$jscoverage['server/handlers/utils.js'][14]++;
    for (key in reqParams) {
      _$jscoverage['server/handlers/utils.js'][15]++;
      params[key] = reqParams[key];
}
  }
  _$jscoverage['server/handlers/utils.js'][18]++;
  if ((qryParams = request.query)) {
    _$jscoverage['server/handlers/utils.js'][19]++;
    for (key in qryParams) {
      _$jscoverage['server/handlers/utils.js'][20]++;
      params[key] = qryParams[key];
}
  }
  _$jscoverage['server/handlers/utils.js'][24]++;
  return params;
}), getCookies: (function (request) {
  _$jscoverage['server/handlers/utils.js'][28]++;
  var cookies = {}, state;
  _$jscoverage['server/handlers/utils.js'][30]++;
  if ((! (state = request.state))) {
    _$jscoverage['server/handlers/utils.js'][31]++;
    return cookies;
  }
  _$jscoverage['server/handlers/utils.js'][34]++;
  for (var key in state) {
    _$jscoverage['server/handlers/utils.js'][35]++;
    cookies[key] = decodeURIComponent(state[key]);
}
  _$jscoverage['server/handlers/utils.js'][38]++;
  return cookies;
}), getAssets: (function (cmpName, ctx, options) {
  _$jscoverage['server/handlers/utils.js'][42]++;
  if ((! _.isEmpty(ctx._assets))) {
    _$jscoverage['server/handlers/utils.js'][43]++;
    var map = ctx._assets;
    _$jscoverage['server/handlers/utils.js'][44]++;
    (delete ctx._assets);
    _$jscoverage['server/handlers/utils.js'][45]++;
    return options.success(map);
  }
  _$jscoverage['server/handlers/utils.js'][48]++;
  if (LAZO.app.isClient) {
    _$jscoverage['server/handlers/utils.js'][49]++;
    return options.success((window.rootCtx? window.rootCtx.assets: {}));
  }
  _$jscoverage['server/handlers/utils.js'][52]++;
  LAZO.app.assets.map(cmpName, ctx, {success: options.success, error: options.error});
}), setAssets: (function (component, assets) {
  _$jscoverage['server/handlers/utils.js'][59]++;
  var self = this;
  _$jscoverage['server/handlers/utils.js'][61]++;
  component.ctx.assets = (component.ctx.assets || {});
  _$jscoverage['server/handlers/utils.js'][62]++;
  _.extend(component.ctx.assets, assets[component.name]);
  _$jscoverage['server/handlers/utils.js'][64]++;
  component.ctx.app = (component.ctx.app || {});
  _$jscoverage['server/handlers/utils.js'][65]++;
  component.ctx.app.assets = (component.ctx.app.assets || {});
  _$jscoverage['server/handlers/utils.js'][66]++;
  _.extend(component.ctx.app.assets, assets.app);
  _$jscoverage['server/handlers/utils.js'][68]++;
  _.each(component.children, (function (children) {
  _$jscoverage['server/handlers/utils.js'][69]++;
  _.each(children, (function (child) {
  _$jscoverage['server/handlers/utils.js'][70]++;
  self.setAssets(child, assets);
}));
}));
}), getRootCtxForReply: (function (ctx, assets) {
  _$jscoverage['server/handlers/utils.js'][76]++;
  return _.extend(_.omit(ctx._rootCtx, "modelInstances"), {dependencies: ctx._rootCtx.dependencies, assets: assets, modelInstances: {}});
}), getHeaders: (function (request) {
  _$jscoverage['server/handlers/utils.js'][84]++;
  return request.raw.req.headers;
}), getParsedUrl: (function (request) {
  _$jscoverage['server/handlers/utils.js'][88]++;
  return request.url;
})});
}));
