/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['server/server.js']) {
  _$jscoverage['server/server.js'] = [];
  _$jscoverage['server/server.js'][1] = 0;
  _$jscoverage['server/server.js'][14] = 0;
  _$jscoverage['server/server.js'][16] = 0;
  _$jscoverage['server/server.js'][19] = 0;
  _$jscoverage['server/server.js'][20] = 0;
  _$jscoverage['server/server.js'][24] = 0;
  _$jscoverage['server/server.js'][34] = 0;
  _$jscoverage['server/server.js'][39] = 0;
  _$jscoverage['server/server.js'][40] = 0;
  _$jscoverage['server/server.js'][49] = 0;
  _$jscoverage['server/server.js'][53] = 0;
  _$jscoverage['server/server.js'][61] = 0;
  _$jscoverage['server/server.js'][62] = 0;
  _$jscoverage['server/server.js'][64] = 0;
  _$jscoverage['server/server.js'][68] = 0;
  _$jscoverage['server/server.js'][70] = 0;
  _$jscoverage['server/server.js'][71] = 0;
  _$jscoverage['server/server.js'][74] = 0;
  _$jscoverage['server/server.js'][75] = 0;
  _$jscoverage['server/server.js'][76] = 0;
  _$jscoverage['server/server.js'][78] = 0;
  _$jscoverage['server/server.js'][79] = 0;
  _$jscoverage['server/server.js'][83] = 0;
  _$jscoverage['server/server.js'][85] = 0;
  _$jscoverage['server/server.js'][86] = 0;
  _$jscoverage['server/server.js'][88] = 0;
  _$jscoverage['server/server.js'][92] = 0;
  _$jscoverage['server/server.js'][96] = 0;
  _$jscoverage['server/server.js'][98] = 0;
  _$jscoverage['server/server.js'][99] = 0;
  _$jscoverage['server/server.js'][100] = 0;
  _$jscoverage['server/server.js'][103] = 0;
  _$jscoverage['server/server.js'][104] = 0;
  _$jscoverage['server/server.js'][108] = 0;
  _$jscoverage['server/server.js'][110] = 0;
  _$jscoverage['server/server.js'][111] = 0;
  _$jscoverage['server/server.js'][114] = 0;
  _$jscoverage['server/server.js'][116] = 0;
  _$jscoverage['server/server.js'][117] = 0;
  _$jscoverage['server/server.js'][118] = 0;
  _$jscoverage['server/server.js'][121] = 0;
  _$jscoverage['server/server.js'][125] = 0;
  _$jscoverage['server/server.js'][128] = 0;
  _$jscoverage['server/server.js'][129] = 0;
  _$jscoverage['server/server.js'][130] = 0;
  _$jscoverage['server/server.js'][133] = 0;
  _$jscoverage['server/server.js'][135] = 0;
  _$jscoverage['server/server.js'][141] = 0;
  _$jscoverage['server/server.js'][142] = 0;
  _$jscoverage['server/server.js'][146] = 0;
  _$jscoverage['server/server.js'][151] = 0;
  _$jscoverage['server/server.js'][155] = 0;
  _$jscoverage['server/server.js'][163] = 0;
  _$jscoverage['server/server.js'][164] = 0;
  _$jscoverage['server/server.js'][166] = 0;
  _$jscoverage['server/server.js'][174] = 0;
  _$jscoverage['server/server.js'][175] = 0;
  _$jscoverage['server/server.js'][177] = 0;
  _$jscoverage['server/server.js'][185] = 0;
  _$jscoverage['server/server.js'][186] = 0;
  _$jscoverage['server/server.js'][188] = 0;
  _$jscoverage['server/server.js'][195] = 0;
  _$jscoverage['server/server.js'][196] = 0;
  _$jscoverage['server/server.js'][198] = 0;
  _$jscoverage['server/server.js'][205] = 0;
  _$jscoverage['server/server.js'][206] = 0;
  _$jscoverage['server/server.js'][208] = 0;
  _$jscoverage['server/server.js'][212] = 0;
  _$jscoverage['server/server.js'][217] = 0;
  _$jscoverage['server/server.js'][218] = 0;
  _$jscoverage['server/server.js'][220] = 0;
  _$jscoverage['server/server.js'][224] = 0;
  _$jscoverage['server/server.js'][240] = 0;
  _$jscoverage['server/server.js'][241] = 0;
  _$jscoverage['server/server.js'][243] = 0;
  _$jscoverage['server/server.js'][250] = 0;
  _$jscoverage['server/server.js'][251] = 0;
  _$jscoverage['server/server.js'][253] = 0;
  _$jscoverage['server/server.js'][260] = 0;
  _$jscoverage['server/server.js'][261] = 0;
  _$jscoverage['server/server.js'][263] = 0;
  _$jscoverage['server/server.js'][267] = 0;
  _$jscoverage['server/server.js'][275] = 0;
  _$jscoverage['server/server.js'][276] = 0;
  _$jscoverage['server/server.js'][278] = 0;
  _$jscoverage['server/server.js'][282] = 0;
  _$jscoverage['server/server.js'][286] = 0;
  _$jscoverage['server/server.js'][287] = 0;
  _$jscoverage['server/server.js'][288] = 0;
  _$jscoverage['server/server.js'][290] = 0;
  _$jscoverage['server/server.js'][292] = 0;
  _$jscoverage['server/server.js'][293] = 0;
  _$jscoverage['server/server.js'][294] = 0;
  _$jscoverage['server/server.js'][295] = 0;
  _$jscoverage['server/server.js'][299] = 0;
  _$jscoverage['server/server.js'][300] = 0;
  _$jscoverage['server/server.js'][301] = 0;
  _$jscoverage['server/server.js'][302] = 0;
  _$jscoverage['server/server.js'][303] = 0;
  _$jscoverage['server/server.js'][304] = 0;
  _$jscoverage['server/server.js'][305] = 0;
  _$jscoverage['server/server.js'][309] = 0;
  _$jscoverage['server/server.js'][313] = 0;
  _$jscoverage['server/server.js'][315] = 0;
  _$jscoverage['server/server.js'][318] = 0;
  _$jscoverage['server/server.js'][319] = 0;
  _$jscoverage['server/server.js'][323] = 0;
  _$jscoverage['server/server.js'][326] = 0;
  _$jscoverage['server/server.js'][327] = 0;
  _$jscoverage['server/server.js'][330] = 0;
  _$jscoverage['server/server.js'][331] = 0;
  _$jscoverage['server/server.js'][335] = 0;
  _$jscoverage['server/server.js'][339] = 0;
  _$jscoverage['server/server.js'][340] = 0;
  _$jscoverage['server/server.js'][341] = 0;
  _$jscoverage['server/server.js'][342] = 0;
  _$jscoverage['server/server.js'][343] = 0;
  _$jscoverage['server/server.js'][348] = 0;
  _$jscoverage['server/server.js'][353] = 0;
  _$jscoverage['server/server.js'][356] = 0;
  _$jscoverage['server/server.js'][357] = 0;
  _$jscoverage['server/server.js'][358] = 0;
  _$jscoverage['server/server.js'][359] = 0;
  _$jscoverage['server/server.js'][360] = 0;
  _$jscoverage['server/server.js'][363] = 0;
  _$jscoverage['server/server.js'][364] = 0;
  _$jscoverage['server/server.js'][366] = 0;
  _$jscoverage['server/server.js'][367] = 0;
  _$jscoverage['server/server.js'][368] = 0;
  _$jscoverage['server/server.js'][371] = 0;
  _$jscoverage['server/server.js'][372] = 0;
  _$jscoverage['server/server.js'][373] = 0;
  _$jscoverage['server/server.js'][376] = 0;
  _$jscoverage['server/server.js'][377] = 0;
  _$jscoverage['server/server.js'][378] = 0;
  _$jscoverage['server/server.js'][381] = 0;
}
_$jscoverage['server/server.js'].source = ["define(","    ['hapi',","     'handlers/tunnel',","     'handlers/app/main',","     'handlers/assets',","     'handlers/ctlNavigate',","     'handlers/stream',","     'resolver/main',","     'cluster',","     'fs',","     'path'","    ], function (hapi, tunnelHandler, appHandler, assetsHandler, ctlNavHandler, streamHandler, resolver, cluster, fs, path) {","","    'use strict';","","    return {","","        initialize: function (errHandlers) {","            this.errHandlers = errHandlers;           ","            this._cluster(); // cluster server if !this.DEV","        },","","        _worker: function () {","            this._create() // create server instance","                ._views()","                ._extensions() // server extensions","                ._routes() // define app routes and add app handlers","                ._handlers() // add all other route handlers","                ._error() // init logger &amp; error handling","                ._start();","        },","","        _create: function () {","            this.server = new hapi.Server('0.0.0.0', LAZO.options.server.port, {","                maxSockets: LAZO.options.server.maxSockets,","                state: { cookies: { failAction: 'log', strictHeader: false } }","            });","            ","            if (LAZO.options.sslServer) {","                this.sslServer = new hapi.Server('0.0.0.0', LAZO.options.sslServer.port, {","                    maxSockets: LAZO.options.sslServer.maxSockets,","                    state: { cookies: { failAction: 'log', strictHeader: false } },","                    tls: {","                        key: fs.readFileSync(path.resolve(path.normalize(LAZO.FILE_REPO_DIR + '/config/' + LAZO.options.sslServer.tls.key))),","                        cert: fs.readFileSync(path.resolve(path.normalize(LAZO.FILE_REPO_DIR + '/config/' + LAZO.options.sslServer.tls.cert)))","                    }","                });","            }","            return this;","        },","","        _views: function () {","            var viewOptions = {","                engines: {","                    hbs: {","                        module: 'handlebars'","                    }","                },","                allowAbsolutePaths: true","            };","            this.server.views(viewOptions);","            this.sslServer &amp;&amp; this.sslServer.views(viewOptions);","            ","            return this;","        },","","        _extensions: function () {","            var self = this;","","            var preResponseHandler = function(request, next) {","                var response = request.response();","","                // if server render fails then send up HTML view, else return JSON error object","                if (response.isBoom) {","                    if (LAZO.CLUSTER &amp;&amp; response.response.code === 500) {","                        self._stop();","                    }","                    if (request.raw.req.headers['x-requested-with'] !== 'XMLHttpRequest') {","                        return next(request.generateView(self.errHandlers[response.response.code].server, response.response.payload));","                    }","                }","","                return next();","            };","            this.server.ext('onPreResponse', preResponseHandler);","            this.sslServer &amp;&amp; this.sslServer.ext('onPreResponse', preResponseHandler);","            ","            return this;","        },","","        _routes: function () {","            var self = this,","                routes,","                routeDefs = LAZO.routes,","                processRoute = function (route, svr) {","                    routes = resolver.transformRoute(route);","","                    if (routes.routeNoTrailingSlash) {","                        self._addAppRouteHandler('GET', routes.routeNoTrailingSlash, route, svr);","                        self._addAppRouteHandler('POST', routes.routeNoTrailingSlash, route, svr);","                    }","","                    self._addAppRouteHandler('GET', routes.route, route, svr);","                    self._addAppRouteHandler('POST', routes.route, route, svr);","                };","","            // give server a reference to routes, used later when handling the routes","            this.server._routes = routeDefs;","            ","            for (var route in routeDefs) {","                processRoute(route, this.server);","            }","","            if (LAZO.options.sslServer &amp;&amp; LAZO.options.sslServer._routes) {","                // give ssl server a reference to routes, used later when handling the routes","                this.sslServer._routes = LAZO.options.sslServer._routes;","                for (var route in LAZO.options.sslServer._routes) {","                    processRoute(route, this.sslServer);","                }","            }","            return this;","        },","","        _addAppRouteHandler: function (method, path, route, svr) {","            var self = this,","                definition = { method: method, path: path };","","            if (method === 'GET') {","                definition.handler = function (request) {","                    appHandler(request, route, svr);","                };","            } else {","                definition.config = {","                    handler: function (request) {","                        appHandler(request, route, svr);","                    },","                    payload: 'parse'","                };","            }","","            svr.route(definition);","            return this;","        },","","        _handlers: function () {","            this._tunnelHandler()","                ._assetsHandler()","                ._staticFilesHandler()","                ._ctlNavigate();","","            return this;","        },","","        _tunnelHandler: function () {","            var tunnelOptions = {","                method: 'POST',","                path: '/tunnel',","                config: {","                    handler: tunnelHandler,","                    payload: 'parse'","                }","            };","            this.server.route(tunnelOptions);","            this.sslServer &amp;&amp; this.sslServer.route(tunnelOptions);","","            var postFcaOptions = {","                method: 'POST',","                path: '/fn/{compName}/{action}',","                config: {","                    handler: streamHandler,","                    payload: 'parse'","                }","            };","            this.server.route(postFcaOptions);","            this.sslServer &amp;&amp; this.sslServer.route(postFcaOptions);","","            var postFaOptions = {","                method: 'POST',","                path: '/fn/{action}',","                config: {","                    handler: streamHandler,","                    payload: 'parse'","                }","            };","            this.server.route(postFaOptions);","            this.sslServer &amp;&amp; this.sslServer.route(postFaOptions);","","            var getFcaOptions = {","                method: 'GET',","                path: '/fn/{compName}/{action}',","                config: {","                    handler: streamHandler","                }","            };","            this.server.route(getFcaOptions);","            this.sslServer &amp;&amp; this.sslServer.route(getFcaOptions);","","            var getFaOptions = {","                method: 'GET',","                path: '/fn/{action}',","                config: {","                    handler: streamHandler","                }","            };","            this.server.route(getFaOptions);","            this.sslServer &amp;&amp; this.sslServer.route(getFaOptions);","","            return this;","        },","","        _assetsHandler: function () {","            var assetOptions = {","                method: 'GET',","                path: '/assets',","                handler: assetsHandler","            };","            this.server.route(assetOptions);","            this.sslServer &amp;&amp; this.sslServer.route(assetOptions);","","            return this;","        },","","        _staticFilesHandler: function () {","            var pathsOptions = {","                method: 'GET',","                path: '/{path*}',","                handler: {","                    directory: {","                        path: [","                            LAZO.BASE_REPO_DIR,","                            LAZO.FILE_REPO_DIR,","                            LAZO.BASE_PATH,","                            LAZO.BASE_PATH + '/lib'","                        ],","                        listing: true,","                        index: true","                    }","                }","            };","            this.server.route(pathsOptions);","            this.sslServer &amp;&amp; this.sslServer.route(pathsOptions);","","            var libOptions = {","                method: 'GET',","                path: '/lib/{path*}',","                handler: {","                    directory: { path: [LAZO.BASE_PATH + '/lib'], listing: true, index: true }","                }","            };","            this.server.route(libOptions);","            this.sslServer &amp;&amp; this.sslServer.route(libOptions);","","            var baseOptions = {","                method: 'GET',","                path: '/base/{path*}',","                handler: {","                    directory: { path: [LAZO.BASE_PATH + '/base'], listing: true, index: true }","                }","            };","            this.server.route(baseOptions);","            this.sslServer &amp;&amp; this.sslServer.route(baseOptions);","","            return this;","        },","","        _ctlNavigate: function () {","            var navOptions = {","                method: 'POST',","                path: '/navigate',","                config: {","                    handler: ctlNavHandler,","                    payload: 'parse'","                }","            };","            this.server.route(navOptions);","            this.sslServer &amp;&amp; this.sslServer.route(navOptions);","","            return this;","        },","","        _error: function () {","            var logger = LAZO.logger,","                ev = this.server.on ? this.server : this.server.events,","                self = this;","","            logger.setConsoleLogging(null);","            logger.setConsoleLogging('warn');","            logger.setServer(this.server);","","            ev.on('log', function (event, tags) {","","                if (!tags) {","                    tags = {};","                    event.tags.forEach(function (tag) {","                        tags[tag] = true;","                    });","                }","","                if (!tags.hapi) {","                    var keys = Object.keys(tags);","                    console.error(Object.keys(tags) + ':' + event.data);","                } else if (tags.uncaught) {","                    console.error('Error: ' + event.data.trace);","                } else if (tags.internal) {","                    console.error('Error: ' + event.data.message);","                }","            });","","            return this;","        },","","        _start: function () {","            var self = this;","","            this.server.pack.require('crumb', [","                { ext: true }","            ], function (err) {","                if (!err) {","                    self.server.start();","                }","            });","","            this.sslServer &amp;&amp; this.sslServer.pack.require('crumb', [","                { ext: true }","            ], function (err) {","                if (!err) {","                    self.sslServer.start();","                }","                else {","                    console.log('ssl start error ');//TODO:REMOVE","                    console.log(err);//TODO:REMOVE","                }","            });","","            return this;","        },","","        _stop: function () {","            try {","                this.server.stop(function () {","                    this.sslServer &amp;&amp; this.sslServer.stop(function () {","                        cluster.worker.disconnect();","                        process.exit(1);","                    });","                });","","            } catch (err) {","                this.server.log('debug', 'Error stopping server and disconnecting worker ' + err);","            }","        },","","        _cluster: function () {","            var os,","                cpus;","","            if (!LAZO.CLUSTER) {","                this._worker();","                this.server.log('debug', 'Started connect server listening on port ' + LAZO.PORT);","                this.sslServer &amp;&amp; this.sslServer.log('debug', 'Started connect server listening on port ' + LAZO.options.sslServer.port);","                return this;","            }","","            os = require('os');","            cpus = os.cpus().length;","","            if (cluster.isMaster) {","                for (var i = 0; i &lt; cpus; i++) {","                    cluster.fork();","                }","","                cluster.on('disconnect', function (worker) {","                    LAZO.logger.log('error', 'worker ' + worker.process.pid + ' was disconnected');","                    cluster.fork();","                });","            } else {","                this._worker();","                this.server.log('debug', 'Started connect server listening on port ' + LAZO.PORT);","                this.sslServer &amp;&amp; this.sslServer.log('debug', 'Started connect server listening on port ' + LAZO.options.sslServer.port);","            }","","            return this;","        }","","    };","","});"];
_$jscoverage['server/server.js'][1]++;
define(["hapi", "handlers/tunnel", "handlers/app/main", "handlers/assets", "handlers/ctlNavigate", "handlers/stream", "resolver/main", "cluster", "fs", "path"], (function (hapi, tunnelHandler, appHandler, assetsHandler, ctlNavHandler, streamHandler, resolver, cluster, fs, path) {
  _$jscoverage['server/server.js'][14]++;
  "use strict";
  _$jscoverage['server/server.js'][16]++;
  return ({initialize: (function (errHandlers) {
  _$jscoverage['server/server.js'][19]++;
  this.errHandlers = errHandlers;
  _$jscoverage['server/server.js'][20]++;
  this._cluster();
}), _worker: (function () {
  _$jscoverage['server/server.js'][24]++;
  this._create()._views()._extensions()._routes()._handlers()._error()._start();
}), _create: (function () {
  _$jscoverage['server/server.js'][34]++;
  this.server = new (hapi.Server)("0.0.0.0", LAZO.options.server.port, {maxSockets: LAZO.options.server.maxSockets, state: {cookies: {failAction: "log", strictHeader: false}}});
  _$jscoverage['server/server.js'][39]++;
  if (LAZO.options.sslServer) {
    _$jscoverage['server/server.js'][40]++;
    this.sslServer = new (hapi.Server)("0.0.0.0", LAZO.options.sslServer.port, {maxSockets: LAZO.options.sslServer.maxSockets, state: {cookies: {failAction: "log", strictHeader: false}}, tls: {key: fs.readFileSync(path.resolve(path.normalize((LAZO.FILE_REPO_DIR + "/config/" + LAZO.options.sslServer.tls.key)))), cert: fs.readFileSync(path.resolve(path.normalize((LAZO.FILE_REPO_DIR + "/config/" + LAZO.options.sslServer.tls.cert))))}});
  }
  _$jscoverage['server/server.js'][49]++;
  return this;
}), _views: (function () {
  _$jscoverage['server/server.js'][53]++;
  var viewOptions = {engines: {hbs: {module: "handlebars"}}, allowAbsolutePaths: true};
  _$jscoverage['server/server.js'][61]++;
  this.server.views(viewOptions);
  _$jscoverage['server/server.js'][62]++;
  (this.sslServer && this.sslServer.views(viewOptions));
  _$jscoverage['server/server.js'][64]++;
  return this;
}), _extensions: (function () {
  _$jscoverage['server/server.js'][68]++;
  var self = this;
  _$jscoverage['server/server.js'][70]++;
  var preResponseHandler = (function (request, next) {
  _$jscoverage['server/server.js'][71]++;
  var response = request.response();
  _$jscoverage['server/server.js'][74]++;
  if (response.isBoom) {
    _$jscoverage['server/server.js'][75]++;
    if ((LAZO.CLUSTER && (response.response.code === 500))) {
      _$jscoverage['server/server.js'][76]++;
      self._stop();
    }
    _$jscoverage['server/server.js'][78]++;
    if ((request.raw.req.headers["x-requested-with"] !== "XMLHttpRequest")) {
      _$jscoverage['server/server.js'][79]++;
      return next(request.generateView(self.errHandlers[response.response.code].server, response.response.payload));
    }
  }
  _$jscoverage['server/server.js'][83]++;
  return next();
});
  _$jscoverage['server/server.js'][85]++;
  this.server.ext("onPreResponse", preResponseHandler);
  _$jscoverage['server/server.js'][86]++;
  (this.sslServer && this.sslServer.ext("onPreResponse", preResponseHandler));
  _$jscoverage['server/server.js'][88]++;
  return this;
}), _routes: (function () {
  _$jscoverage['server/server.js'][92]++;
  var self = this, routes, routeDefs = LAZO.routes, processRoute = (function (route, svr) {
  _$jscoverage['server/server.js'][96]++;
  routes = resolver.transformRoute(route);
  _$jscoverage['server/server.js'][98]++;
  if (routes.routeNoTrailingSlash) {
    _$jscoverage['server/server.js'][99]++;
    self._addAppRouteHandler("GET", routes.routeNoTrailingSlash, route, svr);
    _$jscoverage['server/server.js'][100]++;
    self._addAppRouteHandler("POST", routes.routeNoTrailingSlash, route, svr);
  }
  _$jscoverage['server/server.js'][103]++;
  self._addAppRouteHandler("GET", routes.route, route, svr);
  _$jscoverage['server/server.js'][104]++;
  self._addAppRouteHandler("POST", routes.route, route, svr);
});
  _$jscoverage['server/server.js'][108]++;
  this.server._routes = routeDefs;
  _$jscoverage['server/server.js'][110]++;
  for (var route in routeDefs) {
    _$jscoverage['server/server.js'][111]++;
    processRoute(route, this.server);
}
  _$jscoverage['server/server.js'][114]++;
  if ((LAZO.options.sslServer && LAZO.options.sslServer._routes)) {
    _$jscoverage['server/server.js'][116]++;
    this.sslServer._routes = LAZO.options.sslServer._routes;
    _$jscoverage['server/server.js'][117]++;
    for (var route = route in LAZO.options.sslServer._routes) {
      _$jscoverage['server/server.js'][118]++;
      processRoute(route, this.sslServer);
}
  }
  _$jscoverage['server/server.js'][121]++;
  return this;
}), _addAppRouteHandler: (function (method, path, route, svr) {
  _$jscoverage['server/server.js'][125]++;
  var self = this, definition = {method: method, path: path};
  _$jscoverage['server/server.js'][128]++;
  if ((method === "GET")) {
    _$jscoverage['server/server.js'][129]++;
    definition.handler = (function (request) {
  _$jscoverage['server/server.js'][130]++;
  appHandler(request, route, svr);
});
  }
  else {
    _$jscoverage['server/server.js'][133]++;
    definition.config = {handler: (function (request) {
  _$jscoverage['server/server.js'][135]++;
  appHandler(request, route, svr);
}), payload: "parse"};
  }
  _$jscoverage['server/server.js'][141]++;
  svr.route(definition);
  _$jscoverage['server/server.js'][142]++;
  return this;
}), _handlers: (function () {
  _$jscoverage['server/server.js'][146]++;
  this._tunnelHandler()._assetsHandler()._staticFilesHandler()._ctlNavigate();
  _$jscoverage['server/server.js'][151]++;
  return this;
}), _tunnelHandler: (function () {
  _$jscoverage['server/server.js'][155]++;
  var tunnelOptions = {method: "POST", path: "/tunnel", config: {handler: tunnelHandler, payload: "parse"}};
  _$jscoverage['server/server.js'][163]++;
  this.server.route(tunnelOptions);
  _$jscoverage['server/server.js'][164]++;
  (this.sslServer && this.sslServer.route(tunnelOptions));
  _$jscoverage['server/server.js'][166]++;
  var postFcaOptions = {method: "POST", path: "/fn/{compName}/{action}", config: {handler: streamHandler, payload: "parse"}};
  _$jscoverage['server/server.js'][174]++;
  this.server.route(postFcaOptions);
  _$jscoverage['server/server.js'][175]++;
  (this.sslServer && this.sslServer.route(postFcaOptions));
  _$jscoverage['server/server.js'][177]++;
  var postFaOptions = {method: "POST", path: "/fn/{action}", config: {handler: streamHandler, payload: "parse"}};
  _$jscoverage['server/server.js'][185]++;
  this.server.route(postFaOptions);
  _$jscoverage['server/server.js'][186]++;
  (this.sslServer && this.sslServer.route(postFaOptions));
  _$jscoverage['server/server.js'][188]++;
  var getFcaOptions = {method: "GET", path: "/fn/{compName}/{action}", config: {handler: streamHandler}};
  _$jscoverage['server/server.js'][195]++;
  this.server.route(getFcaOptions);
  _$jscoverage['server/server.js'][196]++;
  (this.sslServer && this.sslServer.route(getFcaOptions));
  _$jscoverage['server/server.js'][198]++;
  var getFaOptions = {method: "GET", path: "/fn/{action}", config: {handler: streamHandler}};
  _$jscoverage['server/server.js'][205]++;
  this.server.route(getFaOptions);
  _$jscoverage['server/server.js'][206]++;
  (this.sslServer && this.sslServer.route(getFaOptions));
  _$jscoverage['server/server.js'][208]++;
  return this;
}), _assetsHandler: (function () {
  _$jscoverage['server/server.js'][212]++;
  var assetOptions = {method: "GET", path: "/assets", handler: assetsHandler};
  _$jscoverage['server/server.js'][217]++;
  this.server.route(assetOptions);
  _$jscoverage['server/server.js'][218]++;
  (this.sslServer && this.sslServer.route(assetOptions));
  _$jscoverage['server/server.js'][220]++;
  return this;
}), _staticFilesHandler: (function () {
  _$jscoverage['server/server.js'][224]++;
  var pathsOptions = {method: "GET", path: "/{path*}", handler: {directory: {path: [LAZO.BASE_REPO_DIR, LAZO.FILE_REPO_DIR, LAZO.BASE_PATH, (LAZO.BASE_PATH + "/lib")], listing: true, index: true}}};
  _$jscoverage['server/server.js'][240]++;
  this.server.route(pathsOptions);
  _$jscoverage['server/server.js'][241]++;
  (this.sslServer && this.sslServer.route(pathsOptions));
  _$jscoverage['server/server.js'][243]++;
  var libOptions = {method: "GET", path: "/lib/{path*}", handler: {directory: {path: [(LAZO.BASE_PATH + "/lib")], listing: true, index: true}}};
  _$jscoverage['server/server.js'][250]++;
  this.server.route(libOptions);
  _$jscoverage['server/server.js'][251]++;
  (this.sslServer && this.sslServer.route(libOptions));
  _$jscoverage['server/server.js'][253]++;
  var baseOptions = {method: "GET", path: "/base/{path*}", handler: {directory: {path: [(LAZO.BASE_PATH + "/base")], listing: true, index: true}}};
  _$jscoverage['server/server.js'][260]++;
  this.server.route(baseOptions);
  _$jscoverage['server/server.js'][261]++;
  (this.sslServer && this.sslServer.route(baseOptions));
  _$jscoverage['server/server.js'][263]++;
  return this;
}), _ctlNavigate: (function () {
  _$jscoverage['server/server.js'][267]++;
  var navOptions = {method: "POST", path: "/navigate", config: {handler: ctlNavHandler, payload: "parse"}};
  _$jscoverage['server/server.js'][275]++;
  this.server.route(navOptions);
  _$jscoverage['server/server.js'][276]++;
  (this.sslServer && this.sslServer.route(navOptions));
  _$jscoverage['server/server.js'][278]++;
  return this;
}), _error: (function () {
  _$jscoverage['server/server.js'][282]++;
  var logger = LAZO.logger, ev = (this.server.on? this.server: this.server.events), self = this;
  _$jscoverage['server/server.js'][286]++;
  logger.setConsoleLogging(null);
  _$jscoverage['server/server.js'][287]++;
  logger.setConsoleLogging("warn");
  _$jscoverage['server/server.js'][288]++;
  logger.setServer(this.server);
  _$jscoverage['server/server.js'][290]++;
  ev.on("log", (function (event, tags) {
  _$jscoverage['server/server.js'][292]++;
  if ((! tags)) {
    _$jscoverage['server/server.js'][293]++;
    tags = {};
    _$jscoverage['server/server.js'][294]++;
    event.tags.forEach((function (tag) {
  _$jscoverage['server/server.js'][295]++;
  tags[tag] = true;
}));
  }
  _$jscoverage['server/server.js'][299]++;
  if ((! tags.hapi)) {
    _$jscoverage['server/server.js'][300]++;
    var keys = Object.keys(tags);
    _$jscoverage['server/server.js'][301]++;
    console.error((Object.keys(tags) + ":" + event.data));
  }
  else {
    _$jscoverage['server/server.js'][302]++;
    if (tags.uncaught) {
      _$jscoverage['server/server.js'][303]++;
      console.error(("Error: " + event.data.trace));
    }
    else {
      _$jscoverage['server/server.js'][304]++;
      if (tags.internal) {
        _$jscoverage['server/server.js'][305]++;
        console.error(("Error: " + event.data.message));
      }
    }
  }
}));
  _$jscoverage['server/server.js'][309]++;
  return this;
}), _start: (function () {
  _$jscoverage['server/server.js'][313]++;
  var self = this;
  _$jscoverage['server/server.js'][315]++;
  this.server.pack.require("crumb", [{ext: true}], (function (err) {
  _$jscoverage['server/server.js'][318]++;
  if ((! err)) {
    _$jscoverage['server/server.js'][319]++;
    self.server.start();
  }
}));
  _$jscoverage['server/server.js'][323]++;
  (this.sslServer && this.sslServer.pack.require("crumb", [{ext: true}], (function (err) {
  _$jscoverage['server/server.js'][326]++;
  if ((! err)) {
    _$jscoverage['server/server.js'][327]++;
    self.sslServer.start();
  }
  else {
    _$jscoverage['server/server.js'][330]++;
    console.log("ssl start error ");
    _$jscoverage['server/server.js'][331]++;
    console.log(err);
  }
})));
  _$jscoverage['server/server.js'][335]++;
  return this;
}), _stop: (function () {
  _$jscoverage['server/server.js'][339]++;
  try {
    _$jscoverage['server/server.js'][340]++;
    this.server.stop((function () {
  _$jscoverage['server/server.js'][341]++;
  (this.sslServer && this.sslServer.stop((function () {
  _$jscoverage['server/server.js'][342]++;
  cluster.worker.disconnect();
  _$jscoverage['server/server.js'][343]++;
  process.exit(1);
})));
}));
  }
  catch (err) {
    _$jscoverage['server/server.js'][348]++;
    this.server.log("debug", ("Error stopping server and disconnecting worker " + err));
  }
}), _cluster: (function () {
  _$jscoverage['server/server.js'][353]++;
  var os, cpus;
  _$jscoverage['server/server.js'][356]++;
  if ((! LAZO.CLUSTER)) {
    _$jscoverage['server/server.js'][357]++;
    this._worker();
    _$jscoverage['server/server.js'][358]++;
    this.server.log("debug", ("Started connect server listening on port " + LAZO.PORT));
    _$jscoverage['server/server.js'][359]++;
    (this.sslServer && this.sslServer.log("debug", ("Started connect server listening on port " + LAZO.options.sslServer.port)));
    _$jscoverage['server/server.js'][360]++;
    return this;
  }
  _$jscoverage['server/server.js'][363]++;
  os = require("os");
  _$jscoverage['server/server.js'][364]++;
  cpus = os.cpus().length;
  _$jscoverage['server/server.js'][366]++;
  if (cluster.isMaster) {
    _$jscoverage['server/server.js'][367]++;
    for (var i = 0; (i < cpus); (i++)) {
      _$jscoverage['server/server.js'][368]++;
      cluster.fork();
}
    _$jscoverage['server/server.js'][371]++;
    cluster.on("disconnect", (function (worker) {
  _$jscoverage['server/server.js'][372]++;
  LAZO.logger.log("error", ("worker " + worker.process.pid + " was disconnected"));
  _$jscoverage['server/server.js'][373]++;
  cluster.fork();
}));
  }
  else {
    _$jscoverage['server/server.js'][376]++;
    this._worker();
    _$jscoverage['server/server.js'][377]++;
    this.server.log("debug", ("Started connect server listening on port " + LAZO.PORT));
    _$jscoverage['server/server.js'][378]++;
    (this.sslServer && this.sslServer.log("debug", ("Started connect server listening on port " + LAZO.options.sslServer.port)));
  }
  _$jscoverage['server/server.js'][381]++;
  return this;
})});
}));
