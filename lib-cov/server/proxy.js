/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['server/proxy.js']) {
  _$jscoverage['server/proxy.js'] = [];
  _$jscoverage['server/proxy.js'][1] = 0;
  _$jscoverage['server/proxy.js'][3] = 0;
  _$jscoverage['server/proxy.js'][5] = 0;
  _$jscoverage['server/proxy.js'][6] = 0;
  _$jscoverage['server/proxy.js'][7] = 0;
  _$jscoverage['server/proxy.js'][8] = 0;
  _$jscoverage['server/proxy.js'][9] = 0;
  _$jscoverage['server/proxy.js'][11] = 0;
  _$jscoverage['server/proxy.js'][15] = 0;
  _$jscoverage['server/proxy.js'][18] = 0;
  _$jscoverage['server/proxy.js'][19] = 0;
  _$jscoverage['server/proxy.js'][21] = 0;
  _$jscoverage['server/proxy.js'][23] = 0;
  _$jscoverage['server/proxy.js'][25] = 0;
  _$jscoverage['server/proxy.js'][26] = 0;
  _$jscoverage['server/proxy.js'][28] = 0;
  _$jscoverage['server/proxy.js'][29] = 0;
  _$jscoverage['server/proxy.js'][31] = 0;
  _$jscoverage['server/proxy.js'][32] = 0;
  _$jscoverage['server/proxy.js'][34] = 0;
  _$jscoverage['server/proxy.js'][35] = 0;
  _$jscoverage['server/proxy.js'][39] = 0;
  _$jscoverage['server/proxy.js'][45] = 0;
  _$jscoverage['server/proxy.js'][46] = 0;
  _$jscoverage['server/proxy.js'][47] = 0;
  _$jscoverage['server/proxy.js'][48] = 0;
  _$jscoverage['server/proxy.js'][49] = 0;
  _$jscoverage['server/proxy.js'][51] = 0;
  _$jscoverage['server/proxy.js'][55] = 0;
  _$jscoverage['server/proxy.js'][58] = 0;
  _$jscoverage['server/proxy.js'][59] = 0;
  _$jscoverage['server/proxy.js'][61] = 0;
  _$jscoverage['server/proxy.js'][62] = 0;
  _$jscoverage['server/proxy.js'][65] = 0;
  _$jscoverage['server/proxy.js'][68] = 0;
  _$jscoverage['server/proxy.js'][74] = 0;
  _$jscoverage['server/proxy.js'][75] = 0;
  _$jscoverage['server/proxy.js'][76] = 0;
  _$jscoverage['server/proxy.js'][78] = 0;
  _$jscoverage['server/proxy.js'][79] = 0;
  _$jscoverage['server/proxy.js'][81] = 0;
  _$jscoverage['server/proxy.js'][84] = 0;
  _$jscoverage['server/proxy.js'][85] = 0;
  _$jscoverage['server/proxy.js'][86] = 0;
  _$jscoverage['server/proxy.js'][87] = 0;
  _$jscoverage['server/proxy.js'][89] = 0;
  _$jscoverage['server/proxy.js'][92] = 0;
}
_$jscoverage['server/proxy.js'].source = ["define(['base', 'underscore', 'serviceProxy', 'fs', 'path'], function (Base, _, ServiceProxy, fs, path) {","","    var Proxy = Base.extend({","        sync: function(method, options) {","            var model = this;","            var validationResp = doValidate(model);","            if (validationResp) {","                if (options.error) {","                    return options.error(validationResp);","                } else {","                    throw new Error('Error back not defined');","                }","            }","","            findSyncer(model, {","                success: function(Syncher) {","","                    var sync = new Syncher();","                    sync.proxy = new ServiceProxy(model.ctx);","","                    var opts = _.extend({ params: model.params || {} }, options);","","                    switch (method) {","                    case 'read':","                        sync.fetch(opts);","                        break;","                    case 'create':","                        sync.add(model.attributes, opts);","                        break;","                    case 'update':","                        sync.update(model.attributes, opts);","                        break;","                    case 'delete':","                        sync.destroy(model.attributes, opts);","                        break;","                    }","                },","                error: function(err) {","                    ServiceProxy.prototype.sync.call(this, method, model, options);","                }","            });","        },","","        callSyncher: function(fname, args, options) {","            var model = this;","            var validationResp = doValidate(model);","            if (validationResp) {","                if (options.error) {","                    return options.error(validationResp);","                } else {","                    throw new Error('Error back not defined');","                }","            }","","            findSyncer(model, {","                success: function(Syncher) {","","                    var sync = new Syncher();","                    sync.proxy = new ServiceProxy(model.ctx);","","                    if (typeof(sync[fname]) === 'function') {","                        return sync[fname](args, options);","                    }","","                    return options.error({error: 'Method not found in syncher: ' + fname});","                },","                error: function(err) {","                    return options.error({error: 'No syncher defined for model: ' + model.name});","                }","            });","        }","    });","","    function doValidate(model) {","        if (!model.name) {","            return {error: 'model does not have a name'};","        }","        if (!model.ctx) {","                return {error: 'model does not have a context'};","        }","        return null;","    }","","    function findSyncer(model, options) {","        var exists = fs.existsSync(path.join(LAZO.FILE_REPO_PATH, 'models', model.name, 'server', 'syncher.js'));","        if(!exists){","            return options.error(Error(\"syncher.js not found for model \" + model.name));","        }","        LAZO.require(['models/' + model.name + '/server/syncher'], options.success, options.error);","    }","","    return Proxy;","});"];
_$jscoverage['server/proxy.js'][1]++;
define(["base", "underscore", "serviceProxy", "fs", "path"], (function (Base, _, ServiceProxy, fs, path) {
  _$jscoverage['server/proxy.js'][3]++;
  var Proxy = Base.extend({sync: (function (method, options) {
  _$jscoverage['server/proxy.js'][5]++;
  var model = this;
  _$jscoverage['server/proxy.js'][6]++;
  var validationResp = doValidate(model);
  _$jscoverage['server/proxy.js'][7]++;
  if (validationResp) {
    _$jscoverage['server/proxy.js'][8]++;
    if (options.error) {
      _$jscoverage['server/proxy.js'][9]++;
      return options.error(validationResp);
    }
    else {
      _$jscoverage['server/proxy.js'][11]++;
      throw new Error("Error back not defined");
    }
  }
  _$jscoverage['server/proxy.js'][15]++;
  findSyncer(model, {success: (function (Syncher) {
  _$jscoverage['server/proxy.js'][18]++;
  var sync = new Syncher();
  _$jscoverage['server/proxy.js'][19]++;
  sync.proxy = new ServiceProxy(model.ctx);
  _$jscoverage['server/proxy.js'][21]++;
  var opts = _.extend({params: (model.params || {})}, options);
  _$jscoverage['server/proxy.js'][23]++;
  switch (method) {
  case "read":
    _$jscoverage['server/proxy.js'][25]++;
    sync.fetch(opts);
    _$jscoverage['server/proxy.js'][26]++;
    break;
  case "create":
    _$jscoverage['server/proxy.js'][28]++;
    sync.add(model.attributes, opts);
    _$jscoverage['server/proxy.js'][29]++;
    break;
  case "update":
    _$jscoverage['server/proxy.js'][31]++;
    sync.update(model.attributes, opts);
    _$jscoverage['server/proxy.js'][32]++;
    break;
  case "delete":
    _$jscoverage['server/proxy.js'][34]++;
    sync.destroy(model.attributes, opts);
    _$jscoverage['server/proxy.js'][35]++;
    break;
  }
}), error: (function (err) {
  _$jscoverage['server/proxy.js'][39]++;
  ServiceProxy.prototype.sync.call(this, method, model, options);
})});
}), callSyncher: (function (fname, args, options) {
  _$jscoverage['server/proxy.js'][45]++;
  var model = this;
  _$jscoverage['server/proxy.js'][46]++;
  var validationResp = doValidate(model);
  _$jscoverage['server/proxy.js'][47]++;
  if (validationResp) {
    _$jscoverage['server/proxy.js'][48]++;
    if (options.error) {
      _$jscoverage['server/proxy.js'][49]++;
      return options.error(validationResp);
    }
    else {
      _$jscoverage['server/proxy.js'][51]++;
      throw new Error("Error back not defined");
    }
  }
  _$jscoverage['server/proxy.js'][55]++;
  findSyncer(model, {success: (function (Syncher) {
  _$jscoverage['server/proxy.js'][58]++;
  var sync = new Syncher();
  _$jscoverage['server/proxy.js'][59]++;
  sync.proxy = new ServiceProxy(model.ctx);
  _$jscoverage['server/proxy.js'][61]++;
  if (((typeof sync[fname]) === "function")) {
    _$jscoverage['server/proxy.js'][62]++;
    return (sync[fname])(args, options);
  }
  _$jscoverage['server/proxy.js'][65]++;
  return options.error({error: ("Method not found in syncher: " + fname)});
}), error: (function (err) {
  _$jscoverage['server/proxy.js'][68]++;
  return options.error({error: ("No syncher defined for model: " + model.name)});
})});
})});
  _$jscoverage['server/proxy.js'][74]++;
  function doValidate(model) {
    _$jscoverage['server/proxy.js'][75]++;
    if ((! model.name)) {
      _$jscoverage['server/proxy.js'][76]++;
      return ({error: "model does not have a name"});
    }
    _$jscoverage['server/proxy.js'][78]++;
    if ((! model.ctx)) {
      _$jscoverage['server/proxy.js'][79]++;
      return ({error: "model does not have a context"});
    }
    _$jscoverage['server/proxy.js'][81]++;
    return null;
}
  _$jscoverage['server/proxy.js'][84]++;
  function findSyncer(model, options) {
    _$jscoverage['server/proxy.js'][85]++;
    var exists = fs.existsSync(path.join(LAZO.FILE_REPO_PATH, "models", model.name, "server", "syncher.js"));
    _$jscoverage['server/proxy.js'][86]++;
    if ((! exists)) {
      _$jscoverage['server/proxy.js'][87]++;
      return options.error(Error(("syncher.js not found for model " + model.name)));
    }
    _$jscoverage['server/proxy.js'][89]++;
    LAZO.require([("models/" + model.name + "/server/syncher")], options.success, options.error);
}
  _$jscoverage['server/proxy.js'][92]++;
  return Proxy;
}));
