/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['server/resolver/file.js']) {
  _$jscoverage['server/resolver/file.js'] = [];
  _$jscoverage['server/resolver/file.js'][1] = 0;
  _$jscoverage['server/resolver/file.js'][3] = 0;
  _$jscoverage['server/resolver/file.js'][5] = 0;
  _$jscoverage['server/resolver/file.js'][9] = 0;
  _$jscoverage['server/resolver/file.js'][12] = 0;
  _$jscoverage['server/resolver/file.js'][27] = 0;
  _$jscoverage['server/resolver/file.js'][28] = 0;
  _$jscoverage['server/resolver/file.js'][29] = 0;
  _$jscoverage['server/resolver/file.js'][32] = 0;
  _$jscoverage['server/resolver/file.js'][34] = 0;
  _$jscoverage['server/resolver/file.js'][35] = 0;
  _$jscoverage['server/resolver/file.js'][36] = 0;
  _$jscoverage['server/resolver/file.js'][37] = 0;
  _$jscoverage['server/resolver/file.js'][38] = 0;
  _$jscoverage['server/resolver/file.js'][45] = 0;
  _$jscoverage['server/resolver/file.js'][50] = 0;
  _$jscoverage['server/resolver/file.js'][52] = 0;
  _$jscoverage['server/resolver/file.js'][53] = 0;
  _$jscoverage['server/resolver/file.js'][54] = 0;
  _$jscoverage['server/resolver/file.js'][59] = 0;
  _$jscoverage['server/resolver/file.js'][60] = 0;
  _$jscoverage['server/resolver/file.js'][61] = 0;
  _$jscoverage['server/resolver/file.js'][64] = 0;
  _$jscoverage['server/resolver/file.js'][68] = 0;
  _$jscoverage['server/resolver/file.js'][70] = 0;
  _$jscoverage['server/resolver/file.js'][71] = 0;
  _$jscoverage['server/resolver/file.js'][72] = 0;
  _$jscoverage['server/resolver/file.js'][75] = 0;
  _$jscoverage['server/resolver/file.js'][76] = 0;
  _$jscoverage['server/resolver/file.js'][77] = 0;
  _$jscoverage['server/resolver/file.js'][78] = 0;
  _$jscoverage['server/resolver/file.js'][81] = 0;
  _$jscoverage['server/resolver/file.js'][82] = 0;
  _$jscoverage['server/resolver/file.js'][83] = 0;
  _$jscoverage['server/resolver/file.js'][86] = 0;
  _$jscoverage['server/resolver/file.js'][87] = 0;
  _$jscoverage['server/resolver/file.js'][90] = 0;
  _$jscoverage['server/resolver/file.js'][91] = 0;
  _$jscoverage['server/resolver/file.js'][92] = 0;
  _$jscoverage['server/resolver/file.js'][94] = 0;
  _$jscoverage['server/resolver/file.js'][95] = 0;
  _$jscoverage['server/resolver/file.js'][98] = 0;
}
_$jscoverage['server/resolver/file.js'].source = ["define(function () {","","    'use strict';","","    var fs = require('fs'),","        path = require('path'),","        dir = require('node-dir');","","    return {","","        getErrorTemplatePaths: function (callback) {","            var errorPaths = {","                    '404': {","                        server: LAZO.BASE_PATH + '/base/404.hbs',","                        client: '/base/404.hbs'","                    },","                    '500': {","                        server: LAZO.BASE_PATH + '/base/500.hbs',","                        client: '/base/500.hbs'","                    }","                },","                basename,","                clientPath,","                serverPath,","                directory = path.normalize(LAZO.FILE_REPO_PATH + '/app/' + 'views');","","            this.list(directory, { ext: '.hbs' },  function (err, files) {","                if (err) {","                    throw err;","                }","","                for (var i = 0; i &lt; files.length; i++) {","","                    basename = path.basename(files[i], '.hbs');","                    serverPath = path.normalize(files[i]);","                    clientPath = path.normalize(serverPath.replace(LAZO.FILE_REPO_PATH, '/'));","                    if (basename === '404' || basename === '500') {","                        errorPaths[basename] = {","                            server: serverPath,","                            client: clientPath","                        };","                    }","                }","","                callback(null, errorPaths);","            });","        },","","        isBase: function (modulePath, moduleType, callback, options) { // options should contain the data stores on the client","            var request;","","            modulePath = path.normalize(LAZO.FILE_REPO_PATH + '/' + modulePath + '.js');","            fs.exists(modulePath, function (exists) {","                callback(!exists);","            });","        },","","        resolvePath: function (from, to) {","            if (LAZO.app.isClient) {","                LAZO.logger.warn('resolver.resolvePath should not be called on client');","                return from;","            }","","            return path.resolve(from, to);","        },","","        list: function (directory, options, callback) {","            var filtered = [];","","            if (LAZO.app.isClient) {","                LAZO.logger.warn('resolver.list should only be called on the server');","                return callback(null, []);","            }","","            directory = options.basePath ? path.resolve(options.basePath, directory) : directory;","            fs.exists(directory, function (exists) {","                if (!exists) {","                    return callback(null, []);","                }","","                dir.files(directory, function (err, files) {","                    if (err) { // TODO: error handling","                        throw err;","                    }","","                    if (!options.basePath &amp;&amp; !options.ext) {","                        return files;","                    }","","                    for (var i = 0; i &lt; files.length; i++) {","                        if (options.ext &amp;&amp; path.extname(files[i]) !== options.ext) {","                            continue;","                        }","                        files[i] = options.basePath ? files[i].replace(options.basePath + '/', '') : files[i];","                        filtered.push(files[i]);","                    }","","                    callback(err, filtered || []);","                });","            });","        }","","    };","","});"];
_$jscoverage['server/resolver/file.js'][1]++;
define((function () {
  _$jscoverage['server/resolver/file.js'][3]++;
  "use strict";
  _$jscoverage['server/resolver/file.js'][5]++;
  var fs = require("fs"), path = require("path"), dir = require("node-dir");
  _$jscoverage['server/resolver/file.js'][9]++;
  return ({getErrorTemplatePaths: (function (callback) {
  _$jscoverage['server/resolver/file.js'][12]++;
  var errorPaths = {"404": {server: (LAZO.BASE_PATH + "/base/404.hbs"), client: "/base/404.hbs"}, "500": {server: (LAZO.BASE_PATH + "/base/500.hbs"), client: "/base/500.hbs"}}, basename, clientPath, serverPath, directory = path.normalize((LAZO.FILE_REPO_PATH + "/app/" + "views"));
  _$jscoverage['server/resolver/file.js'][27]++;
  this.list(directory, {ext: ".hbs"}, (function (err, files) {
  _$jscoverage['server/resolver/file.js'][28]++;
  if (err) {
    _$jscoverage['server/resolver/file.js'][29]++;
    throw err;
  }
  _$jscoverage['server/resolver/file.js'][32]++;
  for (var i = 0; (i < files.length); (i++)) {
    _$jscoverage['server/resolver/file.js'][34]++;
    basename = path.basename(files[i], ".hbs");
    _$jscoverage['server/resolver/file.js'][35]++;
    serverPath = path.normalize(files[i]);
    _$jscoverage['server/resolver/file.js'][36]++;
    clientPath = path.normalize(serverPath.replace(LAZO.FILE_REPO_PATH, "/"));
    _$jscoverage['server/resolver/file.js'][37]++;
    if (((basename === "404") || (basename === "500"))) {
      _$jscoverage['server/resolver/file.js'][38]++;
      errorPaths[basename] = {server: serverPath, client: clientPath};
    }
}
  _$jscoverage['server/resolver/file.js'][45]++;
  callback(null, errorPaths);
}));
}), isBase: (function (modulePath, moduleType, callback, options) {
  _$jscoverage['server/resolver/file.js'][50]++;
  var request;
  _$jscoverage['server/resolver/file.js'][52]++;
  modulePath = path.normalize((LAZO.FILE_REPO_PATH + "/" + modulePath + ".js"));
  _$jscoverage['server/resolver/file.js'][53]++;
  fs.exists(modulePath, (function (exists) {
  _$jscoverage['server/resolver/file.js'][54]++;
  callback((! exists));
}));
}), resolvePath: (function (from, to) {
  _$jscoverage['server/resolver/file.js'][59]++;
  if (LAZO.app.isClient) {
    _$jscoverage['server/resolver/file.js'][60]++;
    LAZO.logger.warn("resolver.resolvePath should not be called on client");
    _$jscoverage['server/resolver/file.js'][61]++;
    return from;
  }
  _$jscoverage['server/resolver/file.js'][64]++;
  return path.resolve(from, to);
}), list: (function (directory, options, callback) {
  _$jscoverage['server/resolver/file.js'][68]++;
  var filtered = [];
  _$jscoverage['server/resolver/file.js'][70]++;
  if (LAZO.app.isClient) {
    _$jscoverage['server/resolver/file.js'][71]++;
    LAZO.logger.warn("resolver.list should only be called on the server");
    _$jscoverage['server/resolver/file.js'][72]++;
    return callback(null, []);
  }
  _$jscoverage['server/resolver/file.js'][75]++;
  directory = (options.basePath? path.resolve(options.basePath, directory): directory);
  _$jscoverage['server/resolver/file.js'][76]++;
  fs.exists(directory, (function (exists) {
  _$jscoverage['server/resolver/file.js'][77]++;
  if ((! exists)) {
    _$jscoverage['server/resolver/file.js'][78]++;
    return callback(null, []);
  }
  _$jscoverage['server/resolver/file.js'][81]++;
  dir.files(directory, (function (err, files) {
  _$jscoverage['server/resolver/file.js'][82]++;
  if (err) {
    _$jscoverage['server/resolver/file.js'][83]++;
    throw err;
  }
  _$jscoverage['server/resolver/file.js'][86]++;
  if (((! options.basePath) && (! options.ext))) {
    _$jscoverage['server/resolver/file.js'][87]++;
    return files;
  }
  _$jscoverage['server/resolver/file.js'][90]++;
  for (var i = 0; (i < files.length); (i++)) {
    _$jscoverage['server/resolver/file.js'][91]++;
    if ((options.ext && (path.extname(files[i]) !== options.ext))) {
      _$jscoverage['server/resolver/file.js'][92]++;
      continue;
    }
    _$jscoverage['server/resolver/file.js'][94]++;
    files[i] = (options.basePath? files[i].replace((options.basePath + "/"), ""): files[i]);
    _$jscoverage['server/resolver/file.js'][95]++;
    filtered.push(files[i]);
}
  _$jscoverage['server/resolver/file.js'][98]++;
  callback(err, (filtered || []));
}));
}));
})});
}));
